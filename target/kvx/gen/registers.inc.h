typedef enum Storage Storage;
enum Storage {
    STORAGE_kv3_AESPC, STORAGE_kv3_PM0, STORAGE_kv3_PM1, STORAGE_kv3_PM2,
    STORAGE_kv3_PM3, STORAGE_kv3_PMSA, STORAGE_kv3_T0V, STORAGE_kv3_T1V,
    STORAGE_kv3_T0R, STORAGE_kv3_T1R, STORAGE_kv3_WDV, STORAGE_kv3_WDR,
    STORAGE_kv3_MEN, STORAGE_kv3_PC, STORAGE_kv3_PS, STORAGE_kv3_SPS,
    STORAGE_kv3_SPS_PL0, STORAGE_kv3_SPS_PL1, STORAGE_kv3_SPS_PL2, STORAGE_kv3_SPS_PL3,
    STORAGE_kv3_CS, STORAGE_kv3_DBA0, STORAGE_kv3_DBA1, STORAGE_kv3_DBA2,
    STORAGE_kv3_DBA3, STORAGE_kv3_DWA0, STORAGE_kv3_DWA1, STORAGE_kv3_DWA2,
    STORAGE_kv3_DWA3, STORAGE_kv3_CSIT, STORAGE_kv3_ES, STORAGE_kv3_ES_PL0,
    STORAGE_kv3_ES_PL1, STORAGE_kv3_ES_PL2, STORAGE_kv3_ES_PL3, STORAGE_kv3_SID,
    STORAGE_kv3_SID_PL0, STORAGE_kv3_SID_PL1, STORAGE_kv3_SID_PL2, STORAGE_kv3_SID_PL3,
    STORAGE_kv3_IXC, STORAGE_kv3_TEL, STORAGE_kv3_TEH, STORAGE_kv3_DC,
    STORAGE_kv3_DCV2_0, STORAGE_kv3_DCV2_1, STORAGE_kv3_DCV2_2, STORAGE_kv3_DCV2_3,
    STORAGE_kv3_SRS, STORAGE_kv3_GRS, STORAGE_kv3_XRS, STORAGE_kv3_NPC,
    STORAGE_kv3_TCR, STORAGE_kv3_PMC, STORAGE_kv3_PCR, STORAGE_kv3_SYO,
    STORAGE_kv3_HTO, STORAGE_kv3_ITO, STORAGE_kv3_ILE, STORAGE_kv3_ILL,
    STORAGE_kv3_ILR, STORAGE_kv3_IPE, STORAGE_kv3_DO, STORAGE_kv3_MO,
    STORAGE_kv3_PSO, STORAGE_kv3_MMC, STORAGE_kv3_MES, STORAGE_kv3_WS,
    STORAGE_v2_SID, STORAGE_v2_SID_PL0, STORAGE_v2_SID_PL1, STORAGE_v2_SID_PL2,
    STORAGE_v2_SID_PL3, STORAGE_v2_IXC, STORAGE_v2_DC, };

typedef enum RegisterField RegisterField;
enum RegisterField {
    REGFIELD_NONE = 0,
    REGFIELD_kv3_MEN_MEN,
    REGFIELD_kv3_SYO_Q0,
    REGFIELD_kv3_SYO_Q1,
    REGFIELD_kv3_SYO_Q2,
    REGFIELD_kv3_SYO_Q3,
    REGFIELD_kv3_SYOW_Q0,
    REGFIELD_kv3_SYOW_Q1,
    REGFIELD_kv3_SYOW_Q2,
    REGFIELD_kv3_SYOW_Q3,
    REGFIELD_kv3_HTO_OPC,
    REGFIELD_kv3_HTO_DMIS,
    REGFIELD_kv3_HTO_PSYS,
    REGFIELD_kv3_HTO_DSYS,
    REGFIELD_kv3_HTO_DECCG,
    REGFIELD_kv3_HTO_SECCG,
    REGFIELD_kv3_HTO_NOMAP,
    REGFIELD_kv3_HTO_PROT,
    REGFIELD_kv3_HTO_W2CL,
    REGFIELD_kv3_HTO_A2CL,
    REGFIELD_kv3_HTO_DE,
    REGFIELD_kv3_HTO_VSFR,
    REGFIELD_kv3_HTO_PLO,
    REGFIELD_kv3_HTOW_OPC,
    REGFIELD_kv3_HTOW_DMIS,
    REGFIELD_kv3_HTOW_PSYS,
    REGFIELD_kv3_HTOW_DSYS,
    REGFIELD_kv3_HTOW_DECCG,
    REGFIELD_kv3_HTOW_SECCG,
    REGFIELD_kv3_HTOW_NOMAP,
    REGFIELD_kv3_HTOW_PROT,
    REGFIELD_kv3_HTOW_W2CL,
    REGFIELD_kv3_HTOW_A2CL,
    REGFIELD_kv3_HTOW_DE,
    REGFIELD_kv3_HTOW_VSFR,
    REGFIELD_kv3_HTOW_PLO,
    REGFIELD_kv3_ITO_IT0,
    REGFIELD_kv3_ITO_IT1,
    REGFIELD_kv3_ITO_IT2,
    REGFIELD_kv3_ITO_IT3,
    REGFIELD_kv3_ITO_IT4,
    REGFIELD_kv3_ITO_IT5,
    REGFIELD_kv3_ITO_IT6,
    REGFIELD_kv3_ITO_IT7,
    REGFIELD_kv3_ITO_IT8,
    REGFIELD_kv3_ITO_IT9,
    REGFIELD_kv3_ITO_IT10,
    REGFIELD_kv3_ITO_IT11,
    REGFIELD_kv3_ITO_IT12,
    REGFIELD_kv3_ITO_IT13,
    REGFIELD_kv3_ITO_IT14,
    REGFIELD_kv3_ITO_IT15,
    REGFIELD_kv3_ITO_IT16,
    REGFIELD_kv3_ITO_IT17,
    REGFIELD_kv3_ITO_IT18,
    REGFIELD_kv3_ITO_IT19,
    REGFIELD_kv3_ITO_IT20,
    REGFIELD_kv3_ITO_IT21,
    REGFIELD_kv3_ITO_IT22,
    REGFIELD_kv3_ITO_IT23,
    REGFIELD_kv3_ITO_IT24,
    REGFIELD_kv3_ITO_IT25,
    REGFIELD_kv3_ITO_IT26,
    REGFIELD_kv3_ITO_IT27,
    REGFIELD_kv3_ITO_IT28,
    REGFIELD_kv3_ITO_IT29,
    REGFIELD_kv3_ITO_IT30,
    REGFIELD_kv3_ITO_IT31,
    REGFIELD_kv3_ILE_IT0,
    REGFIELD_kv3_ILE_IT1,
    REGFIELD_kv3_ILE_IT2,
    REGFIELD_kv3_ILE_IT3,
    REGFIELD_kv3_ILE_IT4,
    REGFIELD_kv3_ILE_IT5,
    REGFIELD_kv3_ILE_IT6,
    REGFIELD_kv3_ILE_IT7,
    REGFIELD_kv3_ILE_IT8,
    REGFIELD_kv3_ILE_IT9,
    REGFIELD_kv3_ILE_IT10,
    REGFIELD_kv3_ILE_IT11,
    REGFIELD_kv3_ILE_IT12,
    REGFIELD_kv3_ILE_IT13,
    REGFIELD_kv3_ILE_IT14,
    REGFIELD_kv3_ILE_IT15,
    REGFIELD_kv3_ILE_IT16,
    REGFIELD_kv3_ILE_IT17,
    REGFIELD_kv3_ILE_IT18,
    REGFIELD_kv3_ILE_IT19,
    REGFIELD_kv3_ILE_IT20,
    REGFIELD_kv3_ILE_IT21,
    REGFIELD_kv3_ILE_IT22,
    REGFIELD_kv3_ILE_IT23,
    REGFIELD_kv3_ILE_IT24,
    REGFIELD_kv3_ILE_IT25,
    REGFIELD_kv3_ILE_IT26,
    REGFIELD_kv3_ILE_IT27,
    REGFIELD_kv3_ILE_IT28,
    REGFIELD_kv3_ILE_IT29,
    REGFIELD_kv3_ILE_IT30,
    REGFIELD_kv3_ILE_IT31,
    REGFIELD_kv3_ILL_IT0,
    REGFIELD_kv3_ILL_IT1,
    REGFIELD_kv3_ILL_IT2,
    REGFIELD_kv3_ILL_IT3,
    REGFIELD_kv3_ILL_IT4,
    REGFIELD_kv3_ILL_IT5,
    REGFIELD_kv3_ILL_IT6,
    REGFIELD_kv3_ILL_IT7,
    REGFIELD_kv3_ILL_IT8,
    REGFIELD_kv3_ILL_IT9,
    REGFIELD_kv3_ILL_IT10,
    REGFIELD_kv3_ILL_IT11,
    REGFIELD_kv3_ILL_IT12,
    REGFIELD_kv3_ILL_IT13,
    REGFIELD_kv3_ILL_IT14,
    REGFIELD_kv3_ILL_IT15,
    REGFIELD_kv3_ILL_IT16,
    REGFIELD_kv3_ILL_IT17,
    REGFIELD_kv3_ILL_IT18,
    REGFIELD_kv3_ILL_IT19,
    REGFIELD_kv3_ILL_IT20,
    REGFIELD_kv3_ILL_IT21,
    REGFIELD_kv3_ILL_IT22,
    REGFIELD_kv3_ILL_IT23,
    REGFIELD_kv3_ILL_IT24,
    REGFIELD_kv3_ILL_IT25,
    REGFIELD_kv3_ILL_IT26,
    REGFIELD_kv3_ILL_IT27,
    REGFIELD_kv3_ILL_IT28,
    REGFIELD_kv3_ILL_IT29,
    REGFIELD_kv3_ILL_IT30,
    REGFIELD_kv3_ILL_IT31,
    REGFIELD_kv3_ILR_IT0,
    REGFIELD_kv3_ILR_IT1,
    REGFIELD_kv3_ILR_IT2,
    REGFIELD_kv3_ILR_IT3,
    REGFIELD_kv3_ILR_IT4,
    REGFIELD_kv3_ILR_IT5,
    REGFIELD_kv3_ILR_IT6,
    REGFIELD_kv3_ILR_IT7,
    REGFIELD_kv3_ILR_IT8,
    REGFIELD_kv3_ILR_IT9,
    REGFIELD_kv3_ILR_IT10,
    REGFIELD_kv3_ILR_IT11,
    REGFIELD_kv3_ILR_IT12,
    REGFIELD_kv3_ILR_IT13,
    REGFIELD_kv3_ILR_IT14,
    REGFIELD_kv3_ILR_IT15,
    REGFIELD_kv3_ILR_IT16,
    REGFIELD_kv3_ILR_IT17,
    REGFIELD_kv3_ILR_IT18,
    REGFIELD_kv3_ILR_IT19,
    REGFIELD_kv3_ILR_IT20,
    REGFIELD_kv3_ILR_IT21,
    REGFIELD_kv3_ILR_IT22,
    REGFIELD_kv3_ILR_IT23,
    REGFIELD_kv3_ILR_IT24,
    REGFIELD_kv3_ILR_IT25,
    REGFIELD_kv3_ILR_IT26,
    REGFIELD_kv3_ILR_IT27,
    REGFIELD_kv3_ILR_IT28,
    REGFIELD_kv3_ILR_IT29,
    REGFIELD_kv3_ILR_IT30,
    REGFIELD_kv3_ILR_IT31,
    REGFIELD_kv3_ITOW_IT0,
    REGFIELD_kv3_ITOW_IT1,
    REGFIELD_kv3_ITOW_IT2,
    REGFIELD_kv3_ITOW_IT3,
    REGFIELD_kv3_ITOW_IT4,
    REGFIELD_kv3_ITOW_IT5,
    REGFIELD_kv3_ITOW_IT6,
    REGFIELD_kv3_ITOW_IT7,
    REGFIELD_kv3_ITOW_IT8,
    REGFIELD_kv3_ITOW_IT9,
    REGFIELD_kv3_ITOW_IT10,
    REGFIELD_kv3_ITOW_IT11,
    REGFIELD_kv3_ITOW_IT12,
    REGFIELD_kv3_ITOW_IT13,
    REGFIELD_kv3_ITOW_IT14,
    REGFIELD_kv3_ITOW_IT15,
    REGFIELD_kv3_ITOW_IT16,
    REGFIELD_kv3_ITOW_IT17,
    REGFIELD_kv3_ITOW_IT18,
    REGFIELD_kv3_ITOW_IT19,
    REGFIELD_kv3_ITOW_IT20,
    REGFIELD_kv3_ITOW_IT21,
    REGFIELD_kv3_ITOW_IT22,
    REGFIELD_kv3_ITOW_IT23,
    REGFIELD_kv3_ITOW_IT24,
    REGFIELD_kv3_ITOW_IT25,
    REGFIELD_kv3_ITOW_IT26,
    REGFIELD_kv3_ITOW_IT27,
    REGFIELD_kv3_ITOW_IT28,
    REGFIELD_kv3_ITOW_IT29,
    REGFIELD_kv3_ITOW_IT30,
    REGFIELD_kv3_ITOW_IT31,
    REGFIELD_kv3_DO_B0,
    REGFIELD_kv3_DO_B1,
    REGFIELD_kv3_DO_W0,
    REGFIELD_kv3_DO_W1,
    REGFIELD_kv3_DBA0_DBA0,
    REGFIELD_kv3_DBA1_DBA1,
    REGFIELD_kv3_DWA0_DWA0,
    REGFIELD_kv3_DWA1_DWA1,
    REGFIELD_kv3_DOW_B0,
    REGFIELD_kv3_DOW_B1,
    REGFIELD_kv3_DOW_W0,
    REGFIELD_kv3_DOW_W1,
    REGFIELD_kv3_MO_MMI,
    REGFIELD_kv3_MO_RFE,
    REGFIELD_kv3_MO_STOP,
    REGFIELD_kv3_MO_SYNC,
    REGFIELD_kv3_MO_PCR,
    REGFIELD_kv3_MO_MSG,
    REGFIELD_kv3_MO_MEN,
    REGFIELD_kv3_MO_MES,
    REGFIELD_kv3_MO_CSIT,
    REGFIELD_kv3_MO_T0,
    REGFIELD_kv3_MO_T1,
    REGFIELD_kv3_MO_WD,
    REGFIELD_kv3_MO_PM0,
    REGFIELD_kv3_MO_PM1,
    REGFIELD_kv3_MO_PM2,
    REGFIELD_kv3_MO_PM3,
    REGFIELD_kv3_MO_PMIT,
    REGFIELD_kv3_MOW_MMI,
    REGFIELD_kv3_MOW_RFE,
    REGFIELD_kv3_MOW_STOP,
    REGFIELD_kv3_MOW_SYNC,
    REGFIELD_kv3_MOW_PCR,
    REGFIELD_kv3_MOW_MSG,
    REGFIELD_kv3_MOW_MEN,
    REGFIELD_kv3_MOW_MES,
    REGFIELD_kv3_MOW_CSIT,
    REGFIELD_kv3_MOW_T0,
    REGFIELD_kv3_MOW_T1,
    REGFIELD_kv3_MOW_WD,
    REGFIELD_kv3_MOW_PM0,
    REGFIELD_kv3_MOW_PM1,
    REGFIELD_kv3_MOW_PM2,
    REGFIELD_kv3_MOW_PM3,
    REGFIELD_kv3_MOW_PMIT,
    REGFIELD_kv3_PS_PL,
    REGFIELD_kv3_PS_ET,
    REGFIELD_kv3_PS_HTD,
    REGFIELD_kv3_PS_IE,
    REGFIELD_kv3_PS_HLE,
    REGFIELD_kv3_PS_SRE,
    REGFIELD_kv3_PS_DAUS,
    REGFIELD_kv3_PS_ICE,
    REGFIELD_kv3_PS_USE,
    REGFIELD_kv3_PS_DCE,
    REGFIELD_kv3_PS_MME,
    REGFIELD_kv3_PS_IL,
    REGFIELD_kv3_PS_VS,
    REGFIELD_kv3_PS_V64,
    REGFIELD_kv3_PS_L2E,
    REGFIELD_kv3_PS_SME,
    REGFIELD_kv3_PS_SMR,
    REGFIELD_kv3_PS_PMJ,
    REGFIELD_kv3_PS_MMUP,
    REGFIELD_kv3_SPS_PL,
    REGFIELD_kv3_SPS_ET,
    REGFIELD_kv3_SPS_HTD,
    REGFIELD_kv3_SPS_IE,
    REGFIELD_kv3_SPS_HLE,
    REGFIELD_kv3_SPS_SRE,
    REGFIELD_kv3_SPS_DAUS,
    REGFIELD_kv3_SPS_ICE,
    REGFIELD_kv3_SPS_USE,
    REGFIELD_kv3_SPS_DCE,
    REGFIELD_kv3_SPS_MME,
    REGFIELD_kv3_SPS_IL,
    REGFIELD_kv3_SPS_VS,
    REGFIELD_kv3_SPS_V64,
    REGFIELD_kv3_SPS_L2E,
    REGFIELD_kv3_SPS_SME,
    REGFIELD_kv3_SPS_SMR,
    REGFIELD_kv3_SPS_PMJ,
    REGFIELD_kv3_SPS_MMUP,
    REGFIELD_kv3_SPS_PL0_PL,
    REGFIELD_kv3_SPS_PL0_ET,
    REGFIELD_kv3_SPS_PL0_HTD,
    REGFIELD_kv3_SPS_PL0_IE,
    REGFIELD_kv3_SPS_PL0_HLE,
    REGFIELD_kv3_SPS_PL0_SRE,
    REGFIELD_kv3_SPS_PL0_DAUS,
    REGFIELD_kv3_SPS_PL0_ICE,
    REGFIELD_kv3_SPS_PL0_USE,
    REGFIELD_kv3_SPS_PL0_DCE,
    REGFIELD_kv3_SPS_PL0_MME,
    REGFIELD_kv3_SPS_PL0_IL,
    REGFIELD_kv3_SPS_PL0_VS,
    REGFIELD_kv3_SPS_PL0_V64,
    REGFIELD_kv3_SPS_PL0_L2E,
    REGFIELD_kv3_SPS_PL0_SME,
    REGFIELD_kv3_SPS_PL0_SMR,
    REGFIELD_kv3_SPS_PL0_PMJ,
    REGFIELD_kv3_SPS_PL0_MMUP,
    REGFIELD_kv3_SPS_PL1_PL,
    REGFIELD_kv3_SPS_PL1_ET,
    REGFIELD_kv3_SPS_PL1_HTD,
    REGFIELD_kv3_SPS_PL1_IE,
    REGFIELD_kv3_SPS_PL1_HLE,
    REGFIELD_kv3_SPS_PL1_SRE,
    REGFIELD_kv3_SPS_PL1_DAUS,
    REGFIELD_kv3_SPS_PL1_ICE,
    REGFIELD_kv3_SPS_PL1_USE,
    REGFIELD_kv3_SPS_PL1_DCE,
    REGFIELD_kv3_SPS_PL1_MME,
    REGFIELD_kv3_SPS_PL1_IL,
    REGFIELD_kv3_SPS_PL1_VS,
    REGFIELD_kv3_SPS_PL1_V64,
    REGFIELD_kv3_SPS_PL1_L2E,
    REGFIELD_kv3_SPS_PL1_SME,
    REGFIELD_kv3_SPS_PL1_SMR,
    REGFIELD_kv3_SPS_PL1_PMJ,
    REGFIELD_kv3_SPS_PL1_MMUP,
    REGFIELD_kv3_SPS_PL2_PL,
    REGFIELD_kv3_SPS_PL2_ET,
    REGFIELD_kv3_SPS_PL2_HTD,
    REGFIELD_kv3_SPS_PL2_IE,
    REGFIELD_kv3_SPS_PL2_HLE,
    REGFIELD_kv3_SPS_PL2_SRE,
    REGFIELD_kv3_SPS_PL2_DAUS,
    REGFIELD_kv3_SPS_PL2_ICE,
    REGFIELD_kv3_SPS_PL2_USE,
    REGFIELD_kv3_SPS_PL2_DCE,
    REGFIELD_kv3_SPS_PL2_MME,
    REGFIELD_kv3_SPS_PL2_IL,
    REGFIELD_kv3_SPS_PL2_VS,
    REGFIELD_kv3_SPS_PL2_V64,
    REGFIELD_kv3_SPS_PL2_L2E,
    REGFIELD_kv3_SPS_PL2_SME,
    REGFIELD_kv3_SPS_PL2_SMR,
    REGFIELD_kv3_SPS_PL2_PMJ,
    REGFIELD_kv3_SPS_PL2_MMUP,
    REGFIELD_kv3_SPS_PL3_PL,
    REGFIELD_kv3_SPS_PL3_ET,
    REGFIELD_kv3_SPS_PL3_HTD,
    REGFIELD_kv3_SPS_PL3_IE,
    REGFIELD_kv3_SPS_PL3_HLE,
    REGFIELD_kv3_SPS_PL3_SRE,
    REGFIELD_kv3_SPS_PL3_DAUS,
    REGFIELD_kv3_SPS_PL3_ICE,
    REGFIELD_kv3_SPS_PL3_USE,
    REGFIELD_kv3_SPS_PL3_DCE,
    REGFIELD_kv3_SPS_PL3_MME,
    REGFIELD_kv3_SPS_PL3_IL,
    REGFIELD_kv3_SPS_PL3_VS,
    REGFIELD_kv3_SPS_PL3_V64,
    REGFIELD_kv3_SPS_PL3_L2E,
    REGFIELD_kv3_SPS_PL3_SME,
    REGFIELD_kv3_SPS_PL3_SMR,
    REGFIELD_kv3_SPS_PL3_PMJ,
    REGFIELD_kv3_SPS_PL3_MMUP,
    REGFIELD_kv3_PSO_PL0,
    REGFIELD_kv3_PSO_PL1,
    REGFIELD_kv3_PSO_ET,
    REGFIELD_kv3_PSO_HTD,
    REGFIELD_kv3_PSO_IE,
    REGFIELD_kv3_PSO_HLE,
    REGFIELD_kv3_PSO_SRE,
    REGFIELD_kv3_PSO_DAUS,
    REGFIELD_kv3_PSO_ICE,
    REGFIELD_kv3_PSO_USE,
    REGFIELD_kv3_PSO_DCE,
    REGFIELD_kv3_PSO_MME,
    REGFIELD_kv3_PSO_IL0,
    REGFIELD_kv3_PSO_IL1,
    REGFIELD_kv3_PSO_VS0,
    REGFIELD_kv3_PSO_VS1,
    REGFIELD_kv3_PSO_V64,
    REGFIELD_kv3_PSO_L2E,
    REGFIELD_kv3_PSO_SME,
    REGFIELD_kv3_PSO_SMR,
    REGFIELD_kv3_PSO_PMJ0,
    REGFIELD_kv3_PSO_PMJ1,
    REGFIELD_kv3_PSO_PMJ2,
    REGFIELD_kv3_PSO_PMJ3,
    REGFIELD_kv3_PSO_MMUP,
    REGFIELD_kv3_PSOW_PL0,
    REGFIELD_kv3_PSOW_PL1,
    REGFIELD_kv3_PSOW_ET,
    REGFIELD_kv3_PSOW_HTD,
    REGFIELD_kv3_PSOW_IE,
    REGFIELD_kv3_PSOW_HLE,
    REGFIELD_kv3_PSOW_SRE,
    REGFIELD_kv3_PSOW_DAUS,
    REGFIELD_kv3_PSOW_ICE,
    REGFIELD_kv3_PSOW_USE,
    REGFIELD_kv3_PSOW_DCE,
    REGFIELD_kv3_PSOW_MME,
    REGFIELD_kv3_PSOW_IL0,
    REGFIELD_kv3_PSOW_IL1,
    REGFIELD_kv3_PSOW_VS0,
    REGFIELD_kv3_PSOW_VS1,
    REGFIELD_kv3_PSOW_V64,
    REGFIELD_kv3_PSOW_L2E,
    REGFIELD_kv3_PSOW_SME,
    REGFIELD_kv3_PSOW_SMR,
    REGFIELD_kv3_PSOW_PMJ0,
    REGFIELD_kv3_PSOW_PMJ1,
    REGFIELD_kv3_PSOW_PMJ2,
    REGFIELD_kv3_PSOW_PMJ3,
    REGFIELD_kv3_PSOW_MMUP,
    REGFIELD_kv3_CS_IC,
    REGFIELD_kv3_CS_IO,
    REGFIELD_kv3_CS_DZ,
    REGFIELD_kv3_CS_OV,
    REGFIELD_kv3_CS_UN,
    REGFIELD_kv3_CS_IN,
    REGFIELD_kv3_CS_XIO,
    REGFIELD_kv3_CS_XDZ,
    REGFIELD_kv3_CS_XOV,
    REGFIELD_kv3_CS_XUN,
    REGFIELD_kv3_CS_XIN,
    REGFIELD_kv3_CS_RM,
    REGFIELD_kv3_CS_XRM,
    REGFIELD_kv3_CS_XMF,
    REGFIELD_kv3_CS_CC,
    REGFIELD_kv3_CS_XDROP,
    REGFIELD_kv3_CS_XPOW2,
    REGFIELD_kv3_AESPC_AESPC,
    REGFIELD_kv3_CSIT_ICIE,
    REGFIELD_kv3_CSIT_IOIE,
    REGFIELD_kv3_CSIT_DZIE,
    REGFIELD_kv3_CSIT_OVIE,
    REGFIELD_kv3_CSIT_UNIE,
    REGFIELD_kv3_CSIT_INIE,
    REGFIELD_kv3_CSIT_XIOIE,
    REGFIELD_kv3_CSIT_XDZIE,
    REGFIELD_kv3_CSIT_XOVIE,
    REGFIELD_kv3_CSIT_XUNIE,
    REGFIELD_kv3_CSIT_XINIE,
    REGFIELD_kv3_CSIT_AEIR,
    REGFIELD_kv3_CSIT_AEC,
    REGFIELD_kv3_CSIT_SPCV,
    REGFIELD_kv3_ES_EC,
    REGFIELD_kv3_ES_ED,
    REGFIELD_kv3_ES_OAPL,
    REGFIELD_kv3_ES_ORPL,
    REGFIELD_kv3_ES_PTAPL,
    REGFIELD_kv3_ES_PTRPL,
    REGFIELD_kv3_ES_ITN,
    REGFIELD_kv3_ES_ITL,
    REGFIELD_kv3_ES_ITI,
    REGFIELD_kv3_ES_SN,
    REGFIELD_kv3_ES_HTC,
    REGFIELD_kv3_ES_SFRT,
    REGFIELD_kv3_ES_SFRI,
    REGFIELD_kv3_ES_GPRP,
    REGFIELD_kv3_ES_SFRP,
    REGFIELD_kv3_ES_DHT,
    REGFIELD_kv3_ES_RWX,
    REGFIELD_kv3_ES_NTA,
    REGFIELD_kv3_ES_UCA,
    REGFIELD_kv3_ES_AS,
    REGFIELD_kv3_ES_BS,
    REGFIELD_kv3_ES_DRI,
    REGFIELD_kv3_ES_PIC,
    REGFIELD_kv3_ES_DC,
    REGFIELD_kv3_ES_BN,
    REGFIELD_kv3_ES_WN,
    REGFIELD_kv3_ES_PL0_EC,
    REGFIELD_kv3_ES_PL0_ED,
    REGFIELD_kv3_ES_PL0_OAPL,
    REGFIELD_kv3_ES_PL0_ORPL,
    REGFIELD_kv3_ES_PL0_PTAPL,
    REGFIELD_kv3_ES_PL0_PTRPL,
    REGFIELD_kv3_ES_PL0_ITN,
    REGFIELD_kv3_ES_PL0_ITL,
    REGFIELD_kv3_ES_PL0_ITI,
    REGFIELD_kv3_ES_PL0_SN,
    REGFIELD_kv3_ES_PL0_HTC,
    REGFIELD_kv3_ES_PL0_SFRT,
    REGFIELD_kv3_ES_PL0_SFRI,
    REGFIELD_kv3_ES_PL0_GPRP,
    REGFIELD_kv3_ES_PL0_SFRP,
    REGFIELD_kv3_ES_PL0_DHT,
    REGFIELD_kv3_ES_PL0_RWX,
    REGFIELD_kv3_ES_PL0_NTA,
    REGFIELD_kv3_ES_PL0_UCA,
    REGFIELD_kv3_ES_PL0_AS,
    REGFIELD_kv3_ES_PL0_BS,
    REGFIELD_kv3_ES_PL0_DRI,
    REGFIELD_kv3_ES_PL0_PIC,
    REGFIELD_kv3_ES_PL0_DC,
    REGFIELD_kv3_ES_PL0_BN,
    REGFIELD_kv3_ES_PL0_WN,
    REGFIELD_kv3_ES_PL1_EC,
    REGFIELD_kv3_ES_PL1_ED,
    REGFIELD_kv3_ES_PL1_OAPL,
    REGFIELD_kv3_ES_PL1_ORPL,
    REGFIELD_kv3_ES_PL1_PTAPL,
    REGFIELD_kv3_ES_PL1_PTRPL,
    REGFIELD_kv3_ES_PL1_ITN,
    REGFIELD_kv3_ES_PL1_ITL,
    REGFIELD_kv3_ES_PL1_ITI,
    REGFIELD_kv3_ES_PL1_SN,
    REGFIELD_kv3_ES_PL1_HTC,
    REGFIELD_kv3_ES_PL1_SFRT,
    REGFIELD_kv3_ES_PL1_SFRI,
    REGFIELD_kv3_ES_PL1_GPRP,
    REGFIELD_kv3_ES_PL1_SFRP,
    REGFIELD_kv3_ES_PL1_DHT,
    REGFIELD_kv3_ES_PL1_RWX,
    REGFIELD_kv3_ES_PL1_NTA,
    REGFIELD_kv3_ES_PL1_UCA,
    REGFIELD_kv3_ES_PL1_AS,
    REGFIELD_kv3_ES_PL1_BS,
    REGFIELD_kv3_ES_PL1_DRI,
    REGFIELD_kv3_ES_PL1_PIC,
    REGFIELD_kv3_ES_PL1_DC,
    REGFIELD_kv3_ES_PL1_BN,
    REGFIELD_kv3_ES_PL1_WN,
    REGFIELD_kv3_ES_PL2_EC,
    REGFIELD_kv3_ES_PL2_ED,
    REGFIELD_kv3_ES_PL2_OAPL,
    REGFIELD_kv3_ES_PL2_ORPL,
    REGFIELD_kv3_ES_PL2_PTAPL,
    REGFIELD_kv3_ES_PL2_PTRPL,
    REGFIELD_kv3_ES_PL2_ITN,
    REGFIELD_kv3_ES_PL2_ITL,
    REGFIELD_kv3_ES_PL2_ITI,
    REGFIELD_kv3_ES_PL2_SN,
    REGFIELD_kv3_ES_PL2_HTC,
    REGFIELD_kv3_ES_PL2_SFRT,
    REGFIELD_kv3_ES_PL2_SFRI,
    REGFIELD_kv3_ES_PL2_GPRP,
    REGFIELD_kv3_ES_PL2_SFRP,
    REGFIELD_kv3_ES_PL2_DHT,
    REGFIELD_kv3_ES_PL2_RWX,
    REGFIELD_kv3_ES_PL2_NTA,
    REGFIELD_kv3_ES_PL2_UCA,
    REGFIELD_kv3_ES_PL2_AS,
    REGFIELD_kv3_ES_PL2_BS,
    REGFIELD_kv3_ES_PL2_DRI,
    REGFIELD_kv3_ES_PL2_PIC,
    REGFIELD_kv3_ES_PL2_DC,
    REGFIELD_kv3_ES_PL2_BN,
    REGFIELD_kv3_ES_PL2_WN,
    REGFIELD_kv3_ES_PL3_EC,
    REGFIELD_kv3_ES_PL3_ED,
    REGFIELD_kv3_ES_PL3_OAPL,
    REGFIELD_kv3_ES_PL3_ORPL,
    REGFIELD_kv3_ES_PL3_PTAPL,
    REGFIELD_kv3_ES_PL3_PTRPL,
    REGFIELD_kv3_ES_PL3_ITN,
    REGFIELD_kv3_ES_PL3_ITL,
    REGFIELD_kv3_ES_PL3_ITI,
    REGFIELD_kv3_ES_PL3_SN,
    REGFIELD_kv3_ES_PL3_HTC,
    REGFIELD_kv3_ES_PL3_SFRT,
    REGFIELD_kv3_ES_PL3_SFRI,
    REGFIELD_kv3_ES_PL3_GPRP,
    REGFIELD_kv3_ES_PL3_SFRP,
    REGFIELD_kv3_ES_PL3_DHT,
    REGFIELD_kv3_ES_PL3_RWX,
    REGFIELD_kv3_ES_PL3_NTA,
    REGFIELD_kv3_ES_PL3_UCA,
    REGFIELD_kv3_ES_PL3_AS,
    REGFIELD_kv3_ES_PL3_BS,
    REGFIELD_kv3_ES_PL3_DRI,
    REGFIELD_kv3_ES_PL3_PIC,
    REGFIELD_kv3_ES_PL3_DC,
    REGFIELD_kv3_ES_PL3_BN,
    REGFIELD_kv3_ES_PL3_WN,
    REGFIELD_kv3_TCR_T0CE,
    REGFIELD_kv3_TCR_T1CE,
    REGFIELD_kv3_TCR_T0IE,
    REGFIELD_kv3_TCR_T1IE,
    REGFIELD_kv3_TCR_T0ST,
    REGFIELD_kv3_TCR_T1ST,
    REGFIELD_kv3_TCR_T0SI,
    REGFIELD_kv3_TCR_T1SI,
    REGFIELD_kv3_TCR_WCE,
    REGFIELD_kv3_TCR_WIE,
    REGFIELD_kv3_TCR_WUI,
    REGFIELD_kv3_TCR_WUS,
    REGFIELD_kv3_TCR_WSI,
    REGFIELD_kv3_PM0_PM0,
    REGFIELD_kv3_PM1_PM1,
    REGFIELD_kv3_PM2_PM2,
    REGFIELD_kv3_PM3_PM3,
    REGFIELD_kv3_PMSA_PMSA,
    REGFIELD_kv3_T0V_T0V,
    REGFIELD_kv3_T1V_T1V,
    REGFIELD_kv3_T0R_T0R,
    REGFIELD_kv3_T1R_T1R,
    REGFIELD_kv3_WDV_WDV,
    REGFIELD_kv3_WDR_WDR,
    REGFIELD_kv3_PMC_PM0C,
    REGFIELD_kv3_PMC_PM1C,
    REGFIELD_kv3_PMC_PM2C,
    REGFIELD_kv3_PMC_PM3C,
    REGFIELD_kv3_PMC_SAV,
    REGFIELD_kv3_PMC_PM0IE,
    REGFIELD_kv3_PMC_PM1IE,
    REGFIELD_kv3_PMC_PM2IE,
    REGFIELD_kv3_PMC_PM3IE,
    REGFIELD_kv3_PMC_SAT,
    REGFIELD_kv3_PCR_PID,
    REGFIELD_kv3_PCR_CID,
    REGFIELD_kv3_PCR_MID,
    REGFIELD_kv3_PCR_CAR,
    REGFIELD_kv3_PCR_CMA,
    REGFIELD_kv3_PCR_SV,
    REGFIELD_kv3_PCR_ST,
    REGFIELD_kv3_PCR_BM,
    REGFIELD_kv3_PCR_COE,
    REGFIELD_kv3_PCR_L1CE,
    REGFIELD_kv3_PCR_DSEM,
    REGFIELD_kv3_MMC_ASN,
    REGFIELD_kv3_MMC_S,
    REGFIELD_kv3_MMC_SNE,
    REGFIELD_kv3_MMC_SPE,
    REGFIELD_kv3_MMC_PTC,
    REGFIELD_kv3_MMC_SW,
    REGFIELD_kv3_MMC_SS,
    REGFIELD_kv3_MMC_SB,
    REGFIELD_kv3_MMC_PAR,
    REGFIELD_kv3_MMC_E,
    REGFIELD_kv3_TEL_ES,
    REGFIELD_kv3_TEL_CP,
    REGFIELD_kv3_TEL_PA,
    REGFIELD_kv3_TEL_PS,
    REGFIELD_kv3_TEL_FN,
    REGFIELD_kv3_TEH_ASN,
    REGFIELD_kv3_TEH_G,
    REGFIELD_kv3_TEH_VS,
    REGFIELD_kv3_TEH_PN,
    REGFIELD_kv3_DC_BE0,
    REGFIELD_kv3_DC_BR0,
    REGFIELD_kv3_DC_BE1,
    REGFIELD_kv3_DC_BR1,
    REGFIELD_kv3_DC_WE0,
    REGFIELD_kv3_DC_WR0,
    REGFIELD_kv3_DC_WE1,
    REGFIELD_kv3_DC_WR1,
    REGFIELD_kv3_MES_PSE,
    REGFIELD_kv3_MES_PILSY,
    REGFIELD_kv3_MES_PILDE,
    REGFIELD_kv3_MES_PILPA,
    REGFIELD_kv3_MES_DSE,
    REGFIELD_kv3_MES_DILSY,
    REGFIELD_kv3_MES_DILDE,
    REGFIELD_kv3_MES_DILPA,
    REGFIELD_kv3_MES_DDEE,
    REGFIELD_kv3_MES_DSYE,
    REGFIELD_kv3_WS_WU0,
    REGFIELD_kv3_WS_WU1,
    REGFIELD_kv3_WS_WU2,
    REGFIELD_kv3_IPE_FE,
    REGFIELD_kv3_IPE_BE,
    REGFIELD_kv3_IPE_FM,
    REGFIELD_kv3_IPE_BM,
    REGFIELD_kv3_DO_B2,
    REGFIELD_kv3_DO_B3,
    REGFIELD_kv3_DO_W2,
    REGFIELD_kv3_DO_W3,
    REGFIELD_kv3_DO_BI0,
    REGFIELD_kv3_DO_BI1,
    REGFIELD_kv3_DO_BI2,
    REGFIELD_kv3_DO_BI3,
    REGFIELD_kv3_DBA2_DBA2,
    REGFIELD_kv3_DBA3_DBA3,
    REGFIELD_kv3_DWA2_DWA2,
    REGFIELD_kv3_DWA3_DWA3,
    REGFIELD_kv3_DOW_B2,
    REGFIELD_kv3_DOW_B3,
    REGFIELD_kv3_DOW_W2,
    REGFIELD_kv3_DOW_W3,
    REGFIELD_kv3_DOW_BI0,
    REGFIELD_kv3_DOW_BI1,
    REGFIELD_kv3_DOW_BI2,
    REGFIELD_kv3_DOW_BI3,
    REGFIELD_kv3_MO_COMM,
    REGFIELD_kv3_MOW_COMM,
    REGFIELD_kv3_ES_DRX,
    REGFIELD_kv3_ES_DAF,
    REGFIELD_kv3_ES_DCV2,
    REGFIELD_kv3_ES_WBN,
    REGFIELD_kv3_ES_PL0_DRX,
    REGFIELD_kv3_ES_PL0_DAF,
    REGFIELD_kv3_ES_PL0_DCV2,
    REGFIELD_kv3_ES_PL0_WBN,
    REGFIELD_kv3_ES_PL1_DRX,
    REGFIELD_kv3_ES_PL1_DAF,
    REGFIELD_kv3_ES_PL1_DCV2,
    REGFIELD_kv3_ES_PL1_WBN,
    REGFIELD_kv3_ES_PL2_DRX,
    REGFIELD_kv3_ES_PL2_DAF,
    REGFIELD_kv3_ES_PL2_DCV2,
    REGFIELD_kv3_ES_PL2_WBN,
    REGFIELD_kv3_ES_PL3_DRX,
    REGFIELD_kv3_ES_PL3_DAF,
    REGFIELD_kv3_ES_PL3_DCV2,
    REGFIELD_kv3_ES_PL3_WBN,
    REGFIELD_kv3_SID_SID,
    REGFIELD_kv3_SID_PL0_SID,
    REGFIELD_kv3_SID_PL1_SID,
    REGFIELD_kv3_SID_PL2_SID,
    REGFIELD_kv3_SID_PL3_SID,
    REGFIELD_kv3_PMC_SAF,
    REGFIELD_v2_PCR_CAR,
    REGFIELD_kv3_DC0_BE,
    REGFIELD_kv3_DC0_WE,
    REGFIELD_kv3_DC0_WTYP,
    REGFIELD_kv3_DC0_WSZ,
    REGFIELD_kv3_DC1_BE,
    REGFIELD_kv3_DC1_WE,
    REGFIELD_kv3_DC1_WTYP,
    REGFIELD_kv3_DC1_WSZ,
    REGFIELD_kv3_DC2_BE,
    REGFIELD_kv3_DC2_WE,
    REGFIELD_kv3_DC2_WTYP,
    REGFIELD_kv3_DC2_WSZ,
    REGFIELD_kv3_DC3_BE,
    REGFIELD_kv3_DC3_WE,
    REGFIELD_kv3_DC3_WTYP,
    REGFIELD_kv3_DC3_WSZ,
    REGFIELD_kv3_IXC_FCB,
    REGFIELD_kv3_IXC_BCB,
};

typedef enum Register Register;
enum Register {
    REG_kv3_PC, REG_kv3_PS, REG_kv3_PCR, REG_kv3_RA,
    REG_kv3_CS, REG_kv3_CSIT, REG_kv3_AESPC, REG_kv3_LS,
    REG_kv3_LE, REG_kv3_LC, REG_kv3_IPE, REG_kv3_MEN,
    REG_kv3_PMC, REG_kv3_PM0, REG_kv3_PM1, REG_kv3_PM2,
    REG_kv3_PM3, REG_kv3_PMSA, REG_kv3_TCR, REG_kv3_T0V,
    REG_kv3_T1V, REG_kv3_T0R, REG_kv3_T1R, REG_kv3_WDV,
    REG_kv3_WDR, REG_kv3_ILE, REG_kv3_ILL, REG_kv3_ILR,
    REG_kv3_MMC, REG_kv3_TEL, REG_kv3_TEH, REG_kv3_IXC,
    REG_kv3_SYO, REG_kv3_HTO, REG_kv3_ITO, REG_kv3_DO,
    REG_kv3_MO, REG_kv3_PSO, REG_kv3_RES38, REG_kv3_RES39,
    REG_kv3_DC, REG_kv3_DBA0, REG_kv3_DBA1, REG_kv3_DWA0,
    REG_kv3_DWA1, REG_kv3_MES, REG_kv3_WS, REG_kv3_DC0,
    REG_kv3_DC1, REG_kv3_DC2, REG_kv3_DC3, REG_kv3_DBA2,
    REG_kv3_DBA3, REG_kv3_DWA2, REG_kv3_DWA3, REG_kv3_RES55,
    REG_kv3_RES56, REG_kv3_RES57, REG_kv3_RES58, REG_kv3_RES59,
    REG_kv3_RES60, REG_kv3_RES61, REG_kv3_RES62, REG_kv3_RES63,
    REG_kv3_SPC_PL0, REG_kv3_SPC_PL1, REG_kv3_SPC_PL2, REG_kv3_SPC_PL3,
    REG_kv3_SPS_PL0, REG_kv3_SPS_PL1, REG_kv3_SPS_PL2, REG_kv3_SPS_PL3,
    REG_kv3_EA_PL0, REG_kv3_EA_PL1, REG_kv3_EA_PL2, REG_kv3_EA_PL3,
    REG_kv3_EV_PL0, REG_kv3_EV_PL1, REG_kv3_EV_PL2, REG_kv3_EV_PL3,
    REG_kv3_SR_PL0, REG_kv3_SR_PL1, REG_kv3_SR_PL2, REG_kv3_SR_PL3,
    REG_kv3_ES_PL0, REG_kv3_ES_PL1, REG_kv3_ES_PL2, REG_kv3_ES_PL3,
    REG_kv3_SID_PL0, REG_kv3_SID_PL1, REG_kv3_SID_PL2, REG_kv3_SID_PL3,
    REG_kv3_SR1_PL0, REG_kv3_SR1_PL1, REG_kv3_SR1_PL2, REG_kv3_SR1_PL3,
    REG_kv3_SYOW, REG_kv3_HTOW, REG_kv3_ITOW, REG_kv3_DOW,
    REG_kv3_MOW, REG_kv3_PSOW, REG_kv3_RES102, REG_kv3_RES103,
    REG_kv3_RES104, REG_kv3_RES105, REG_kv3_RES106, REG_kv3_RES107,
    REG_kv3_RES108, REG_kv3_RES109, REG_kv3_RES110, REG_kv3_RES111,
    REG_kv3_RES112, REG_kv3_RES113, REG_kv3_RES114, REG_kv3_RES115,
    REG_kv3_RES116, REG_kv3_RES117, REG_kv3_RES118, REG_kv3_RES119,
    REG_kv3_RES120, REG_kv3_RES121, REG_kv3_RES122, REG_kv3_RES123,
    REG_kv3_RES124, REG_kv3_RES125, REG_kv3_RES126, REG_kv3_RES127,
    REG_kv3_SPC, REG_kv3_RES129, REG_kv3_RES130, REG_kv3_RES131,
    REG_kv3_SPS, REG_kv3_RES133, REG_kv3_RES134, REG_kv3_RES135,
    REG_kv3_EA, REG_kv3_RES137, REG_kv3_RES138, REG_kv3_RES139,
    REG_kv3_EV, REG_kv3_RES141, REG_kv3_RES142, REG_kv3_RES143,
    REG_kv3_SR, REG_kv3_RES145, REG_kv3_RES146, REG_kv3_RES147,
    REG_kv3_ES, REG_kv3_RES149, REG_kv3_RES150, REG_kv3_RES151,
    REG_kv3_SID, REG_kv3_RES153, REG_kv3_RES154, REG_kv3_RES155,
    REG_kv3_SR1, REG_kv3_RES157, REG_kv3_RES158, REG_kv3_RES159,
    REG_kv3_RES160, REG_kv3_RES161, REG_kv3_RES162, REG_kv3_RES163,
    REG_kv3_RES164, REG_kv3_RES165, REG_kv3_RES166, REG_kv3_RES167,
    REG_kv3_RES168, REG_kv3_RES169, REG_kv3_RES170, REG_kv3_RES171,
    REG_kv3_RES172, REG_kv3_RES173, REG_kv3_RES174, REG_kv3_RES175,
    REG_kv3_RES176, REG_kv3_RES177, REG_kv3_RES178, REG_kv3_RES179,
    REG_kv3_RES180, REG_kv3_RES181, REG_kv3_RES182, REG_kv3_RES183,
    REG_kv3_RES184, REG_kv3_RES185, REG_kv3_RES186, REG_kv3_RES187,
    REG_kv3_RES188, REG_kv3_RES189, REG_kv3_RES190, REG_kv3_RES191,
    REG_kv3_RES192, REG_kv3_RES193, REG_kv3_RES194, REG_kv3_RES195,
    REG_kv3_RES196, REG_kv3_RES197, REG_kv3_RES198, REG_kv3_RES199,
    REG_kv3_RES200, REG_kv3_RES201, REG_kv3_RES202, REG_kv3_RES203,
    REG_kv3_RES204, REG_kv3_RES205, REG_kv3_RES206, REG_kv3_RES207,
    REG_kv3_RES208, REG_kv3_RES209, REG_kv3_RES210, REG_kv3_RES211,
    REG_kv3_RES212, REG_kv3_RES213, REG_kv3_RES214, REG_kv3_RES215,
    REG_kv3_RES216, REG_kv3_RES217, REG_kv3_RES218, REG_kv3_RES219,
    REG_kv3_RES220, REG_kv3_RES221, REG_kv3_RES222, REG_kv3_RES223,
    REG_kv3_RES224, REG_kv3_RES225, REG_kv3_RES226, REG_kv3_RES227,
    REG_kv3_RES228, REG_kv3_RES229, REG_kv3_RES230, REG_kv3_RES231,
    REG_kv3_RES232, REG_kv3_RES233, REG_kv3_RES234, REG_kv3_RES235,
    REG_kv3_RES236, REG_kv3_RES237, REG_kv3_RES238, REG_kv3_RES239,
    REG_kv3_RES240, REG_kv3_RES241, REG_kv3_RES242, REG_kv3_RES243,
    REG_kv3_RES244, REG_kv3_RES245, REG_kv3_RES246, REG_kv3_RES247,
    REG_kv3_RES248, REG_kv3_RES249, REG_kv3_RES250, REG_kv3_RES251,
    REG_kv3_RES252, REG_kv3_RES253, REG_kv3_RES254, REG_kv3_RES255,
    REG_kv3_VSFR0, REG_kv3_VSFR1, REG_kv3_VSFR2, REG_kv3_VSFR3,
    REG_kv3_VSFR4, REG_kv3_VSFR5, REG_kv3_VSFR6, REG_kv3_VSFR7,
    REG_kv3_VSFR8, REG_kv3_VSFR9, REG_kv3_VSFR10, REG_kv3_VSFR11,
    REG_kv3_VSFR12, REG_kv3_VSFR13, REG_kv3_VSFR14, REG_kv3_VSFR15,
    REG_kv3_VSFR16, REG_kv3_VSFR17, REG_kv3_VSFR18, REG_kv3_VSFR19,
    REG_kv3_VSFR20, REG_kv3_VSFR21, REG_kv3_VSFR22, REG_kv3_VSFR23,
    REG_kv3_VSFR24, REG_kv3_VSFR25, REG_kv3_VSFR26, REG_kv3_VSFR27,
    REG_kv3_VSFR28, REG_kv3_VSFR29, REG_kv3_VSFR30, REG_kv3_VSFR31,
    REG_kv3_VSFR32, REG_kv3_VSFR33, REG_kv3_VSFR34, REG_kv3_VSFR35,
    REG_kv3_VSFR36, REG_kv3_VSFR37, REG_kv3_VSFR38, REG_kv3_VSFR39,
    REG_kv3_VSFR40, REG_kv3_VSFR41, REG_kv3_VSFR42, REG_kv3_VSFR43,
    REG_kv3_VSFR44, REG_kv3_VSFR45, REG_kv3_VSFR46, REG_kv3_VSFR47,
    REG_kv3_VSFR48, REG_kv3_VSFR49, REG_kv3_VSFR50, REG_kv3_VSFR51,
    REG_kv3_VSFR52, REG_kv3_VSFR53, REG_kv3_VSFR54, REG_kv3_VSFR55,
    REG_kv3_VSFR56, REG_kv3_VSFR57, REG_kv3_VSFR58, REG_kv3_VSFR59,
    REG_kv3_VSFR60, REG_kv3_VSFR61, REG_kv3_VSFR62, REG_kv3_VSFR63,
    REG_kv3_VSFR64, REG_kv3_VSFR65, REG_kv3_VSFR66, REG_kv3_VSFR67,
    REG_kv3_VSFR68, REG_kv3_VSFR69, REG_kv3_VSFR70, REG_kv3_VSFR71,
    REG_kv3_VSFR72, REG_kv3_VSFR73, REG_kv3_VSFR74, REG_kv3_VSFR75,
    REG_kv3_VSFR76, REG_kv3_VSFR77, REG_kv3_VSFR78, REG_kv3_VSFR79,
    REG_kv3_VSFR80, REG_kv3_VSFR81, REG_kv3_VSFR82, REG_kv3_VSFR83,
    REG_kv3_VSFR84, REG_kv3_VSFR85, REG_kv3_VSFR86, REG_kv3_VSFR87,
    REG_kv3_VSFR88, REG_kv3_VSFR89, REG_kv3_VSFR90, REG_kv3_VSFR91,
    REG_kv3_VSFR92, REG_kv3_VSFR93, REG_kv3_VSFR94, REG_kv3_VSFR95,
    REG_kv3_VSFR96, REG_kv3_VSFR97, REG_kv3_VSFR98, REG_kv3_VSFR99,
    REG_kv3_VSFR100, REG_kv3_VSFR101, REG_kv3_VSFR102, REG_kv3_VSFR103,
    REG_kv3_VSFR104, REG_kv3_VSFR105, REG_kv3_VSFR106, REG_kv3_VSFR107,
    REG_kv3_VSFR108, REG_kv3_VSFR109, REG_kv3_VSFR110, REG_kv3_VSFR111,
    REG_kv3_VSFR112, REG_kv3_VSFR113, REG_kv3_VSFR114, REG_kv3_VSFR115,
    REG_kv3_VSFR116, REG_kv3_VSFR117, REG_kv3_VSFR118, REG_kv3_VSFR119,
    REG_kv3_VSFR120, REG_kv3_VSFR121, REG_kv3_VSFR122, REG_kv3_VSFR123,
    REG_kv3_VSFR124, REG_kv3_VSFR125, REG_kv3_VSFR126, REG_kv3_VSFR127,
    REG_kv3_VSFR128, REG_kv3_VSFR129, REG_kv3_VSFR130, REG_kv3_VSFR131,
    REG_kv3_VSFR132, REG_kv3_VSFR133, REG_kv3_VSFR134, REG_kv3_VSFR135,
    REG_kv3_VSFR136, REG_kv3_VSFR137, REG_kv3_VSFR138, REG_kv3_VSFR139,
    REG_kv3_VSFR140, REG_kv3_VSFR141, REG_kv3_VSFR142, REG_kv3_VSFR143,
    REG_kv3_VSFR144, REG_kv3_VSFR145, REG_kv3_VSFR146, REG_kv3_VSFR147,
    REG_kv3_VSFR148, REG_kv3_VSFR149, REG_kv3_VSFR150, REG_kv3_VSFR151,
    REG_kv3_VSFR152, REG_kv3_VSFR153, REG_kv3_VSFR154, REG_kv3_VSFR155,
    REG_kv3_VSFR156, REG_kv3_VSFR157, REG_kv3_VSFR158, REG_kv3_VSFR159,
    REG_kv3_VSFR160, REG_kv3_VSFR161, REG_kv3_VSFR162, REG_kv3_VSFR163,
    REG_kv3_VSFR164, REG_kv3_VSFR165, REG_kv3_VSFR166, REG_kv3_VSFR167,
    REG_kv3_VSFR168, REG_kv3_VSFR169, REG_kv3_VSFR170, REG_kv3_VSFR171,
    REG_kv3_VSFR172, REG_kv3_VSFR173, REG_kv3_VSFR174, REG_kv3_VSFR175,
    REG_kv3_VSFR176, REG_kv3_VSFR177, REG_kv3_VSFR178, REG_kv3_VSFR179,
    REG_kv3_VSFR180, REG_kv3_VSFR181, REG_kv3_VSFR182, REG_kv3_VSFR183,
    REG_kv3_VSFR184, REG_kv3_VSFR185, REG_kv3_VSFR186, REG_kv3_VSFR187,
    REG_kv3_VSFR188, REG_kv3_VSFR189, REG_kv3_VSFR190, REG_kv3_VSFR191,
    REG_kv3_VSFR192, REG_kv3_VSFR193, REG_kv3_VSFR194, REG_kv3_VSFR195,
    REG_kv3_VSFR196, REG_kv3_VSFR197, REG_kv3_VSFR198, REG_kv3_VSFR199,
    REG_kv3_VSFR200, REG_kv3_VSFR201, REG_kv3_VSFR202, REG_kv3_VSFR203,
    REG_kv3_VSFR204, REG_kv3_VSFR205, REG_kv3_VSFR206, REG_kv3_VSFR207,
    REG_kv3_VSFR208, REG_kv3_VSFR209, REG_kv3_VSFR210, REG_kv3_VSFR211,
    REG_kv3_VSFR212, REG_kv3_VSFR213, REG_kv3_VSFR214, REG_kv3_VSFR215,
    REG_kv3_VSFR216, REG_kv3_VSFR217, REG_kv3_VSFR218, REG_kv3_VSFR219,
    REG_kv3_VSFR220, REG_kv3_VSFR221, REG_kv3_VSFR222, REG_kv3_VSFR223,
    REG_kv3_VSFR224, REG_kv3_VSFR225, REG_kv3_VSFR226, REG_kv3_VSFR227,
    REG_kv3_VSFR228, REG_kv3_VSFR229, REG_kv3_VSFR230, REG_kv3_VSFR231,
    REG_kv3_VSFR232, REG_kv3_VSFR233, REG_kv3_VSFR234, REG_kv3_VSFR235,
    REG_kv3_VSFR236, REG_kv3_VSFR237, REG_kv3_VSFR238, REG_kv3_VSFR239,
    REG_kv3_VSFR240, REG_kv3_VSFR241, REG_kv3_VSFR242, REG_kv3_VSFR243,
    REG_kv3_VSFR244, REG_kv3_VSFR245, REG_kv3_VSFR246, REG_kv3_VSFR247,
    REG_kv3_VSFR248, REG_kv3_VSFR249, REG_kv3_VSFR250, REG_kv3_VSFR251,
    REG_kv3_VSFR252, REG_kv3_VSFR253, REG_kv3_VSFR254, REG_kv3_VSFR255,
    REG_kv3_R0, REG_kv3_R1, REG_kv3_R2, REG_kv3_R3,
    REG_kv3_R4, REG_kv3_R5, REG_kv3_R6, REG_kv3_R7,
    REG_kv3_R8, REG_kv3_R9, REG_kv3_R10, REG_kv3_R11,
    REG_kv3_R12, REG_kv3_R13, REG_kv3_R14, REG_kv3_R15,
    REG_kv3_R16, REG_kv3_R17, REG_kv3_R18, REG_kv3_R19,
    REG_kv3_R20, REG_kv3_R21, REG_kv3_R22, REG_kv3_R23,
    REG_kv3_R24, REG_kv3_R25, REG_kv3_R26, REG_kv3_R27,
    REG_kv3_R28, REG_kv3_R29, REG_kv3_R30, REG_kv3_R31,
    REG_kv3_R32, REG_kv3_R33, REG_kv3_R34, REG_kv3_R35,
    REG_kv3_R36, REG_kv3_R37, REG_kv3_R38, REG_kv3_R39,
    REG_kv3_R40, REG_kv3_R41, REG_kv3_R42, REG_kv3_R43,
    REG_kv3_R44, REG_kv3_R45, REG_kv3_R46, REG_kv3_R47,
    REG_kv3_R48, REG_kv3_R49, REG_kv3_R50, REG_kv3_R51,
    REG_kv3_R52, REG_kv3_R53, REG_kv3_R54, REG_kv3_R55,
    REG_kv3_R56, REG_kv3_R57, REG_kv3_R58, REG_kv3_R59,
    REG_kv3_R60, REG_kv3_R61, REG_kv3_R62, REG_kv3_R63,
    REG_kv3_P0, REG_kv3_P2, REG_kv3_P4, REG_kv3_P6,
    REG_kv3_P8, REG_kv3_P10, REG_kv3_P12, REG_kv3_P14,
    REG_kv3_P16, REG_kv3_P18, REG_kv3_P20, REG_kv3_P22,
    REG_kv3_P24, REG_kv3_P26, REG_kv3_P28, REG_kv3_P30,
    REG_kv3_P32, REG_kv3_P34, REG_kv3_P36, REG_kv3_P38,
    REG_kv3_P40, REG_kv3_P42, REG_kv3_P44, REG_kv3_P46,
    REG_kv3_P48, REG_kv3_P50, REG_kv3_P52, REG_kv3_P54,
    REG_kv3_P56, REG_kv3_P58, REG_kv3_P60, REG_kv3_P62,
    REG_kv3_Q0, REG_kv3_Q4, REG_kv3_Q8, REG_kv3_Q12,
    REG_kv3_Q16, REG_kv3_Q20, REG_kv3_Q24, REG_kv3_Q28,
    REG_kv3_Q32, REG_kv3_Q36, REG_kv3_Q40, REG_kv3_Q44,
    REG_kv3_Q48, REG_kv3_Q52, REG_kv3_Q56, REG_kv3_Q60,
    REG_kv3_C0, REG_kv3_C1, REG_kv3_C2, REG_kv3_C3,
    REG_kv3_C4, REG_kv3_C5, REG_kv3_C6, REG_kv3_C7,
    REG_kv3_C8, REG_kv3_C9, REG_kv3_C10, REG_kv3_C11,
    REG_kv3_C12, REG_kv3_C13, REG_kv3_C14, REG_kv3_C15,
    REG_kv3_C16, REG_kv3_C17, REG_kv3_C18, REG_kv3_C19,
    REG_kv3_C20, REG_kv3_C21, REG_kv3_C22, REG_kv3_C23,
    REG_kv3_C24, REG_kv3_C25, REG_kv3_C26, REG_kv3_C27,
    REG_kv3_C28, REG_kv3_C29, REG_kv3_C30, REG_kv3_C31,
    REG_kv3_C32, REG_kv3_C33, REG_kv3_C34, REG_kv3_C35,
    REG_kv3_C36, REG_kv3_C37, REG_kv3_C38, REG_kv3_C39,
    REG_kv3_C40, REG_kv3_C41, REG_kv3_C42, REG_kv3_C43,
    REG_kv3_C44, REG_kv3_C45, REG_kv3_C46, REG_kv3_C47,
    REG_kv3_C48, REG_kv3_C49, REG_kv3_C50, REG_kv3_C51,
    REG_kv3_C52, REG_kv3_C53, REG_kv3_C54, REG_kv3_C55,
    REG_kv3_C56, REG_kv3_C57, REG_kv3_C58, REG_kv3_C59,
    REG_kv3_C60, REG_kv3_C61, REG_kv3_C62, REG_kv3_C63,
    REG_kv3_C64, REG_kv3_C65, REG_kv3_C66, REG_kv3_C67,
    REG_kv3_C68, REG_kv3_C69, REG_kv3_C70, REG_kv3_C71,
    REG_kv3_C72, REG_kv3_C73, REG_kv3_C74, REG_kv3_C75,
    REG_kv3_C76, REG_kv3_C77, REG_kv3_C78, REG_kv3_C79,
    REG_kv3_C80, REG_kv3_C81, REG_kv3_C82, REG_kv3_C83,
    REG_kv3_C84, REG_kv3_C85, REG_kv3_C86, REG_kv3_C87,
    REG_kv3_C88, REG_kv3_C89, REG_kv3_C90, REG_kv3_C91,
    REG_kv3_C92, REG_kv3_C93, REG_kv3_C94, REG_kv3_C95,
    REG_kv3_C96, REG_kv3_C97, REG_kv3_C98, REG_kv3_C99,
    REG_kv3_C100, REG_kv3_C101, REG_kv3_C102, REG_kv3_C103,
    REG_kv3_C104, REG_kv3_C105, REG_kv3_C106, REG_kv3_C107,
    REG_kv3_C108, REG_kv3_C109, REG_kv3_C110, REG_kv3_C111,
    REG_kv3_C112, REG_kv3_C113, REG_kv3_C114, REG_kv3_C115,
    REG_kv3_C116, REG_kv3_C117, REG_kv3_C118, REG_kv3_C119,
    REG_kv3_C120, REG_kv3_C121, REG_kv3_C122, REG_kv3_C123,
    REG_kv3_C124, REG_kv3_C125, REG_kv3_C126, REG_kv3_C127,
    REG_kv3_C128, REG_kv3_C129, REG_kv3_C130, REG_kv3_C131,
    REG_kv3_C132, REG_kv3_C133, REG_kv3_C134, REG_kv3_C135,
    REG_kv3_C136, REG_kv3_C137, REG_kv3_C138, REG_kv3_C139,
    REG_kv3_C140, REG_kv3_C141, REG_kv3_C142, REG_kv3_C143,
    REG_kv3_C144, REG_kv3_C145, REG_kv3_C146, REG_kv3_C147,
    REG_kv3_C148, REG_kv3_C149, REG_kv3_C150, REG_kv3_C151,
    REG_kv3_C152, REG_kv3_C153, REG_kv3_C154, REG_kv3_C155,
    REG_kv3_C156, REG_kv3_C157, REG_kv3_C158, REG_kv3_C159,
    REG_kv3_C160, REG_kv3_C161, REG_kv3_C162, REG_kv3_C163,
    REG_kv3_C164, REG_kv3_C165, REG_kv3_C166, REG_kv3_C167,
    REG_kv3_C168, REG_kv3_C169, REG_kv3_C170, REG_kv3_C171,
    REG_kv3_C172, REG_kv3_C173, REG_kv3_C174, REG_kv3_C175,
    REG_kv3_C176, REG_kv3_C177, REG_kv3_C178, REG_kv3_C179,
    REG_kv3_C180, REG_kv3_C181, REG_kv3_C182, REG_kv3_C183,
    REG_kv3_C184, REG_kv3_C185, REG_kv3_C186, REG_kv3_C187,
    REG_kv3_C188, REG_kv3_C189, REG_kv3_C190, REG_kv3_C191,
    REG_kv3_C192, REG_kv3_C193, REG_kv3_C194, REG_kv3_C195,
    REG_kv3_C196, REG_kv3_C197, REG_kv3_C198, REG_kv3_C199,
    REG_kv3_C200, REG_kv3_C201, REG_kv3_C202, REG_kv3_C203,
    REG_kv3_C204, REG_kv3_C205, REG_kv3_C206, REG_kv3_C207,
    REG_kv3_C208, REG_kv3_C209, REG_kv3_C210, REG_kv3_C211,
    REG_kv3_C212, REG_kv3_C213, REG_kv3_C214, REG_kv3_C215,
    REG_kv3_C216, REG_kv3_C217, REG_kv3_C218, REG_kv3_C219,
    REG_kv3_C220, REG_kv3_C221, REG_kv3_C222, REG_kv3_C223,
    REG_kv3_C224, REG_kv3_C225, REG_kv3_C226, REG_kv3_C227,
    REG_kv3_C228, REG_kv3_C229, REG_kv3_C230, REG_kv3_C231,
    REG_kv3_C232, REG_kv3_C233, REG_kv3_C234, REG_kv3_C235,
    REG_kv3_C236, REG_kv3_C237, REG_kv3_C238, REG_kv3_C239,
    REG_kv3_C240, REG_kv3_C241, REG_kv3_C242, REG_kv3_C243,
    REG_kv3_C244, REG_kv3_C245, REG_kv3_C246, REG_kv3_C247,
    REG_kv3_C248, REG_kv3_C249, REG_kv3_C250, REG_kv3_C251,
    REG_kv3_C252, REG_kv3_C253, REG_kv3_C254, REG_kv3_C255,
    REG_kv3_B0, REG_kv3_B1, REG_kv3_B2, REG_kv3_B3,
    REG_kv3_B4, REG_kv3_B5, REG_kv3_B6, REG_kv3_B7,
    REG_kv3_B8, REG_kv3_B9, REG_kv3_B10, REG_kv3_B11,
    REG_kv3_B12, REG_kv3_B13, REG_kv3_B14, REG_kv3_B15,
    REG_kv3_B16, REG_kv3_B17, REG_kv3_B18, REG_kv3_B19,
    REG_kv3_B20, REG_kv3_B21, REG_kv3_B22, REG_kv3_B23,
    REG_kv3_B24, REG_kv3_B25, REG_kv3_B26, REG_kv3_B27,
    REG_kv3_B28, REG_kv3_B29, REG_kv3_B30, REG_kv3_B31,
    REG_kv3_B32, REG_kv3_B33, REG_kv3_B34, REG_kv3_B35,
    REG_kv3_B36, REG_kv3_B37, REG_kv3_B38, REG_kv3_B39,
    REG_kv3_B40, REG_kv3_B41, REG_kv3_B42, REG_kv3_B43,
    REG_kv3_B44, REG_kv3_B45, REG_kv3_B46, REG_kv3_B47,
    REG_kv3_B48, REG_kv3_B49, REG_kv3_B50, REG_kv3_B51,
    REG_kv3_B52, REG_kv3_B53, REG_kv3_B54, REG_kv3_B55,
    REG_kv3_B56, REG_kv3_B57, REG_kv3_B58, REG_kv3_B59,
    REG_kv3_B60, REG_kv3_B61, REG_kv3_B62, REG_kv3_B63,
    REG_kv3_B64, REG_kv3_B65, REG_kv3_B66, REG_kv3_B67,
    REG_kv3_B68, REG_kv3_B69, REG_kv3_B70, REG_kv3_B71,
    REG_kv3_B72, REG_kv3_B73, REG_kv3_B74, REG_kv3_B75,
    REG_kv3_B76, REG_kv3_B77, REG_kv3_B78, REG_kv3_B79,
    REG_kv3_B80, REG_kv3_B81, REG_kv3_B82, REG_kv3_B83,
    REG_kv3_B84, REG_kv3_B85, REG_kv3_B86, REG_kv3_B87,
    REG_kv3_B88, REG_kv3_B89, REG_kv3_B90, REG_kv3_B91,
    REG_kv3_B92, REG_kv3_B93, REG_kv3_B94, REG_kv3_B95,
    REG_kv3_B96, REG_kv3_B97, REG_kv3_B98, REG_kv3_B99,
    REG_kv3_B100, REG_kv3_B101, REG_kv3_B102, REG_kv3_B103,
    REG_kv3_B104, REG_kv3_B105, REG_kv3_B106, REG_kv3_B107,
    REG_kv3_B108, REG_kv3_B109, REG_kv3_B110, REG_kv3_B111,
    REG_kv3_B112, REG_kv3_B113, REG_kv3_B114, REG_kv3_B115,
    REG_kv3_B116, REG_kv3_B117, REG_kv3_B118, REG_kv3_B119,
    REG_kv3_B120, REG_kv3_B121, REG_kv3_B122, REG_kv3_B123,
    REG_kv3_B124, REG_kv3_B125, REG_kv3_B126, REG_kv3_B127,
    REG_kv3_A0, REG_kv3_A1, REG_kv3_A2, REG_kv3_A3,
    REG_kv3_A4, REG_kv3_A5, REG_kv3_A6, REG_kv3_A7,
    REG_kv3_A8, REG_kv3_A9, REG_kv3_A10, REG_kv3_A11,
    REG_kv3_A12, REG_kv3_A13, REG_kv3_A14, REG_kv3_A15,
    REG_kv3_A16, REG_kv3_A17, REG_kv3_A18, REG_kv3_A19,
    REG_kv3_A20, REG_kv3_A21, REG_kv3_A22, REG_kv3_A23,
    REG_kv3_A24, REG_kv3_A25, REG_kv3_A26, REG_kv3_A27,
    REG_kv3_A28, REG_kv3_A29, REG_kv3_A30, REG_kv3_A31,
    REG_kv3_A32, REG_kv3_A33, REG_kv3_A34, REG_kv3_A35,
    REG_kv3_A36, REG_kv3_A37, REG_kv3_A38, REG_kv3_A39,
    REG_kv3_A40, REG_kv3_A41, REG_kv3_A42, REG_kv3_A43,
    REG_kv3_A44, REG_kv3_A45, REG_kv3_A46, REG_kv3_A47,
    REG_kv3_A48, REG_kv3_A49, REG_kv3_A50, REG_kv3_A51,
    REG_kv3_A52, REG_kv3_A53, REG_kv3_A54, REG_kv3_A55,
    REG_kv3_A56, REG_kv3_A57, REG_kv3_A58, REG_kv3_A59,
    REG_kv3_A60, REG_kv3_A61, REG_kv3_A62, REG_kv3_A63,
    REG_kv3_W0, REG_kv3_W1, REG_kv3_W2, REG_kv3_W3,
    REG_kv3_W4, REG_kv3_W5, REG_kv3_W6, REG_kv3_W7,
    REG_kv3_W8, REG_kv3_W9, REG_kv3_W10, REG_kv3_W11,
    REG_kv3_W12, REG_kv3_W13, REG_kv3_W14, REG_kv3_W15,
    REG_kv3_W16, REG_kv3_W17, REG_kv3_W18, REG_kv3_W19,
    REG_kv3_W20, REG_kv3_W21, REG_kv3_W22, REG_kv3_W23,
    REG_kv3_W24, REG_kv3_W25, REG_kv3_W26, REG_kv3_W27,
    REG_kv3_W28, REG_kv3_W29, REG_kv3_W30, REG_kv3_W31,
    REG_kv3_X0, REG_kv3_X1, REG_kv3_X2, REG_kv3_X3,
    REG_kv3_X4, REG_kv3_X5, REG_kv3_X6, REG_kv3_X7,
    REG_kv3_X8, REG_kv3_X9, REG_kv3_X10, REG_kv3_X11,
    REG_kv3_X12, REG_kv3_X13, REG_kv3_X14, REG_kv3_X15,
    REG_v2_PCR, REG_v2_PMC, REG_v2_IXC, REG_v2_DO,
    REG_v2_MO, REG_v2_DC, REG_v2_DC0, REG_v2_DC1,
    REG_v2_DC2, REG_v2_DC3, REG_v2_DBA2, REG_v2_DBA3,
    REG_v2_DWA2, REG_v2_DWA3, REG_v2_ES_PL0, REG_v2_ES_PL1,
    REG_v2_ES_PL2, REG_v2_ES_PL3, REG_v2_SID_PL0, REG_v2_SID_PL1,
    REG_v2_SID_PL2, REG_v2_SID_PL3, REG_v2_SR1_PL0, REG_v2_SR1_PL1,
    REG_v2_SR1_PL2, REG_v2_SR1_PL3, REG_v2_DOW, REG_v2_MOW,
    REG_v2_ES, REG_v2_SID, REG_v2_SR1, };

typedef enum RegFile RegFile;
enum RegFile {
    REGFILE_kv3_SFR,
    REGFILE_kv3_GPR,
    REGFILE_kv3_PGR,
    REGFILE_kv3_QGR,
    REGFILE_kv3_XCR,
    REGFILE_kv3_XBR,
    REGFILE_kv3_XVR,
    REGFILE_kv3_XWR,
    REGFILE_kv3_XMR,
};

typedef enum RegClass RegClass;
enum RegClass {
    REGCLASS_kv3_systemReg,
    REGCLASS_kv3_singleReg,
    REGCLASS_kv3_pairedReg,
    REGCLASS_kv3_pairedReg_0,
    REGCLASS_kv3_pairedReg_1,
    REGCLASS_kv3_quadReg,
    REGCLASS_kv3_quadReg_0,
    REGCLASS_kv3_quadReg_1,
    REGCLASS_kv3_quadReg_2,
    REGCLASS_kv3_quadReg_3,
    REGCLASS_kv3_coproReg,
    REGCLASS_kv3_blockReg,
    REGCLASS_kv3_blockReg_0,
    REGCLASS_kv3_blockReg_1,
    REGCLASS_kv3_vectorReg,
    REGCLASS_kv3_vectorReg_0,
    REGCLASS_kv3_vectorReg_1,
    REGCLASS_kv3_vectorReg_2,
    REGCLASS_kv3_vectorReg_3,
    REGCLASS_kv3_wideReg,
    REGCLASS_kv3_wideReg_0,
    REGCLASS_kv3_wideReg_1,
    REGCLASS_kv3_matrixReg,
    REGCLASS_kv3_matrixReg_0,
    REGCLASS_kv3_matrixReg_1,
    REGCLASS_kv3_matrixReg_2,
    REGCLASS_kv3_matrixReg_3,
    REGCLASS_kv3_aloneReg,
    REGCLASS_kv3_onlyraReg,
    REGCLASS_kv3_onlygetReg,
    REGCLASS_kv3_onlysetReg,
    REGCLASS_kv3_onlyfxReg,
    REGCLASS_kv3_onlyswapReg,
    REGCLASS_kv3_vectorRegE,
    REGCLASS_kv3_vectorRegO,
    REGCLASS_kv3_blockRegE,
    REGCLASS_kv3_blockRegO,
    REGCLASS_kv3_blockReg0M4,
    REGCLASS_kv3_blockReg1M4,
    REGCLASS_kv3_blockReg2M4,
    REGCLASS_kv3_blockReg3M4,
    REGCLASS_kv3_coproReg0M4,
    REGCLASS_kv3_coproReg1M4,
    REGCLASS_kv3_coproReg2M4,
    REGCLASS_kv3_coproReg3M4,
    REGCLASS_v2_systemReg,
    REGCLASS_v2_aloneReg,
    REGCLASS_v2_onlygetReg,
    REGCLASS_v2_onlysetReg,
    REGCLASS_v2_onlyfxReg,
    REGCLASS_v2_onlyswapReg,
};

typedef struct StorageDescr StorageDescr;
struct StorageDescr {
    size_t width;
    size_t count;
    size_t data_width;
    size_t offset;
};

static const StorageDescr STORAGES[] = {
    [STORAGE_kv3_AESPC] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_AESPC)
    },
    [STORAGE_kv3_PM0] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM0)
    },
    [STORAGE_kv3_PM1] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM1)
    },
    [STORAGE_kv3_PM2] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM2)
    },
    [STORAGE_kv3_PM3] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM3)
    },
    [STORAGE_kv3_PMSA] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PMSA)
    },
    [STORAGE_kv3_T0V] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T0V)
    },
    [STORAGE_kv3_T1V] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T1V)
    },
    [STORAGE_kv3_T0R] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T0R)
    },
    [STORAGE_kv3_T1R] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T1R)
    },
    [STORAGE_kv3_WDV] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_WDV)
    },
    [STORAGE_kv3_WDR] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_WDR)
    },
    [STORAGE_kv3_MEN] = {
        .width = 1,
        .count = 16,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MEN)
    },
    [STORAGE_kv3_PC] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PC)
    },
    [STORAGE_kv3_PS] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PS)
    },
    [STORAGE_kv3_SPS] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SPS)
    },
    [STORAGE_kv3_SPS_PL0] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL0)
    },
    [STORAGE_kv3_SPS_PL1] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL1)
    },
    [STORAGE_kv3_SPS_PL2] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL2)
    },
    [STORAGE_kv3_SPS_PL3] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL3)
    },
    [STORAGE_kv3_CS] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_CS)
    },
    [STORAGE_kv3_DBA0] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA0)
    },
    [STORAGE_kv3_DBA1] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA1)
    },
    [STORAGE_kv3_DBA2] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA2)
    },
    [STORAGE_kv3_DBA3] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA3)
    },
    [STORAGE_kv3_DWA0] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA0)
    },
    [STORAGE_kv3_DWA1] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA1)
    },
    [STORAGE_kv3_DWA2] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA2)
    },
    [STORAGE_kv3_DWA3] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA3)
    },
    [STORAGE_kv3_CSIT] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_CSIT)
    },
    [STORAGE_kv3_ES] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES)
    },
    [STORAGE_kv3_ES_PL0] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL0)
    },
    [STORAGE_kv3_ES_PL1] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL1)
    },
    [STORAGE_kv3_ES_PL2] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL2)
    },
    [STORAGE_kv3_ES_PL3] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL3)
    },
    [STORAGE_kv3_SID] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID)
    },
    [STORAGE_kv3_SID_PL0] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL0)
    },
    [STORAGE_kv3_SID_PL1] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL1)
    },
    [STORAGE_kv3_SID_PL2] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL2)
    },
    [STORAGE_kv3_SID_PL3] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL3)
    },
    [STORAGE_kv3_IXC] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_IXC)
    },
    [STORAGE_kv3_TEL] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_TEL)
    },
    [STORAGE_kv3_TEH] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_TEH)
    },
    [STORAGE_kv3_DC] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DC)
    },
    [STORAGE_kv3_DCV2_0] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_0)
    },
    [STORAGE_kv3_DCV2_1] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_1)
    },
    [STORAGE_kv3_DCV2_2] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_2)
    },
    [STORAGE_kv3_DCV2_3] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_3)
    },
    [STORAGE_kv3_SRS] = {
        .width = 64,
        .count = 512,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS)
    },
    [STORAGE_kv3_GRS] = {
        .width = 64,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS)
    },
    [STORAGE_kv3_XRS] = {
        .width = 64,
        .count = 256,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS)
    },
    [STORAGE_kv3_NPC] = {
        .width = 64,
        .count = 1,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_NPC)
    },
    [STORAGE_kv3_TCR] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_TCR)
    },
    [STORAGE_kv3_PMC] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PMC)
    },
    [STORAGE_kv3_PCR] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PCR)
    },
    [STORAGE_kv3_SYO] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SYO)
    },
    [STORAGE_kv3_HTO] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_HTO)
    },
    [STORAGE_kv3_ITO] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ITO)
    },
    [STORAGE_kv3_ILE] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILE)
    },
    [STORAGE_kv3_ILL] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILL)
    },
    [STORAGE_kv3_ILR] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILR)
    },
    [STORAGE_kv3_IPE] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_IPE)
    },
    [STORAGE_kv3_DO] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DO)
    },
    [STORAGE_kv3_MO] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MO)
    },
    [STORAGE_kv3_PSO] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PSO)
    },
    [STORAGE_kv3_MMC] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MMC)
    },
    [STORAGE_kv3_MES] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MES)
    },
    [STORAGE_kv3_WS] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_WS)
    },
    [STORAGE_v2_SID] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_SID)
    },
    [STORAGE_v2_SID_PL0] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL0)
    },
    [STORAGE_v2_SID_PL1] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL1)
    },
    [STORAGE_v2_SID_PL2] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL2)
    },
    [STORAGE_v2_SID_PL3] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL3)
    },
    [STORAGE_v2_IXC] = {
        .width = 1,
        .count = 32,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_IXC)
    },
    [STORAGE_v2_DC] = {
        .width = 1,
        .count = 64,
        .data_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_DC)
    },
};

typedef struct RegisterFieldDescr RegisterFieldDescr;
struct RegisterFieldDescr {
    const char *name; /* name (debug purpose mostly) */
    Register reg; /* register containing this field */
    int offset; /* offset of the field in bits */
    int width; /* width of the field in bits */
    uint64_t mask; /* field mask */
    int n_owners; /* number of fields */
    const RegisterField *owners; /* owners (pl-sized field(s)) */
    RegisterReadErrorType rerror; /* error on unprivileged read */
    RegisterWriteErrorType werror; /* error on unprivileged write */
};

static const RegisterFieldDescr REGISTERFIELDS[] = {
    [REGFIELD_kv3_MEN_MEN] = {
        .name = "MEN_MEN",
        .reg = REG_kv3_MEN,
        .offset = 0,
        .width = 16,
        .mask = 0x000000000000ffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MEN,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SYO_Q0] = {
        .name = "SYO_Q0",
        .reg = REG_kv3_SYO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_SYO_Q1] = {
        .name = "SYO_Q1",
        .reg = REG_kv3_SYO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_SYO_Q2] = {
        .name = "SYO_Q2",
        .reg = REG_kv3_SYO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_SYO_Q3] = {
        .name = "SYO_Q3",
        .reg = REG_kv3_SYO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_SYOW_Q0] = {
        .name = "SYOW_Q0",
        .reg = REG_kv3_SYOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_SYO_Q0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SYOW_Q1] = {
        .name = "SYOW_Q1",
        .reg = REG_kv3_SYOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_SYO_Q1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SYOW_Q2] = {
        .name = "SYOW_Q2",
        .reg = REG_kv3_SYOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_SYO_Q2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SYOW_Q3] = {
        .name = "SYOW_Q3",
        .reg = REG_kv3_SYOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_SYO_Q3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTO_OPC] = {
        .name = "HTO_OPC",
        .reg = REG_kv3_HTO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_HTO_DMIS] = {
        .name = "HTO_DMIS",
        .reg = REG_kv3_HTO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_HTO_PSYS] = {
        .name = "HTO_PSYS",
        .reg = REG_kv3_HTO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_HTO_DSYS] = {
        .name = "HTO_DSYS",
        .reg = REG_kv3_HTO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_HTO_DECCG] = {
        .name = "HTO_DECCG",
        .reg = REG_kv3_HTO,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_HTO_SECCG] = {
        .name = "HTO_SECCG",
        .reg = REG_kv3_HTO,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_HTO_NOMAP] = {
        .name = "HTO_NOMAP",
        .reg = REG_kv3_HTO,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_HTO_PROT] = {
        .name = "HTO_PROT",
        .reg = REG_kv3_HTO,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
    },
    [REGFIELD_kv3_HTO_W2CL] = {
        .name = "HTO_W2CL",
        .reg = REG_kv3_HTO,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_HTO_A2CL] = {
        .name = "HTO_A2CL",
        .reg = REG_kv3_HTO,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
    },
    [REGFIELD_kv3_HTO_DE] = {
        .name = "HTO_DE",
        .reg = REG_kv3_HTO,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_HTO_VSFR] = {
        .name = "HTO_VSFR",
        .reg = REG_kv3_HTO,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
    },
    [REGFIELD_kv3_HTO_PLO] = {
        .name = "HTO_PLO",
        .reg = REG_kv3_HTO,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
    },
    [REGFIELD_kv3_HTOW_OPC] = {
        .name = "HTOW_OPC",
        .reg = REG_kv3_HTOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_OPC,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_DMIS] = {
        .name = "HTOW_DMIS",
        .reg = REG_kv3_HTOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_DMIS,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_PSYS] = {
        .name = "HTOW_PSYS",
        .reg = REG_kv3_HTOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_PSYS,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_DSYS] = {
        .name = "HTOW_DSYS",
        .reg = REG_kv3_HTOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_DSYS,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_DECCG] = {
        .name = "HTOW_DECCG",
        .reg = REG_kv3_HTOW,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_DECCG,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_SECCG] = {
        .name = "HTOW_SECCG",
        .reg = REG_kv3_HTOW,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_SECCG,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_NOMAP] = {
        .name = "HTOW_NOMAP",
        .reg = REG_kv3_HTOW,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_NOMAP,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_PROT] = {
        .name = "HTOW_PROT",
        .reg = REG_kv3_HTOW,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_PROT,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_W2CL] = {
        .name = "HTOW_W2CL",
        .reg = REG_kv3_HTOW,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_W2CL,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_A2CL] = {
        .name = "HTOW_A2CL",
        .reg = REG_kv3_HTOW,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_A2CL,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_DE] = {
        .name = "HTOW_DE",
        .reg = REG_kv3_HTOW,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_DE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_VSFR] = {
        .name = "HTOW_VSFR",
        .reg = REG_kv3_HTOW,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_VSFR,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_HTOW_PLO] = {
        .name = "HTOW_PLO",
        .reg = REG_kv3_HTOW,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_HTO_PLO,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITO_IT0] = {
        .name = "ITO_IT0",
        .reg = REG_kv3_ITO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_ITO_IT1] = {
        .name = "ITO_IT1",
        .reg = REG_kv3_ITO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_ITO_IT2] = {
        .name = "ITO_IT2",
        .reg = REG_kv3_ITO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ITO_IT3] = {
        .name = "ITO_IT3",
        .reg = REG_kv3_ITO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ITO_IT4] = {
        .name = "ITO_IT4",
        .reg = REG_kv3_ITO,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ITO_IT5] = {
        .name = "ITO_IT5",
        .reg = REG_kv3_ITO,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ITO_IT6] = {
        .name = "ITO_IT6",
        .reg = REG_kv3_ITO,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ITO_IT7] = {
        .name = "ITO_IT7",
        .reg = REG_kv3_ITO,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
    },
    [REGFIELD_kv3_ITO_IT8] = {
        .name = "ITO_IT8",
        .reg = REG_kv3_ITO,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_ITO_IT9] = {
        .name = "ITO_IT9",
        .reg = REG_kv3_ITO,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
    },
    [REGFIELD_kv3_ITO_IT10] = {
        .name = "ITO_IT10",
        .reg = REG_kv3_ITO,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_ITO_IT11] = {
        .name = "ITO_IT11",
        .reg = REG_kv3_ITO,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
    },
    [REGFIELD_kv3_ITO_IT12] = {
        .name = "ITO_IT12",
        .reg = REG_kv3_ITO,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
    },
    [REGFIELD_kv3_ITO_IT13] = {
        .name = "ITO_IT13",
        .reg = REG_kv3_ITO,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
    },
    [REGFIELD_kv3_ITO_IT14] = {
        .name = "ITO_IT14",
        .reg = REG_kv3_ITO,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
    },
    [REGFIELD_kv3_ITO_IT15] = {
        .name = "ITO_IT15",
        .reg = REG_kv3_ITO,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
    },
    [REGFIELD_kv3_ITO_IT16] = {
        .name = "ITO_IT16",
        .reg = REG_kv3_ITO,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
    },
    [REGFIELD_kv3_ITO_IT17] = {
        .name = "ITO_IT17",
        .reg = REG_kv3_ITO,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
    },
    [REGFIELD_kv3_ITO_IT18] = {
        .name = "ITO_IT18",
        .reg = REG_kv3_ITO,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
    },
    [REGFIELD_kv3_ITO_IT19] = {
        .name = "ITO_IT19",
        .reg = REG_kv3_ITO,
        .offset = 38,
        .width = 2,
        .mask = 0x000000c000000000,
    },
    [REGFIELD_kv3_ITO_IT20] = {
        .name = "ITO_IT20",
        .reg = REG_kv3_ITO,
        .offset = 40,
        .width = 2,
        .mask = 0x0000030000000000,
    },
    [REGFIELD_kv3_ITO_IT21] = {
        .name = "ITO_IT21",
        .reg = REG_kv3_ITO,
        .offset = 42,
        .width = 2,
        .mask = 0x00000c0000000000,
    },
    [REGFIELD_kv3_ITO_IT22] = {
        .name = "ITO_IT22",
        .reg = REG_kv3_ITO,
        .offset = 44,
        .width = 2,
        .mask = 0x0000300000000000,
    },
    [REGFIELD_kv3_ITO_IT23] = {
        .name = "ITO_IT23",
        .reg = REG_kv3_ITO,
        .offset = 46,
        .width = 2,
        .mask = 0x0000c00000000000,
    },
    [REGFIELD_kv3_ITO_IT24] = {
        .name = "ITO_IT24",
        .reg = REG_kv3_ITO,
        .offset = 48,
        .width = 2,
        .mask = 0x0003000000000000,
    },
    [REGFIELD_kv3_ITO_IT25] = {
        .name = "ITO_IT25",
        .reg = REG_kv3_ITO,
        .offset = 50,
        .width = 2,
        .mask = 0x000c000000000000,
    },
    [REGFIELD_kv3_ITO_IT26] = {
        .name = "ITO_IT26",
        .reg = REG_kv3_ITO,
        .offset = 52,
        .width = 2,
        .mask = 0x0030000000000000,
    },
    [REGFIELD_kv3_ITO_IT27] = {
        .name = "ITO_IT27",
        .reg = REG_kv3_ITO,
        .offset = 54,
        .width = 2,
        .mask = 0x00c0000000000000,
    },
    [REGFIELD_kv3_ITO_IT28] = {
        .name = "ITO_IT28",
        .reg = REG_kv3_ITO,
        .offset = 56,
        .width = 2,
        .mask = 0x0300000000000000,
    },
    [REGFIELD_kv3_ITO_IT29] = {
        .name = "ITO_IT29",
        .reg = REG_kv3_ITO,
        .offset = 58,
        .width = 2,
        .mask = 0x0c00000000000000,
    },
    [REGFIELD_kv3_ITO_IT30] = {
        .name = "ITO_IT30",
        .reg = REG_kv3_ITO,
        .offset = 60,
        .width = 2,
        .mask = 0x3000000000000000,
    },
    [REGFIELD_kv3_ITO_IT31] = {
        .name = "ITO_IT31",
        .reg = REG_kv3_ITO,
        .offset = 62,
        .width = 2,
        .mask = 0xc000000000000000,
    },
    [REGFIELD_kv3_ILE_IT0] = {
        .name = "ILE_IT0",
        .reg = REG_kv3_ILE,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT1] = {
        .name = "ILE_IT1",
        .reg = REG_kv3_ILE,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT2] = {
        .name = "ILE_IT2",
        .reg = REG_kv3_ILE,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT3] = {
        .name = "ILE_IT3",
        .reg = REG_kv3_ILE,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT4] = {
        .name = "ILE_IT4",
        .reg = REG_kv3_ILE,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT4,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT5] = {
        .name = "ILE_IT5",
        .reg = REG_kv3_ILE,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT5,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT6] = {
        .name = "ILE_IT6",
        .reg = REG_kv3_ILE,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT6,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT7] = {
        .name = "ILE_IT7",
        .reg = REG_kv3_ILE,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT7,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT8] = {
        .name = "ILE_IT8",
        .reg = REG_kv3_ILE,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT8,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT9] = {
        .name = "ILE_IT9",
        .reg = REG_kv3_ILE,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT9,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT10] = {
        .name = "ILE_IT10",
        .reg = REG_kv3_ILE,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT10,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT11] = {
        .name = "ILE_IT11",
        .reg = REG_kv3_ILE,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT11,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT12] = {
        .name = "ILE_IT12",
        .reg = REG_kv3_ILE,
        .offset = 12,
        .width = 1,
        .mask = 0x0000000000001000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT12,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT13] = {
        .name = "ILE_IT13",
        .reg = REG_kv3_ILE,
        .offset = 13,
        .width = 1,
        .mask = 0x0000000000002000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT13,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT14] = {
        .name = "ILE_IT14",
        .reg = REG_kv3_ILE,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT14,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT15] = {
        .name = "ILE_IT15",
        .reg = REG_kv3_ILE,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT15,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT16] = {
        .name = "ILE_IT16",
        .reg = REG_kv3_ILE,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT16,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT17] = {
        .name = "ILE_IT17",
        .reg = REG_kv3_ILE,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT17,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT18] = {
        .name = "ILE_IT18",
        .reg = REG_kv3_ILE,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT18,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT19] = {
        .name = "ILE_IT19",
        .reg = REG_kv3_ILE,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT19,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT20] = {
        .name = "ILE_IT20",
        .reg = REG_kv3_ILE,
        .offset = 20,
        .width = 1,
        .mask = 0x0000000000100000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT20,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT21] = {
        .name = "ILE_IT21",
        .reg = REG_kv3_ILE,
        .offset = 21,
        .width = 1,
        .mask = 0x0000000000200000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT21,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT22] = {
        .name = "ILE_IT22",
        .reg = REG_kv3_ILE,
        .offset = 22,
        .width = 1,
        .mask = 0x0000000000400000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT22,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT23] = {
        .name = "ILE_IT23",
        .reg = REG_kv3_ILE,
        .offset = 23,
        .width = 1,
        .mask = 0x0000000000800000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT23,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT24] = {
        .name = "ILE_IT24",
        .reg = REG_kv3_ILE,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT24,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT25] = {
        .name = "ILE_IT25",
        .reg = REG_kv3_ILE,
        .offset = 25,
        .width = 1,
        .mask = 0x0000000002000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT25,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT26] = {
        .name = "ILE_IT26",
        .reg = REG_kv3_ILE,
        .offset = 26,
        .width = 1,
        .mask = 0x0000000004000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT26,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT27] = {
        .name = "ILE_IT27",
        .reg = REG_kv3_ILE,
        .offset = 27,
        .width = 1,
        .mask = 0x0000000008000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT27,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT28] = {
        .name = "ILE_IT28",
        .reg = REG_kv3_ILE,
        .offset = 28,
        .width = 1,
        .mask = 0x0000000010000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT28,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT29] = {
        .name = "ILE_IT29",
        .reg = REG_kv3_ILE,
        .offset = 29,
        .width = 1,
        .mask = 0x0000000020000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT29,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT30] = {
        .name = "ILE_IT30",
        .reg = REG_kv3_ILE,
        .offset = 30,
        .width = 1,
        .mask = 0x0000000040000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT30,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILE_IT31] = {
        .name = "ILE_IT31",
        .reg = REG_kv3_ILE,
        .offset = 31,
        .width = 1,
        .mask = 0x0000000080000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT0] = {
        .name = "ILL_IT0",
        .reg = REG_kv3_ILL,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT1] = {
        .name = "ILL_IT1",
        .reg = REG_kv3_ILL,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT2] = {
        .name = "ILL_IT2",
        .reg = REG_kv3_ILL,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT3] = {
        .name = "ILL_IT3",
        .reg = REG_kv3_ILL,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT4] = {
        .name = "ILL_IT4",
        .reg = REG_kv3_ILL,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT4,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT5] = {
        .name = "ILL_IT5",
        .reg = REG_kv3_ILL,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT5,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT6] = {
        .name = "ILL_IT6",
        .reg = REG_kv3_ILL,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT6,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT7] = {
        .name = "ILL_IT7",
        .reg = REG_kv3_ILL,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT7,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT8] = {
        .name = "ILL_IT8",
        .reg = REG_kv3_ILL,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT8,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT9] = {
        .name = "ILL_IT9",
        .reg = REG_kv3_ILL,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT9,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT10] = {
        .name = "ILL_IT10",
        .reg = REG_kv3_ILL,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT10,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT11] = {
        .name = "ILL_IT11",
        .reg = REG_kv3_ILL,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT11,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT12] = {
        .name = "ILL_IT12",
        .reg = REG_kv3_ILL,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT12,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT13] = {
        .name = "ILL_IT13",
        .reg = REG_kv3_ILL,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT13,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT14] = {
        .name = "ILL_IT14",
        .reg = REG_kv3_ILL,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT14,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT15] = {
        .name = "ILL_IT15",
        .reg = REG_kv3_ILL,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT15,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT16] = {
        .name = "ILL_IT16",
        .reg = REG_kv3_ILL,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT16,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT17] = {
        .name = "ILL_IT17",
        .reg = REG_kv3_ILL,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT17,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT18] = {
        .name = "ILL_IT18",
        .reg = REG_kv3_ILL,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT18,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT19] = {
        .name = "ILL_IT19",
        .reg = REG_kv3_ILL,
        .offset = 38,
        .width = 2,
        .mask = 0x000000c000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT19,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT20] = {
        .name = "ILL_IT20",
        .reg = REG_kv3_ILL,
        .offset = 40,
        .width = 2,
        .mask = 0x0000030000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT20,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT21] = {
        .name = "ILL_IT21",
        .reg = REG_kv3_ILL,
        .offset = 42,
        .width = 2,
        .mask = 0x00000c0000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT21,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT22] = {
        .name = "ILL_IT22",
        .reg = REG_kv3_ILL,
        .offset = 44,
        .width = 2,
        .mask = 0x0000300000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT22,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT23] = {
        .name = "ILL_IT23",
        .reg = REG_kv3_ILL,
        .offset = 46,
        .width = 2,
        .mask = 0x0000c00000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT23,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT24] = {
        .name = "ILL_IT24",
        .reg = REG_kv3_ILL,
        .offset = 48,
        .width = 2,
        .mask = 0x0003000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT24,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT25] = {
        .name = "ILL_IT25",
        .reg = REG_kv3_ILL,
        .offset = 50,
        .width = 2,
        .mask = 0x000c000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT25,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT26] = {
        .name = "ILL_IT26",
        .reg = REG_kv3_ILL,
        .offset = 52,
        .width = 2,
        .mask = 0x0030000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT26,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT27] = {
        .name = "ILL_IT27",
        .reg = REG_kv3_ILL,
        .offset = 54,
        .width = 2,
        .mask = 0x00c0000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT27,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT28] = {
        .name = "ILL_IT28",
        .reg = REG_kv3_ILL,
        .offset = 56,
        .width = 2,
        .mask = 0x0300000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT28,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT29] = {
        .name = "ILL_IT29",
        .reg = REG_kv3_ILL,
        .offset = 58,
        .width = 2,
        .mask = 0x0c00000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT29,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT30] = {
        .name = "ILL_IT30",
        .reg = REG_kv3_ILL,
        .offset = 60,
        .width = 2,
        .mask = 0x3000000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT30,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILL_IT31] = {
        .name = "ILL_IT31",
        .reg = REG_kv3_ILL,
        .offset = 62,
        .width = 2,
        .mask = 0xc000000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT0] = {
        .name = "ILR_IT0",
        .reg = REG_kv3_ILR,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT1] = {
        .name = "ILR_IT1",
        .reg = REG_kv3_ILR,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT2] = {
        .name = "ILR_IT2",
        .reg = REG_kv3_ILR,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT3] = {
        .name = "ILR_IT3",
        .reg = REG_kv3_ILR,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT4] = {
        .name = "ILR_IT4",
        .reg = REG_kv3_ILR,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT4,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT5] = {
        .name = "ILR_IT5",
        .reg = REG_kv3_ILR,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT5,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT6] = {
        .name = "ILR_IT6",
        .reg = REG_kv3_ILR,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT6,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT7] = {
        .name = "ILR_IT7",
        .reg = REG_kv3_ILR,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT7,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT8] = {
        .name = "ILR_IT8",
        .reg = REG_kv3_ILR,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT8,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT9] = {
        .name = "ILR_IT9",
        .reg = REG_kv3_ILR,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT9,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT10] = {
        .name = "ILR_IT10",
        .reg = REG_kv3_ILR,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT10,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT11] = {
        .name = "ILR_IT11",
        .reg = REG_kv3_ILR,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT11,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT12] = {
        .name = "ILR_IT12",
        .reg = REG_kv3_ILR,
        .offset = 12,
        .width = 1,
        .mask = 0x0000000000001000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT12,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT13] = {
        .name = "ILR_IT13",
        .reg = REG_kv3_ILR,
        .offset = 13,
        .width = 1,
        .mask = 0x0000000000002000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT13,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT14] = {
        .name = "ILR_IT14",
        .reg = REG_kv3_ILR,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT14,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT15] = {
        .name = "ILR_IT15",
        .reg = REG_kv3_ILR,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT15,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT16] = {
        .name = "ILR_IT16",
        .reg = REG_kv3_ILR,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT16,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT17] = {
        .name = "ILR_IT17",
        .reg = REG_kv3_ILR,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT17,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT18] = {
        .name = "ILR_IT18",
        .reg = REG_kv3_ILR,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT18,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT19] = {
        .name = "ILR_IT19",
        .reg = REG_kv3_ILR,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT19,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT20] = {
        .name = "ILR_IT20",
        .reg = REG_kv3_ILR,
        .offset = 20,
        .width = 1,
        .mask = 0x0000000000100000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT20,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT21] = {
        .name = "ILR_IT21",
        .reg = REG_kv3_ILR,
        .offset = 21,
        .width = 1,
        .mask = 0x0000000000200000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT21,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT22] = {
        .name = "ILR_IT22",
        .reg = REG_kv3_ILR,
        .offset = 22,
        .width = 1,
        .mask = 0x0000000000400000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT22,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT23] = {
        .name = "ILR_IT23",
        .reg = REG_kv3_ILR,
        .offset = 23,
        .width = 1,
        .mask = 0x0000000000800000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT23,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT24] = {
        .name = "ILR_IT24",
        .reg = REG_kv3_ILR,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT24,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT25] = {
        .name = "ILR_IT25",
        .reg = REG_kv3_ILR,
        .offset = 25,
        .width = 1,
        .mask = 0x0000000002000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT25,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT26] = {
        .name = "ILR_IT26",
        .reg = REG_kv3_ILR,
        .offset = 26,
        .width = 1,
        .mask = 0x0000000004000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT26,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT27] = {
        .name = "ILR_IT27",
        .reg = REG_kv3_ILR,
        .offset = 27,
        .width = 1,
        .mask = 0x0000000008000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT27,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT28] = {
        .name = "ILR_IT28",
        .reg = REG_kv3_ILR,
        .offset = 28,
        .width = 1,
        .mask = 0x0000000010000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT28,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT29] = {
        .name = "ILR_IT29",
        .reg = REG_kv3_ILR,
        .offset = 29,
        .width = 1,
        .mask = 0x0000000020000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT29,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT30] = {
        .name = "ILR_IT30",
        .reg = REG_kv3_ILR,
        .offset = 30,
        .width = 1,
        .mask = 0x0000000040000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT30,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ILR_IT31] = {
        .name = "ILR_IT31",
        .reg = REG_kv3_ILR,
        .offset = 31,
        .width = 1,
        .mask = 0x0000000080000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT0] = {
        .name = "ITOW_IT0",
        .reg = REG_kv3_ITOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT1] = {
        .name = "ITOW_IT1",
        .reg = REG_kv3_ITOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT2] = {
        .name = "ITOW_IT2",
        .reg = REG_kv3_ITOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT3] = {
        .name = "ITOW_IT3",
        .reg = REG_kv3_ITOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT4] = {
        .name = "ITOW_IT4",
        .reg = REG_kv3_ITOW,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT4,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT5] = {
        .name = "ITOW_IT5",
        .reg = REG_kv3_ITOW,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT5,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT6] = {
        .name = "ITOW_IT6",
        .reg = REG_kv3_ITOW,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT6,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT7] = {
        .name = "ITOW_IT7",
        .reg = REG_kv3_ITOW,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT7,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT8] = {
        .name = "ITOW_IT8",
        .reg = REG_kv3_ITOW,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT8,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT9] = {
        .name = "ITOW_IT9",
        .reg = REG_kv3_ITOW,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT9,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT10] = {
        .name = "ITOW_IT10",
        .reg = REG_kv3_ITOW,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT10,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT11] = {
        .name = "ITOW_IT11",
        .reg = REG_kv3_ITOW,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT11,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT12] = {
        .name = "ITOW_IT12",
        .reg = REG_kv3_ITOW,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT12,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT13] = {
        .name = "ITOW_IT13",
        .reg = REG_kv3_ITOW,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT13,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT14] = {
        .name = "ITOW_IT14",
        .reg = REG_kv3_ITOW,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT14,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT15] = {
        .name = "ITOW_IT15",
        .reg = REG_kv3_ITOW,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT15,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT16] = {
        .name = "ITOW_IT16",
        .reg = REG_kv3_ITOW,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT16,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT17] = {
        .name = "ITOW_IT17",
        .reg = REG_kv3_ITOW,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT17,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT18] = {
        .name = "ITOW_IT18",
        .reg = REG_kv3_ITOW,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT18,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT19] = {
        .name = "ITOW_IT19",
        .reg = REG_kv3_ITOW,
        .offset = 38,
        .width = 2,
        .mask = 0x000000c000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT19,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT20] = {
        .name = "ITOW_IT20",
        .reg = REG_kv3_ITOW,
        .offset = 40,
        .width = 2,
        .mask = 0x0000030000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT20,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT21] = {
        .name = "ITOW_IT21",
        .reg = REG_kv3_ITOW,
        .offset = 42,
        .width = 2,
        .mask = 0x00000c0000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT21,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT22] = {
        .name = "ITOW_IT22",
        .reg = REG_kv3_ITOW,
        .offset = 44,
        .width = 2,
        .mask = 0x0000300000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT22,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT23] = {
        .name = "ITOW_IT23",
        .reg = REG_kv3_ITOW,
        .offset = 46,
        .width = 2,
        .mask = 0x0000c00000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT23,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT24] = {
        .name = "ITOW_IT24",
        .reg = REG_kv3_ITOW,
        .offset = 48,
        .width = 2,
        .mask = 0x0003000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT24,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT25] = {
        .name = "ITOW_IT25",
        .reg = REG_kv3_ITOW,
        .offset = 50,
        .width = 2,
        .mask = 0x000c000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT25,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT26] = {
        .name = "ITOW_IT26",
        .reg = REG_kv3_ITOW,
        .offset = 52,
        .width = 2,
        .mask = 0x0030000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT26,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT27] = {
        .name = "ITOW_IT27",
        .reg = REG_kv3_ITOW,
        .offset = 54,
        .width = 2,
        .mask = 0x00c0000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT27,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT28] = {
        .name = "ITOW_IT28",
        .reg = REG_kv3_ITOW,
        .offset = 56,
        .width = 2,
        .mask = 0x0300000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT28,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT29] = {
        .name = "ITOW_IT29",
        .reg = REG_kv3_ITOW,
        .offset = 58,
        .width = 2,
        .mask = 0x0c00000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT29,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT30] = {
        .name = "ITOW_IT30",
        .reg = REG_kv3_ITOW,
        .offset = 60,
        .width = 2,
        .mask = 0x3000000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT30,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ITOW_IT31] = {
        .name = "ITOW_IT31",
        .reg = REG_kv3_ITOW,
        .offset = 62,
        .width = 2,
        .mask = 0xc000000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT31,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DO_B0] = {
        .name = "DO_B0",
        .reg = REG_kv3_DO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_DO_B1] = {
        .name = "DO_B1",
        .reg = REG_kv3_DO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_DO_W0] = {
        .name = "DO_W0",
        .reg = REG_kv3_DO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_DO_W1] = {
        .name = "DO_W1",
        .reg = REG_kv3_DO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_DBA0_DBA0] = {
        .name = "DBA0_DBA0",
        .reg = REG_kv3_DBA0,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DBA1_DBA1] = {
        .name = "DBA1_DBA1",
        .reg = REG_kv3_DBA1,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DWA0_DWA0] = {
        .name = "DWA0_DWA0",
        .reg = REG_kv3_DWA0,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DWA1_DWA1] = {
        .name = "DWA1_DWA1",
        .reg = REG_kv3_DWA1,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_B0] = {
        .name = "DOW_B0",
        .reg = REG_kv3_DOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_B1] = {
        .name = "DOW_B1",
        .reg = REG_kv3_DOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_W0] = {
        .name = "DOW_W0",
        .reg = REG_kv3_DOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_W1] = {
        .name = "DOW_W1",
        .reg = REG_kv3_DOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MO_MMI] = {
        .name = "MO_MMI",
        .reg = REG_kv3_MO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_MO_RFE] = {
        .name = "MO_RFE",
        .reg = REG_kv3_MO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_MO_STOP] = {
        .name = "MO_STOP",
        .reg = REG_kv3_MO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_MO_SYNC] = {
        .name = "MO_SYNC",
        .reg = REG_kv3_MO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_MO_PCR] = {
        .name = "MO_PCR",
        .reg = REG_kv3_MO,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_MO_MSG] = {
        .name = "MO_MSG",
        .reg = REG_kv3_MO,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_MO_MEN] = {
        .name = "MO_MEN",
        .reg = REG_kv3_MO,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_MO_MES] = {
        .name = "MO_MES",
        .reg = REG_kv3_MO,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
    },
    [REGFIELD_kv3_MO_CSIT] = {
        .name = "MO_CSIT",
        .reg = REG_kv3_MO,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_MO_T0] = {
        .name = "MO_T0",
        .reg = REG_kv3_MO,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
    },
    [REGFIELD_kv3_MO_T1] = {
        .name = "MO_T1",
        .reg = REG_kv3_MO,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_MO_WD] = {
        .name = "MO_WD",
        .reg = REG_kv3_MO,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
    },
    [REGFIELD_kv3_MO_PM0] = {
        .name = "MO_PM0",
        .reg = REG_kv3_MO,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
    },
    [REGFIELD_kv3_MO_PM1] = {
        .name = "MO_PM1",
        .reg = REG_kv3_MO,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
    },
    [REGFIELD_kv3_MO_PM2] = {
        .name = "MO_PM2",
        .reg = REG_kv3_MO,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
    },
    [REGFIELD_kv3_MO_PM3] = {
        .name = "MO_PM3",
        .reg = REG_kv3_MO,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
    },
    [REGFIELD_kv3_MO_PMIT] = {
        .name = "MO_PMIT",
        .reg = REG_kv3_MO,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
    },
    [REGFIELD_kv3_MOW_MMI] = {
        .name = "MOW_MMI",
        .reg = REG_kv3_MOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MMI,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_RFE] = {
        .name = "MOW_RFE",
        .reg = REG_kv3_MOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_RFE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_STOP] = {
        .name = "MOW_STOP",
        .reg = REG_kv3_MOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_STOP,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_SYNC] = {
        .name = "MOW_SYNC",
        .reg = REG_kv3_MOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_SYNC,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PCR] = {
        .name = "MOW_PCR",
        .reg = REG_kv3_MOW,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_MSG] = {
        .name = "MOW_MSG",
        .reg = REG_kv3_MOW,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_MEN] = {
        .name = "MOW_MEN",
        .reg = REG_kv3_MOW,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MEN,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_MES] = {
        .name = "MOW_MES",
        .reg = REG_kv3_MOW,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_CSIT] = {
        .name = "MOW_CSIT",
        .reg = REG_kv3_MOW,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_T0] = {
        .name = "MOW_T0",
        .reg = REG_kv3_MOW,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_T1] = {
        .name = "MOW_T1",
        .reg = REG_kv3_MOW,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_WD] = {
        .name = "MOW_WD",
        .reg = REG_kv3_MOW,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PM0] = {
        .name = "MOW_PM0",
        .reg = REG_kv3_MOW,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PM1] = {
        .name = "MOW_PM1",
        .reg = REG_kv3_MOW,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PM2] = {
        .name = "MOW_PM2",
        .reg = REG_kv3_MOW,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PM3] = {
        .name = "MOW_PM3",
        .reg = REG_kv3_MOW,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MOW_PMIT] = {
        .name = "MOW_PMIT",
        .reg = REG_kv3_MOW,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_PL] = {
        .name = "PS_PL",
        .reg = REG_kv3_PS,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_ET] = {
        .name = "PS_ET",
        .reg = REG_kv3_PS,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_HTD] = {
        .name = "PS_HTD",
        .reg = REG_kv3_PS,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_IE] = {
        .name = "PS_IE",
        .reg = REG_kv3_PS,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_HLE] = {
        .name = "PS_HLE",
        .reg = REG_kv3_PS,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_SRE] = {
        .name = "PS_SRE",
        .reg = REG_kv3_PS,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_DAUS] = {
        .name = "PS_DAUS",
        .reg = REG_kv3_PS,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_ICE] = {
        .name = "PS_ICE",
        .reg = REG_kv3_PS,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_USE] = {
        .name = "PS_USE",
        .reg = REG_kv3_PS,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_DCE] = {
        .name = "PS_DCE",
        .reg = REG_kv3_PS,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_MME] = {
        .name = "PS_MME",
        .reg = REG_kv3_PS,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_IL] = {
        .name = "PS_IL",
        .reg = REG_kv3_PS,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_VS] = {
        .name = "PS_VS",
        .reg = REG_kv3_PS,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_V64] = {
        .name = "PS_V64",
        .reg = REG_kv3_PS,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_L2E] = {
        .name = "PS_L2E",
        .reg = REG_kv3_PS,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_SME] = {
        .name = "PS_SME",
        .reg = REG_kv3_PS,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_SMR] = {
        .name = "PS_SMR",
        .reg = REG_kv3_PS,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_PMJ] = {
        .name = "PS_PMJ",
        .reg = REG_kv3_PS,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PS_MMUP] = {
        .name = "PS_MMUP",
        .reg = REG_kv3_PS,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL] = {
        .name = "SPS_PL",
        .reg = REG_kv3_SPS,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_ET] = {
        .name = "SPS_ET",
        .reg = REG_kv3_SPS,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_HTD] = {
        .name = "SPS_HTD",
        .reg = REG_kv3_SPS,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_IE] = {
        .name = "SPS_IE",
        .reg = REG_kv3_SPS,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_HLE] = {
        .name = "SPS_HLE",
        .reg = REG_kv3_SPS,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_SRE] = {
        .name = "SPS_SRE",
        .reg = REG_kv3_SPS,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_DAUS] = {
        .name = "SPS_DAUS",
        .reg = REG_kv3_SPS,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_ICE] = {
        .name = "SPS_ICE",
        .reg = REG_kv3_SPS,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_USE] = {
        .name = "SPS_USE",
        .reg = REG_kv3_SPS,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_DCE] = {
        .name = "SPS_DCE",
        .reg = REG_kv3_SPS,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_MME] = {
        .name = "SPS_MME",
        .reg = REG_kv3_SPS,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_IL] = {
        .name = "SPS_IL",
        .reg = REG_kv3_SPS,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_VS] = {
        .name = "SPS_VS",
        .reg = REG_kv3_SPS,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_V64] = {
        .name = "SPS_V64",
        .reg = REG_kv3_SPS,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_L2E] = {
        .name = "SPS_L2E",
        .reg = REG_kv3_SPS,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_SME] = {
        .name = "SPS_SME",
        .reg = REG_kv3_SPS,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_SMR] = {
        .name = "SPS_SMR",
        .reg = REG_kv3_SPS,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PMJ] = {
        .name = "SPS_PMJ",
        .reg = REG_kv3_SPS,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_MMUP] = {
        .name = "SPS_MMUP",
        .reg = REG_kv3_SPS,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_PL] = {
        .name = "SPS_PL0_PL",
        .reg = REG_kv3_SPS_PL0,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_ET] = {
        .name = "SPS_PL0_ET",
        .reg = REG_kv3_SPS_PL0,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_HTD] = {
        .name = "SPS_PL0_HTD",
        .reg = REG_kv3_SPS_PL0,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_IE] = {
        .name = "SPS_PL0_IE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_HLE] = {
        .name = "SPS_PL0_HLE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_SRE] = {
        .name = "SPS_PL0_SRE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_DAUS] = {
        .name = "SPS_PL0_DAUS",
        .reg = REG_kv3_SPS_PL0,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_ICE] = {
        .name = "SPS_PL0_ICE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_USE] = {
        .name = "SPS_PL0_USE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_DCE] = {
        .name = "SPS_PL0_DCE",
        .reg = REG_kv3_SPS_PL0,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_MME] = {
        .name = "SPS_PL0_MME",
        .reg = REG_kv3_SPS_PL0,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_IL] = {
        .name = "SPS_PL0_IL",
        .reg = REG_kv3_SPS_PL0,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_VS] = {
        .name = "SPS_PL0_VS",
        .reg = REG_kv3_SPS_PL0,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_V64] = {
        .name = "SPS_PL0_V64",
        .reg = REG_kv3_SPS_PL0,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_L2E] = {
        .name = "SPS_PL0_L2E",
        .reg = REG_kv3_SPS_PL0,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_SME] = {
        .name = "SPS_PL0_SME",
        .reg = REG_kv3_SPS_PL0,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_SMR] = {
        .name = "SPS_PL0_SMR",
        .reg = REG_kv3_SPS_PL0,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_PMJ] = {
        .name = "SPS_PL0_PMJ",
        .reg = REG_kv3_SPS_PL0,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL0_MMUP] = {
        .name = "SPS_PL0_MMUP",
        .reg = REG_kv3_SPS_PL0,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_PL] = {
        .name = "SPS_PL1_PL",
        .reg = REG_kv3_SPS_PL1,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_ET] = {
        .name = "SPS_PL1_ET",
        .reg = REG_kv3_SPS_PL1,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_HTD] = {
        .name = "SPS_PL1_HTD",
        .reg = REG_kv3_SPS_PL1,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_IE] = {
        .name = "SPS_PL1_IE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_HLE] = {
        .name = "SPS_PL1_HLE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_SRE] = {
        .name = "SPS_PL1_SRE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_DAUS] = {
        .name = "SPS_PL1_DAUS",
        .reg = REG_kv3_SPS_PL1,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_ICE] = {
        .name = "SPS_PL1_ICE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_USE] = {
        .name = "SPS_PL1_USE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_DCE] = {
        .name = "SPS_PL1_DCE",
        .reg = REG_kv3_SPS_PL1,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_MME] = {
        .name = "SPS_PL1_MME",
        .reg = REG_kv3_SPS_PL1,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_IL] = {
        .name = "SPS_PL1_IL",
        .reg = REG_kv3_SPS_PL1,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_VS] = {
        .name = "SPS_PL1_VS",
        .reg = REG_kv3_SPS_PL1,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_V64] = {
        .name = "SPS_PL1_V64",
        .reg = REG_kv3_SPS_PL1,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_L2E] = {
        .name = "SPS_PL1_L2E",
        .reg = REG_kv3_SPS_PL1,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_SME] = {
        .name = "SPS_PL1_SME",
        .reg = REG_kv3_SPS_PL1,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_SMR] = {
        .name = "SPS_PL1_SMR",
        .reg = REG_kv3_SPS_PL1,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_PMJ] = {
        .name = "SPS_PL1_PMJ",
        .reg = REG_kv3_SPS_PL1,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL1_MMUP] = {
        .name = "SPS_PL1_MMUP",
        .reg = REG_kv3_SPS_PL1,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_PL] = {
        .name = "SPS_PL2_PL",
        .reg = REG_kv3_SPS_PL2,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_ET] = {
        .name = "SPS_PL2_ET",
        .reg = REG_kv3_SPS_PL2,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_HTD] = {
        .name = "SPS_PL2_HTD",
        .reg = REG_kv3_SPS_PL2,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_IE] = {
        .name = "SPS_PL2_IE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_HLE] = {
        .name = "SPS_PL2_HLE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_SRE] = {
        .name = "SPS_PL2_SRE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_DAUS] = {
        .name = "SPS_PL2_DAUS",
        .reg = REG_kv3_SPS_PL2,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_ICE] = {
        .name = "SPS_PL2_ICE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_USE] = {
        .name = "SPS_PL2_USE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_DCE] = {
        .name = "SPS_PL2_DCE",
        .reg = REG_kv3_SPS_PL2,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_MME] = {
        .name = "SPS_PL2_MME",
        .reg = REG_kv3_SPS_PL2,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_IL] = {
        .name = "SPS_PL2_IL",
        .reg = REG_kv3_SPS_PL2,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_VS] = {
        .name = "SPS_PL2_VS",
        .reg = REG_kv3_SPS_PL2,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_V64] = {
        .name = "SPS_PL2_V64",
        .reg = REG_kv3_SPS_PL2,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_L2E] = {
        .name = "SPS_PL2_L2E",
        .reg = REG_kv3_SPS_PL2,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_SME] = {
        .name = "SPS_PL2_SME",
        .reg = REG_kv3_SPS_PL2,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_SMR] = {
        .name = "SPS_PL2_SMR",
        .reg = REG_kv3_SPS_PL2,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_PMJ] = {
        .name = "SPS_PL2_PMJ",
        .reg = REG_kv3_SPS_PL2,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL2_MMUP] = {
        .name = "SPS_PL2_MMUP",
        .reg = REG_kv3_SPS_PL2,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_PL] = {
        .name = "SPS_PL3_PL",
        .reg = REG_kv3_SPS_PL3,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_ET] = {
        .name = "SPS_PL3_ET",
        .reg = REG_kv3_SPS_PL3,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_HTD] = {
        .name = "SPS_PL3_HTD",
        .reg = REG_kv3_SPS_PL3,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_IE] = {
        .name = "SPS_PL3_IE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_HLE] = {
        .name = "SPS_PL3_HLE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_SRE] = {
        .name = "SPS_PL3_SRE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_DAUS] = {
        .name = "SPS_PL3_DAUS",
        .reg = REG_kv3_SPS_PL3,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_ICE] = {
        .name = "SPS_PL3_ICE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_USE] = {
        .name = "SPS_PL3_USE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_DCE] = {
        .name = "SPS_PL3_DCE",
        .reg = REG_kv3_SPS_PL3,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_MME] = {
        .name = "SPS_PL3_MME",
        .reg = REG_kv3_SPS_PL3,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_IL] = {
        .name = "SPS_PL3_IL",
        .reg = REG_kv3_SPS_PL3,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_VS] = {
        .name = "SPS_PL3_VS",
        .reg = REG_kv3_SPS_PL3,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_V64] = {
        .name = "SPS_PL3_V64",
        .reg = REG_kv3_SPS_PL3,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_L2E] = {
        .name = "SPS_PL3_L2E",
        .reg = REG_kv3_SPS_PL3,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_SME] = {
        .name = "SPS_PL3_SME",
        .reg = REG_kv3_SPS_PL3,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_SMR] = {
        .name = "SPS_PL3_SMR",
        .reg = REG_kv3_SPS_PL3,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_PMJ] = {
        .name = "SPS_PL3_PMJ",
        .reg = REG_kv3_SPS_PL3,
        .offset = 20,
        .width = 4,
        .mask = 0x0000000000f00000,
        .n_owners = 4,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SPS_PL3_MMUP] = {
        .name = "SPS_PL3_MMUP",
        .reg = REG_kv3_SPS_PL3,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSO_PL0] = {
        .name = "PSO_PL0",
        .reg = REG_kv3_PSO,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
    },
    [REGFIELD_kv3_PSO_PL1] = {
        .name = "PSO_PL1",
        .reg = REG_kv3_PSO,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
    },
    [REGFIELD_kv3_PSO_ET] = {
        .name = "PSO_ET",
        .reg = REG_kv3_PSO,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_PSO_HTD] = {
        .name = "PSO_HTD",
        .reg = REG_kv3_PSO,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_PSO_IE] = {
        .name = "PSO_IE",
        .reg = REG_kv3_PSO,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_PSO_HLE] = {
        .name = "PSO_HLE",
        .reg = REG_kv3_PSO,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_PSO_SRE] = {
        .name = "PSO_SRE",
        .reg = REG_kv3_PSO,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_PSO_DAUS] = {
        .name = "PSO_DAUS",
        .reg = REG_kv3_PSO,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
    },
    [REGFIELD_kv3_PSO_ICE] = {
        .name = "PSO_ICE",
        .reg = REG_kv3_PSO,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_PSO_USE] = {
        .name = "PSO_USE",
        .reg = REG_kv3_PSO,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
    },
    [REGFIELD_kv3_PSO_DCE] = {
        .name = "PSO_DCE",
        .reg = REG_kv3_PSO,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_PSO_MME] = {
        .name = "PSO_MME",
        .reg = REG_kv3_PSO,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
    },
    [REGFIELD_kv3_PSO_IL0] = {
        .name = "PSO_IL0",
        .reg = REG_kv3_PSO,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
    },
    [REGFIELD_kv3_PSO_IL1] = {
        .name = "PSO_IL1",
        .reg = REG_kv3_PSO,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
    },
    [REGFIELD_kv3_PSO_VS0] = {
        .name = "PSO_VS0",
        .reg = REG_kv3_PSO,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
    },
    [REGFIELD_kv3_PSO_VS1] = {
        .name = "PSO_VS1",
        .reg = REG_kv3_PSO,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
    },
    [REGFIELD_kv3_PSO_V64] = {
        .name = "PSO_V64",
        .reg = REG_kv3_PSO,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
    },
    [REGFIELD_kv3_PSO_L2E] = {
        .name = "PSO_L2E",
        .reg = REG_kv3_PSO,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
    },
    [REGFIELD_kv3_PSO_SME] = {
        .name = "PSO_SME",
        .reg = REG_kv3_PSO,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
    },
    [REGFIELD_kv3_PSO_SMR] = {
        .name = "PSO_SMR",
        .reg = REG_kv3_PSO,
        .offset = 38,
        .width = 2,
        .mask = 0x000000c000000000,
    },
    [REGFIELD_kv3_PSO_PMJ0] = {
        .name = "PSO_PMJ0",
        .reg = REG_kv3_PSO,
        .offset = 40,
        .width = 2,
        .mask = 0x0000030000000000,
    },
    [REGFIELD_kv3_PSO_PMJ1] = {
        .name = "PSO_PMJ1",
        .reg = REG_kv3_PSO,
        .offset = 42,
        .width = 2,
        .mask = 0x00000c0000000000,
    },
    [REGFIELD_kv3_PSO_PMJ2] = {
        .name = "PSO_PMJ2",
        .reg = REG_kv3_PSO,
        .offset = 44,
        .width = 2,
        .mask = 0x0000300000000000,
    },
    [REGFIELD_kv3_PSO_PMJ3] = {
        .name = "PSO_PMJ3",
        .reg = REG_kv3_PSO,
        .offset = 46,
        .width = 2,
        .mask = 0x0000c00000000000,
    },
    [REGFIELD_kv3_PSO_MMUP] = {
        .name = "PSO_MMUP",
        .reg = REG_kv3_PSO,
        .offset = 48,
        .width = 2,
        .mask = 0x0003000000000000,
    },
    [REGFIELD_kv3_PSOW_PL0] = {
        .name = "PSOW_PL0",
        .reg = REG_kv3_PSOW,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_PL1] = {
        .name = "PSOW_PL1",
        .reg = REG_kv3_PSOW,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_ET] = {
        .name = "PSOW_ET",
        .reg = REG_kv3_PSOW,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ET,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_HTD] = {
        .name = "PSOW_HTD",
        .reg = REG_kv3_PSOW,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HTD,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_IE] = {
        .name = "PSOW_IE",
        .reg = REG_kv3_PSOW,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_HLE] = {
        .name = "PSOW_HLE",
        .reg = REG_kv3_PSOW,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_HLE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_SRE] = {
        .name = "PSOW_SRE",
        .reg = REG_kv3_PSOW,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SRE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_DAUS] = {
        .name = "PSOW_DAUS",
        .reg = REG_kv3_PSOW,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DAUS,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_ICE] = {
        .name = "PSOW_ICE",
        .reg = REG_kv3_PSOW,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_ICE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_USE] = {
        .name = "PSOW_USE",
        .reg = REG_kv3_PSOW,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_USE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_DCE] = {
        .name = "PSOW_DCE",
        .reg = REG_kv3_PSOW,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_DCE,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_MME] = {
        .name = "PSOW_MME",
        .reg = REG_kv3_PSOW,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MME,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_IL0] = {
        .name = "PSOW_IL0",
        .reg = REG_kv3_PSOW,
        .offset = 24,
        .width = 2,
        .mask = 0x0000000003000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_IL1] = {
        .name = "PSOW_IL1",
        .reg = REG_kv3_PSOW,
        .offset = 26,
        .width = 2,
        .mask = 0x000000000c000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_IL1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_VS0] = {
        .name = "PSOW_VS0",
        .reg = REG_kv3_PSOW,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_VS1] = {
        .name = "PSOW_VS1",
        .reg = REG_kv3_PSOW,
        .offset = 30,
        .width = 2,
        .mask = 0x00000000c0000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_VS1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_V64] = {
        .name = "PSOW_V64",
        .reg = REG_kv3_PSOW,
        .offset = 32,
        .width = 2,
        .mask = 0x0000000300000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_V64,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_L2E] = {
        .name = "PSOW_L2E",
        .reg = REG_kv3_PSOW,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_L2E,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_SME] = {
        .name = "PSOW_SME",
        .reg = REG_kv3_PSOW,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SME,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_SMR] = {
        .name = "PSOW_SMR",
        .reg = REG_kv3_PSOW,
        .offset = 38,
        .width = 2,
        .mask = 0x000000c000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_SMR,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_PMJ0] = {
        .name = "PSOW_PMJ0",
        .reg = REG_kv3_PSOW,
        .offset = 40,
        .width = 2,
        .mask = 0x0000030000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_PMJ1] = {
        .name = "PSOW_PMJ1",
        .reg = REG_kv3_PSOW,
        .offset = 42,
        .width = 2,
        .mask = 0x00000c0000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_PMJ2] = {
        .name = "PSOW_PMJ2",
        .reg = REG_kv3_PSOW,
        .offset = 44,
        .width = 2,
        .mask = 0x0000300000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_PMJ3] = {
        .name = "PSOW_PMJ3",
        .reg = REG_kv3_PSOW,
        .offset = 46,
        .width = 2,
        .mask = 0x0000c00000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_PMJ3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PSOW_MMUP] = {
        .name = "PSOW_MMUP",
        .reg = REG_kv3_PSOW,
        .offset = 48,
        .width = 2,
        .mask = 0x0003000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_PSO_MMUP,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CS_IC] = {
        .name = "CS_IC",
        .reg = REG_kv3_CS,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
    },
    [REGFIELD_kv3_CS_IO] = {
        .name = "CS_IO",
        .reg = REG_kv3_CS,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
    },
    [REGFIELD_kv3_CS_DZ] = {
        .name = "CS_DZ",
        .reg = REG_kv3_CS,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
    },
    [REGFIELD_kv3_CS_OV] = {
        .name = "CS_OV",
        .reg = REG_kv3_CS,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
    },
    [REGFIELD_kv3_CS_UN] = {
        .name = "CS_UN",
        .reg = REG_kv3_CS,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
    },
    [REGFIELD_kv3_CS_IN] = {
        .name = "CS_IN",
        .reg = REG_kv3_CS,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
    },
    [REGFIELD_kv3_CS_XIO] = {
        .name = "CS_XIO",
        .reg = REG_kv3_CS,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
    },
    [REGFIELD_kv3_CS_XDZ] = {
        .name = "CS_XDZ",
        .reg = REG_kv3_CS,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
    },
    [REGFIELD_kv3_CS_XOV] = {
        .name = "CS_XOV",
        .reg = REG_kv3_CS,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
    },
    [REGFIELD_kv3_CS_XUN] = {
        .name = "CS_XUN",
        .reg = REG_kv3_CS,
        .offset = 12,
        .width = 1,
        .mask = 0x0000000000001000,
    },
    [REGFIELD_kv3_CS_XIN] = {
        .name = "CS_XIN",
        .reg = REG_kv3_CS,
        .offset = 13,
        .width = 1,
        .mask = 0x0000000000002000,
    },
    [REGFIELD_kv3_CS_RM] = {
        .name = "CS_RM",
        .reg = REG_kv3_CS,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_CS_XRM] = {
        .name = "CS_XRM",
        .reg = REG_kv3_CS,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_CS_XMF] = {
        .name = "CS_XMF",
        .reg = REG_kv3_CS,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
    },
    [REGFIELD_kv3_CS_CC] = {
        .name = "CS_CC",
        .reg = REG_kv3_CS,
        .offset = 32,
        .width = 16,
        .mask = 0x0000ffff00000000,
    },
    [REGFIELD_kv3_CS_XDROP] = {
        .name = "CS_XDROP",
        .reg = REG_kv3_CS,
        .offset = 48,
        .width = 6,
        .mask = 0x003f000000000000,
    },
    [REGFIELD_kv3_CS_XPOW2] = {
        .name = "CS_XPOW2",
        .reg = REG_kv3_CS,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_AESPC_AESPC] = {
        .name = "AESPC_AESPC",
        .reg = REG_kv3_AESPC,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_ICIE] = {
        .name = "CSIT_ICIE",
        .reg = REG_kv3_CSIT,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_IOIE] = {
        .name = "CSIT_IOIE",
        .reg = REG_kv3_CSIT,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_DZIE] = {
        .name = "CSIT_DZIE",
        .reg = REG_kv3_CSIT,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_OVIE] = {
        .name = "CSIT_OVIE",
        .reg = REG_kv3_CSIT,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_UNIE] = {
        .name = "CSIT_UNIE",
        .reg = REG_kv3_CSIT,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_INIE] = {
        .name = "CSIT_INIE",
        .reg = REG_kv3_CSIT,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_XIOIE] = {
        .name = "CSIT_XIOIE",
        .reg = REG_kv3_CSIT,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_XDZIE] = {
        .name = "CSIT_XDZIE",
        .reg = REG_kv3_CSIT,
        .offset = 10,
        .width = 1,
        .mask = 0x0000000000000400,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_XOVIE] = {
        .name = "CSIT_XOVIE",
        .reg = REG_kv3_CSIT,
        .offset = 11,
        .width = 1,
        .mask = 0x0000000000000800,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_XUNIE] = {
        .name = "CSIT_XUNIE",
        .reg = REG_kv3_CSIT,
        .offset = 12,
        .width = 1,
        .mask = 0x0000000000001000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_XINIE] = {
        .name = "CSIT_XINIE",
        .reg = REG_kv3_CSIT,
        .offset = 13,
        .width = 1,
        .mask = 0x0000000000002000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_AEIR] = {
        .name = "CSIT_AEIR",
        .reg = REG_kv3_CSIT,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_AEC] = {
        .name = "CSIT_AEC",
        .reg = REG_kv3_CSIT,
        .offset = 17,
        .width = 3,
        .mask = 0x00000000000e0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_CSIT_SPCV] = {
        .name = "CSIT_SPCV",
        .reg = REG_kv3_CSIT,
        .offset = 20,
        .width = 1,
        .mask = 0x0000000000100000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_CSIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ES_EC] = {
        .name = "ES_EC",
        .reg = REG_kv3_ES,
        .offset = 0,
        .width = 4,
        .mask = 0x000000000000000f,
    },
    [REGFIELD_kv3_ES_ED] = {
        .name = "ES_ED",
        .reg = REG_kv3_ES,
        .offset = 4,
        .width = 60,
        .mask = 0xfffffffffffffff0,
    },
    [REGFIELD_kv3_ES_OAPL] = {
        .name = "ES_OAPL",
        .reg = REG_kv3_ES,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ES_ORPL] = {
        .name = "ES_ORPL",
        .reg = REG_kv3_ES,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ES_PTAPL] = {
        .name = "ES_PTAPL",
        .reg = REG_kv3_ES,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ES_PTRPL] = {
        .name = "ES_PTRPL",
        .reg = REG_kv3_ES,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ES_ITN] = {
        .name = "ES_ITN",
        .reg = REG_kv3_ES,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_ITL] = {
        .name = "ES_ITL",
        .reg = REG_kv3_ES,
        .offset = 17,
        .width = 2,
        .mask = 0x0000000000060000,
    },
    [REGFIELD_kv3_ES_ITI] = {
        .name = "ES_ITI",
        .reg = REG_kv3_ES,
        .offset = 19,
        .width = 10,
        .mask = 0x000000001ff80000,
    },
    [REGFIELD_kv3_ES_SN] = {
        .name = "ES_SN",
        .reg = REG_kv3_ES,
        .offset = 12,
        .width = 12,
        .mask = 0x0000000000fff000,
    },
    [REGFIELD_kv3_ES_HTC] = {
        .name = "ES_HTC",
        .reg = REG_kv3_ES,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_SFRT] = {
        .name = "ES_SFRT",
        .reg = REG_kv3_ES,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
    },
    [REGFIELD_kv3_ES_SFRI] = {
        .name = "ES_SFRI",
        .reg = REG_kv3_ES,
        .offset = 18,
        .width = 3,
        .mask = 0x00000000001c0000,
    },
    [REGFIELD_kv3_ES_GPRP] = {
        .name = "ES_GPRP",
        .reg = REG_kv3_ES,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
    },
    [REGFIELD_kv3_ES_SFRP] = {
        .name = "ES_SFRP",
        .reg = REG_kv3_ES,
        .offset = 27,
        .width = 9,
        .mask = 0x0000000ff8000000,
    },
    [REGFIELD_kv3_ES_DHT] = {
        .name = "ES_DHT",
        .reg = REG_kv3_ES,
        .offset = 36,
        .width = 1,
        .mask = 0x0000001000000000,
    },
    [REGFIELD_kv3_ES_RWX] = {
        .name = "ES_RWX",
        .reg = REG_kv3_ES,
        .offset = 39,
        .width = 3,
        .mask = 0x0000038000000000,
    },
    [REGFIELD_kv3_ES_NTA] = {
        .name = "ES_NTA",
        .reg = REG_kv3_ES,
        .offset = 42,
        .width = 1,
        .mask = 0x0000040000000000,
    },
    [REGFIELD_kv3_ES_UCA] = {
        .name = "ES_UCA",
        .reg = REG_kv3_ES,
        .offset = 43,
        .width = 1,
        .mask = 0x0000080000000000,
    },
    [REGFIELD_kv3_ES_AS] = {
        .name = "ES_AS",
        .reg = REG_kv3_ES,
        .offset = 44,
        .width = 6,
        .mask = 0x0003f00000000000,
    },
    [REGFIELD_kv3_ES_BS] = {
        .name = "ES_BS",
        .reg = REG_kv3_ES,
        .offset = 50,
        .width = 4,
        .mask = 0x003c000000000000,
    },
    [REGFIELD_kv3_ES_DRI] = {
        .name = "ES_DRI",
        .reg = REG_kv3_ES,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_ES_PIC] = {
        .name = "ES_PIC",
        .reg = REG_kv3_ES,
        .offset = 60,
        .width = 4,
        .mask = 0xf000000000000000,
    },
    [REGFIELD_kv3_ES_DC] = {
        .name = "ES_DC",
        .reg = REG_kv3_ES,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ES_BN] = {
        .name = "ES_BN",
        .reg = REG_kv3_ES,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
    },
    [REGFIELD_kv3_ES_WN] = {
        .name = "ES_WN",
        .reg = REG_kv3_ES,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
    },
    [REGFIELD_kv3_ES_PL0_EC] = {
        .name = "ES_PL0_EC",
        .reg = REG_kv3_ES_PL0,
        .offset = 0,
        .width = 4,
        .mask = 0x000000000000000f,
    },
    [REGFIELD_kv3_ES_PL0_ED] = {
        .name = "ES_PL0_ED",
        .reg = REG_kv3_ES_PL0,
        .offset = 4,
        .width = 60,
        .mask = 0xfffffffffffffff0,
    },
    [REGFIELD_kv3_ES_PL0_OAPL] = {
        .name = "ES_PL0_OAPL",
        .reg = REG_kv3_ES_PL0,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ES_PL0_ORPL] = {
        .name = "ES_PL0_ORPL",
        .reg = REG_kv3_ES_PL0,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ES_PL0_PTAPL] = {
        .name = "ES_PL0_PTAPL",
        .reg = REG_kv3_ES_PL0,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ES_PL0_PTRPL] = {
        .name = "ES_PL0_PTRPL",
        .reg = REG_kv3_ES_PL0,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ES_PL0_ITN] = {
        .name = "ES_PL0_ITN",
        .reg = REG_kv3_ES_PL0,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL0_ITL] = {
        .name = "ES_PL0_ITL",
        .reg = REG_kv3_ES_PL0,
        .offset = 17,
        .width = 2,
        .mask = 0x0000000000060000,
    },
    [REGFIELD_kv3_ES_PL0_ITI] = {
        .name = "ES_PL0_ITI",
        .reg = REG_kv3_ES_PL0,
        .offset = 19,
        .width = 10,
        .mask = 0x000000001ff80000,
    },
    [REGFIELD_kv3_ES_PL0_SN] = {
        .name = "ES_PL0_SN",
        .reg = REG_kv3_ES_PL0,
        .offset = 12,
        .width = 12,
        .mask = 0x0000000000fff000,
    },
    [REGFIELD_kv3_ES_PL0_HTC] = {
        .name = "ES_PL0_HTC",
        .reg = REG_kv3_ES_PL0,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL0_SFRT] = {
        .name = "ES_PL0_SFRT",
        .reg = REG_kv3_ES_PL0,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
    },
    [REGFIELD_kv3_ES_PL0_SFRI] = {
        .name = "ES_PL0_SFRI",
        .reg = REG_kv3_ES_PL0,
        .offset = 18,
        .width = 3,
        .mask = 0x00000000001c0000,
    },
    [REGFIELD_kv3_ES_PL0_GPRP] = {
        .name = "ES_PL0_GPRP",
        .reg = REG_kv3_ES_PL0,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
    },
    [REGFIELD_kv3_ES_PL0_SFRP] = {
        .name = "ES_PL0_SFRP",
        .reg = REG_kv3_ES_PL0,
        .offset = 27,
        .width = 9,
        .mask = 0x0000000ff8000000,
    },
    [REGFIELD_kv3_ES_PL0_DHT] = {
        .name = "ES_PL0_DHT",
        .reg = REG_kv3_ES_PL0,
        .offset = 36,
        .width = 1,
        .mask = 0x0000001000000000,
    },
    [REGFIELD_kv3_ES_PL0_RWX] = {
        .name = "ES_PL0_RWX",
        .reg = REG_kv3_ES_PL0,
        .offset = 39,
        .width = 3,
        .mask = 0x0000038000000000,
    },
    [REGFIELD_kv3_ES_PL0_NTA] = {
        .name = "ES_PL0_NTA",
        .reg = REG_kv3_ES_PL0,
        .offset = 42,
        .width = 1,
        .mask = 0x0000040000000000,
    },
    [REGFIELD_kv3_ES_PL0_UCA] = {
        .name = "ES_PL0_UCA",
        .reg = REG_kv3_ES_PL0,
        .offset = 43,
        .width = 1,
        .mask = 0x0000080000000000,
    },
    [REGFIELD_kv3_ES_PL0_AS] = {
        .name = "ES_PL0_AS",
        .reg = REG_kv3_ES_PL0,
        .offset = 44,
        .width = 6,
        .mask = 0x0003f00000000000,
    },
    [REGFIELD_kv3_ES_PL0_BS] = {
        .name = "ES_PL0_BS",
        .reg = REG_kv3_ES_PL0,
        .offset = 50,
        .width = 4,
        .mask = 0x003c000000000000,
    },
    [REGFIELD_kv3_ES_PL0_DRI] = {
        .name = "ES_PL0_DRI",
        .reg = REG_kv3_ES_PL0,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_ES_PL0_PIC] = {
        .name = "ES_PL0_PIC",
        .reg = REG_kv3_ES_PL0,
        .offset = 60,
        .width = 4,
        .mask = 0xf000000000000000,
    },
    [REGFIELD_kv3_ES_PL0_DC] = {
        .name = "ES_PL0_DC",
        .reg = REG_kv3_ES_PL0,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ES_PL0_BN] = {
        .name = "ES_PL0_BN",
        .reg = REG_kv3_ES_PL0,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
    },
    [REGFIELD_kv3_ES_PL0_WN] = {
        .name = "ES_PL0_WN",
        .reg = REG_kv3_ES_PL0,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
    },
    [REGFIELD_kv3_ES_PL1_EC] = {
        .name = "ES_PL1_EC",
        .reg = REG_kv3_ES_PL1,
        .offset = 0,
        .width = 4,
        .mask = 0x000000000000000f,
    },
    [REGFIELD_kv3_ES_PL1_ED] = {
        .name = "ES_PL1_ED",
        .reg = REG_kv3_ES_PL1,
        .offset = 4,
        .width = 60,
        .mask = 0xfffffffffffffff0,
    },
    [REGFIELD_kv3_ES_PL1_OAPL] = {
        .name = "ES_PL1_OAPL",
        .reg = REG_kv3_ES_PL1,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ES_PL1_ORPL] = {
        .name = "ES_PL1_ORPL",
        .reg = REG_kv3_ES_PL1,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ES_PL1_PTAPL] = {
        .name = "ES_PL1_PTAPL",
        .reg = REG_kv3_ES_PL1,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ES_PL1_PTRPL] = {
        .name = "ES_PL1_PTRPL",
        .reg = REG_kv3_ES_PL1,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ES_PL1_ITN] = {
        .name = "ES_PL1_ITN",
        .reg = REG_kv3_ES_PL1,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL1_ITL] = {
        .name = "ES_PL1_ITL",
        .reg = REG_kv3_ES_PL1,
        .offset = 17,
        .width = 2,
        .mask = 0x0000000000060000,
    },
    [REGFIELD_kv3_ES_PL1_ITI] = {
        .name = "ES_PL1_ITI",
        .reg = REG_kv3_ES_PL1,
        .offset = 19,
        .width = 10,
        .mask = 0x000000001ff80000,
    },
    [REGFIELD_kv3_ES_PL1_SN] = {
        .name = "ES_PL1_SN",
        .reg = REG_kv3_ES_PL1,
        .offset = 12,
        .width = 12,
        .mask = 0x0000000000fff000,
    },
    [REGFIELD_kv3_ES_PL1_HTC] = {
        .name = "ES_PL1_HTC",
        .reg = REG_kv3_ES_PL1,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL1_SFRT] = {
        .name = "ES_PL1_SFRT",
        .reg = REG_kv3_ES_PL1,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
    },
    [REGFIELD_kv3_ES_PL1_SFRI] = {
        .name = "ES_PL1_SFRI",
        .reg = REG_kv3_ES_PL1,
        .offset = 18,
        .width = 3,
        .mask = 0x00000000001c0000,
    },
    [REGFIELD_kv3_ES_PL1_GPRP] = {
        .name = "ES_PL1_GPRP",
        .reg = REG_kv3_ES_PL1,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
    },
    [REGFIELD_kv3_ES_PL1_SFRP] = {
        .name = "ES_PL1_SFRP",
        .reg = REG_kv3_ES_PL1,
        .offset = 27,
        .width = 9,
        .mask = 0x0000000ff8000000,
    },
    [REGFIELD_kv3_ES_PL1_DHT] = {
        .name = "ES_PL1_DHT",
        .reg = REG_kv3_ES_PL1,
        .offset = 36,
        .width = 1,
        .mask = 0x0000001000000000,
    },
    [REGFIELD_kv3_ES_PL1_RWX] = {
        .name = "ES_PL1_RWX",
        .reg = REG_kv3_ES_PL1,
        .offset = 39,
        .width = 3,
        .mask = 0x0000038000000000,
    },
    [REGFIELD_kv3_ES_PL1_NTA] = {
        .name = "ES_PL1_NTA",
        .reg = REG_kv3_ES_PL1,
        .offset = 42,
        .width = 1,
        .mask = 0x0000040000000000,
    },
    [REGFIELD_kv3_ES_PL1_UCA] = {
        .name = "ES_PL1_UCA",
        .reg = REG_kv3_ES_PL1,
        .offset = 43,
        .width = 1,
        .mask = 0x0000080000000000,
    },
    [REGFIELD_kv3_ES_PL1_AS] = {
        .name = "ES_PL1_AS",
        .reg = REG_kv3_ES_PL1,
        .offset = 44,
        .width = 6,
        .mask = 0x0003f00000000000,
    },
    [REGFIELD_kv3_ES_PL1_BS] = {
        .name = "ES_PL1_BS",
        .reg = REG_kv3_ES_PL1,
        .offset = 50,
        .width = 4,
        .mask = 0x003c000000000000,
    },
    [REGFIELD_kv3_ES_PL1_DRI] = {
        .name = "ES_PL1_DRI",
        .reg = REG_kv3_ES_PL1,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_ES_PL1_PIC] = {
        .name = "ES_PL1_PIC",
        .reg = REG_kv3_ES_PL1,
        .offset = 60,
        .width = 4,
        .mask = 0xf000000000000000,
    },
    [REGFIELD_kv3_ES_PL1_DC] = {
        .name = "ES_PL1_DC",
        .reg = REG_kv3_ES_PL1,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ES_PL1_BN] = {
        .name = "ES_PL1_BN",
        .reg = REG_kv3_ES_PL1,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
    },
    [REGFIELD_kv3_ES_PL1_WN] = {
        .name = "ES_PL1_WN",
        .reg = REG_kv3_ES_PL1,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
    },
    [REGFIELD_kv3_ES_PL2_EC] = {
        .name = "ES_PL2_EC",
        .reg = REG_kv3_ES_PL2,
        .offset = 0,
        .width = 4,
        .mask = 0x000000000000000f,
    },
    [REGFIELD_kv3_ES_PL2_ED] = {
        .name = "ES_PL2_ED",
        .reg = REG_kv3_ES_PL2,
        .offset = 4,
        .width = 60,
        .mask = 0xfffffffffffffff0,
    },
    [REGFIELD_kv3_ES_PL2_OAPL] = {
        .name = "ES_PL2_OAPL",
        .reg = REG_kv3_ES_PL2,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ES_PL2_ORPL] = {
        .name = "ES_PL2_ORPL",
        .reg = REG_kv3_ES_PL2,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ES_PL2_PTAPL] = {
        .name = "ES_PL2_PTAPL",
        .reg = REG_kv3_ES_PL2,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ES_PL2_PTRPL] = {
        .name = "ES_PL2_PTRPL",
        .reg = REG_kv3_ES_PL2,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ES_PL2_ITN] = {
        .name = "ES_PL2_ITN",
        .reg = REG_kv3_ES_PL2,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL2_ITL] = {
        .name = "ES_PL2_ITL",
        .reg = REG_kv3_ES_PL2,
        .offset = 17,
        .width = 2,
        .mask = 0x0000000000060000,
    },
    [REGFIELD_kv3_ES_PL2_ITI] = {
        .name = "ES_PL2_ITI",
        .reg = REG_kv3_ES_PL2,
        .offset = 19,
        .width = 10,
        .mask = 0x000000001ff80000,
    },
    [REGFIELD_kv3_ES_PL2_SN] = {
        .name = "ES_PL2_SN",
        .reg = REG_kv3_ES_PL2,
        .offset = 12,
        .width = 12,
        .mask = 0x0000000000fff000,
    },
    [REGFIELD_kv3_ES_PL2_HTC] = {
        .name = "ES_PL2_HTC",
        .reg = REG_kv3_ES_PL2,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL2_SFRT] = {
        .name = "ES_PL2_SFRT",
        .reg = REG_kv3_ES_PL2,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
    },
    [REGFIELD_kv3_ES_PL2_SFRI] = {
        .name = "ES_PL2_SFRI",
        .reg = REG_kv3_ES_PL2,
        .offset = 18,
        .width = 3,
        .mask = 0x00000000001c0000,
    },
    [REGFIELD_kv3_ES_PL2_GPRP] = {
        .name = "ES_PL2_GPRP",
        .reg = REG_kv3_ES_PL2,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
    },
    [REGFIELD_kv3_ES_PL2_SFRP] = {
        .name = "ES_PL2_SFRP",
        .reg = REG_kv3_ES_PL2,
        .offset = 27,
        .width = 9,
        .mask = 0x0000000ff8000000,
    },
    [REGFIELD_kv3_ES_PL2_DHT] = {
        .name = "ES_PL2_DHT",
        .reg = REG_kv3_ES_PL2,
        .offset = 36,
        .width = 1,
        .mask = 0x0000001000000000,
    },
    [REGFIELD_kv3_ES_PL2_RWX] = {
        .name = "ES_PL2_RWX",
        .reg = REG_kv3_ES_PL2,
        .offset = 39,
        .width = 3,
        .mask = 0x0000038000000000,
    },
    [REGFIELD_kv3_ES_PL2_NTA] = {
        .name = "ES_PL2_NTA",
        .reg = REG_kv3_ES_PL2,
        .offset = 42,
        .width = 1,
        .mask = 0x0000040000000000,
    },
    [REGFIELD_kv3_ES_PL2_UCA] = {
        .name = "ES_PL2_UCA",
        .reg = REG_kv3_ES_PL2,
        .offset = 43,
        .width = 1,
        .mask = 0x0000080000000000,
    },
    [REGFIELD_kv3_ES_PL2_AS] = {
        .name = "ES_PL2_AS",
        .reg = REG_kv3_ES_PL2,
        .offset = 44,
        .width = 6,
        .mask = 0x0003f00000000000,
    },
    [REGFIELD_kv3_ES_PL2_BS] = {
        .name = "ES_PL2_BS",
        .reg = REG_kv3_ES_PL2,
        .offset = 50,
        .width = 4,
        .mask = 0x003c000000000000,
    },
    [REGFIELD_kv3_ES_PL2_DRI] = {
        .name = "ES_PL2_DRI",
        .reg = REG_kv3_ES_PL2,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_ES_PL2_PIC] = {
        .name = "ES_PL2_PIC",
        .reg = REG_kv3_ES_PL2,
        .offset = 60,
        .width = 4,
        .mask = 0xf000000000000000,
    },
    [REGFIELD_kv3_ES_PL2_DC] = {
        .name = "ES_PL2_DC",
        .reg = REG_kv3_ES_PL2,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ES_PL2_BN] = {
        .name = "ES_PL2_BN",
        .reg = REG_kv3_ES_PL2,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
    },
    [REGFIELD_kv3_ES_PL2_WN] = {
        .name = "ES_PL2_WN",
        .reg = REG_kv3_ES_PL2,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
    },
    [REGFIELD_kv3_ES_PL3_EC] = {
        .name = "ES_PL3_EC",
        .reg = REG_kv3_ES_PL3,
        .offset = 0,
        .width = 4,
        .mask = 0x000000000000000f,
    },
    [REGFIELD_kv3_ES_PL3_ED] = {
        .name = "ES_PL3_ED",
        .reg = REG_kv3_ES_PL3,
        .offset = 4,
        .width = 60,
        .mask = 0xfffffffffffffff0,
    },
    [REGFIELD_kv3_ES_PL3_OAPL] = {
        .name = "ES_PL3_OAPL",
        .reg = REG_kv3_ES_PL3,
        .offset = 4,
        .width = 2,
        .mask = 0x0000000000000030,
    },
    [REGFIELD_kv3_ES_PL3_ORPL] = {
        .name = "ES_PL3_ORPL",
        .reg = REG_kv3_ES_PL3,
        .offset = 6,
        .width = 2,
        .mask = 0x00000000000000c0,
    },
    [REGFIELD_kv3_ES_PL3_PTAPL] = {
        .name = "ES_PL3_PTAPL",
        .reg = REG_kv3_ES_PL3,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_ES_PL3_PTRPL] = {
        .name = "ES_PL3_PTRPL",
        .reg = REG_kv3_ES_PL3,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_ES_PL3_ITN] = {
        .name = "ES_PL3_ITN",
        .reg = REG_kv3_ES_PL3,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL3_ITL] = {
        .name = "ES_PL3_ITL",
        .reg = REG_kv3_ES_PL3,
        .offset = 17,
        .width = 2,
        .mask = 0x0000000000060000,
    },
    [REGFIELD_kv3_ES_PL3_ITI] = {
        .name = "ES_PL3_ITI",
        .reg = REG_kv3_ES_PL3,
        .offset = 19,
        .width = 10,
        .mask = 0x000000001ff80000,
    },
    [REGFIELD_kv3_ES_PL3_SN] = {
        .name = "ES_PL3_SN",
        .reg = REG_kv3_ES_PL3,
        .offset = 12,
        .width = 12,
        .mask = 0x0000000000fff000,
    },
    [REGFIELD_kv3_ES_PL3_HTC] = {
        .name = "ES_PL3_HTC",
        .reg = REG_kv3_ES_PL3,
        .offset = 12,
        .width = 5,
        .mask = 0x000000000001f000,
    },
    [REGFIELD_kv3_ES_PL3_SFRT] = {
        .name = "ES_PL3_SFRT",
        .reg = REG_kv3_ES_PL3,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
    },
    [REGFIELD_kv3_ES_PL3_SFRI] = {
        .name = "ES_PL3_SFRI",
        .reg = REG_kv3_ES_PL3,
        .offset = 18,
        .width = 3,
        .mask = 0x00000000001c0000,
    },
    [REGFIELD_kv3_ES_PL3_GPRP] = {
        .name = "ES_PL3_GPRP",
        .reg = REG_kv3_ES_PL3,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
    },
    [REGFIELD_kv3_ES_PL3_SFRP] = {
        .name = "ES_PL3_SFRP",
        .reg = REG_kv3_ES_PL3,
        .offset = 27,
        .width = 9,
        .mask = 0x0000000ff8000000,
    },
    [REGFIELD_kv3_ES_PL3_DHT] = {
        .name = "ES_PL3_DHT",
        .reg = REG_kv3_ES_PL3,
        .offset = 36,
        .width = 1,
        .mask = 0x0000001000000000,
    },
    [REGFIELD_kv3_ES_PL3_RWX] = {
        .name = "ES_PL3_RWX",
        .reg = REG_kv3_ES_PL3,
        .offset = 39,
        .width = 3,
        .mask = 0x0000038000000000,
    },
    [REGFIELD_kv3_ES_PL3_NTA] = {
        .name = "ES_PL3_NTA",
        .reg = REG_kv3_ES_PL3,
        .offset = 42,
        .width = 1,
        .mask = 0x0000040000000000,
    },
    [REGFIELD_kv3_ES_PL3_UCA] = {
        .name = "ES_PL3_UCA",
        .reg = REG_kv3_ES_PL3,
        .offset = 43,
        .width = 1,
        .mask = 0x0000080000000000,
    },
    [REGFIELD_kv3_ES_PL3_AS] = {
        .name = "ES_PL3_AS",
        .reg = REG_kv3_ES_PL3,
        .offset = 44,
        .width = 6,
        .mask = 0x0003f00000000000,
    },
    [REGFIELD_kv3_ES_PL3_BS] = {
        .name = "ES_PL3_BS",
        .reg = REG_kv3_ES_PL3,
        .offset = 50,
        .width = 4,
        .mask = 0x003c000000000000,
    },
    [REGFIELD_kv3_ES_PL3_DRI] = {
        .name = "ES_PL3_DRI",
        .reg = REG_kv3_ES_PL3,
        .offset = 54,
        .width = 6,
        .mask = 0x0fc0000000000000,
    },
    [REGFIELD_kv3_ES_PL3_PIC] = {
        .name = "ES_PL3_PIC",
        .reg = REG_kv3_ES_PL3,
        .offset = 60,
        .width = 4,
        .mask = 0xf000000000000000,
    },
    [REGFIELD_kv3_ES_PL3_DC] = {
        .name = "ES_PL3_DC",
        .reg = REG_kv3_ES_PL3,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_ES_PL3_BN] = {
        .name = "ES_PL3_BN",
        .reg = REG_kv3_ES_PL3,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
    },
    [REGFIELD_kv3_ES_PL3_WN] = {
        .name = "ES_PL3_WN",
        .reg = REG_kv3_ES_PL3,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
    },
    [REGFIELD_kv3_TCR_T0CE] = {
        .name = "TCR_T0CE",
        .reg = REG_kv3_TCR,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T1CE] = {
        .name = "TCR_T1CE",
        .reg = REG_kv3_TCR,
        .offset = 17,
        .width = 1,
        .mask = 0x0000000000020000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T0IE] = {
        .name = "TCR_T0IE",
        .reg = REG_kv3_TCR,
        .offset = 18,
        .width = 1,
        .mask = 0x0000000000040000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T1IE] = {
        .name = "TCR_T1IE",
        .reg = REG_kv3_TCR,
        .offset = 19,
        .width = 1,
        .mask = 0x0000000000080000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T0ST] = {
        .name = "TCR_T0ST",
        .reg = REG_kv3_TCR,
        .offset = 20,
        .width = 1,
        .mask = 0x0000000000100000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T1ST] = {
        .name = "TCR_T1ST",
        .reg = REG_kv3_TCR,
        .offset = 21,
        .width = 1,
        .mask = 0x0000000000200000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T0SI] = {
        .name = "TCR_T0SI",
        .reg = REG_kv3_TCR,
        .offset = 22,
        .width = 1,
        .mask = 0x0000000000400000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_T1SI] = {
        .name = "TCR_T1SI",
        .reg = REG_kv3_TCR,
        .offset = 23,
        .width = 1,
        .mask = 0x0000000000800000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_WCE] = {
        .name = "TCR_WCE",
        .reg = REG_kv3_TCR,
        .offset = 24,
        .width = 1,
        .mask = 0x0000000001000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_WIE] = {
        .name = "TCR_WIE",
        .reg = REG_kv3_TCR,
        .offset = 25,
        .width = 1,
        .mask = 0x0000000002000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_WUI] = {
        .name = "TCR_WUI",
        .reg = REG_kv3_TCR,
        .offset = 26,
        .width = 1,
        .mask = 0x0000000004000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_WUS] = {
        .name = "TCR_WUS",
        .reg = REG_kv3_TCR,
        .offset = 27,
        .width = 1,
        .mask = 0x0000000008000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TCR_WSI] = {
        .name = "TCR_WSI",
        .reg = REG_kv3_TCR,
        .offset = 28,
        .width = 1,
        .mask = 0x0000000010000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PM0_PM0] = {
        .name = "PM0_PM0",
        .reg = REG_kv3_PM0,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PM1_PM1] = {
        .name = "PM1_PM1",
        .reg = REG_kv3_PM1,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PM2_PM2] = {
        .name = "PM2_PM2",
        .reg = REG_kv3_PM2,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PM3_PM3] = {
        .name = "PM3_PM3",
        .reg = REG_kv3_PM3,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMSA_PMSA] = {
        .name = "PMSA_PMSA",
        .reg = REG_kv3_PMSA,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_T0V_T0V] = {
        .name = "T0V_T0V",
        .reg = REG_kv3_T0V,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_T1V_T1V] = {
        .name = "T1V_T1V",
        .reg = REG_kv3_T1V,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_T0R_T0R] = {
        .name = "T0R_T0R",
        .reg = REG_kv3_T0R,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_T1R_T1R] = {
        .name = "T1R_T1R",
        .reg = REG_kv3_T1R,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_T1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_WDV_WDV] = {
        .name = "WDV_WDV",
        .reg = REG_kv3_WDV,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_WDR_WDR] = {
        .name = "WDR_WDR",
        .reg = REG_kv3_WDR,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_WD,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM0C] = {
        .name = "PMC_PM0C",
        .reg = REG_kv3_PMC,
        .offset = 0,
        .width = 6,
        .mask = 0x000000000000003f,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM1C] = {
        .name = "PMC_PM1C",
        .reg = REG_kv3_PMC,
        .offset = 7,
        .width = 6,
        .mask = 0x0000000000001f80,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM2C] = {
        .name = "PMC_PM2C",
        .reg = REG_kv3_PMC,
        .offset = 14,
        .width = 6,
        .mask = 0x00000000000fc000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM3C] = {
        .name = "PMC_PM3C",
        .reg = REG_kv3_PMC,
        .offset = 21,
        .width = 6,
        .mask = 0x0000000007e00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PM3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_SAV] = {
        .name = "PMC_SAV",
        .reg = REG_kv3_PMC,
        .offset = 30,
        .width = 1,
        .mask = 0x0000000040000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM0IE] = {
        .name = "PMC_PM0IE",
        .reg = REG_kv3_PMC,
        .offset = 32,
        .width = 1,
        .mask = 0x0000000100000000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
            REGFIELD_kv3_MO_PM0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM1IE] = {
        .name = "PMC_PM1IE",
        .reg = REG_kv3_PMC,
        .offset = 33,
        .width = 1,
        .mask = 0x0000000200000000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
            REGFIELD_kv3_MO_PM1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM2IE] = {
        .name = "PMC_PM2IE",
        .reg = REG_kv3_PMC,
        .offset = 34,
        .width = 1,
        .mask = 0x0000000400000000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
            REGFIELD_kv3_MO_PM2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_PM3IE] = {
        .name = "PMC_PM3IE",
        .reg = REG_kv3_PMC,
        .offset = 35,
        .width = 1,
        .mask = 0x0000000800000000,
        .n_owners = 2,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
            REGFIELD_kv3_MO_PM3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_SAT] = {
        .name = "PMC_SAT",
        .reg = REG_kv3_PMC,
        .offset = 36,
        .width = 2,
        .mask = 0x0000003000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_PID] = {
        .name = "PCR_PID",
        .reg = REG_kv3_PCR,
        .offset = 0,
        .width = 8,
        .mask = 0x00000000000000ff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_CID] = {
        .name = "PCR_CID",
        .reg = REG_kv3_PCR,
        .offset = 8,
        .width = 8,
        .mask = 0x000000000000ff00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_MID] = {
        .name = "PCR_MID",
        .reg = REG_kv3_PCR,
        .offset = 16,
        .width = 8,
        .mask = 0x0000000000ff0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_CAR] = {
        .name = "PCR_CAR",
        .reg = REG_kv3_PCR,
        .offset = 24,
        .width = 4,
        .mask = 0x000000000f000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_CMA] = {
        .name = "PCR_CMA",
        .reg = REG_kv3_PCR,
        .offset = 28,
        .width = 4,
        .mask = 0x00000000f0000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_SV] = {
        .name = "PCR_SV",
        .reg = REG_kv3_PCR,
        .offset = 32,
        .width = 8,
        .mask = 0x000000ff00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_ST] = {
        .name = "PCR_ST",
        .reg = REG_kv3_PCR,
        .offset = 40,
        .width = 4,
        .mask = 0x00000f0000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_BM] = {
        .name = "PCR_BM",
        .reg = REG_kv3_PCR,
        .offset = 44,
        .width = 8,
        .mask = 0x000ff00000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_COE] = {
        .name = "PCR_COE",
        .reg = REG_kv3_PCR,
        .offset = 52,
        .width = 1,
        .mask = 0x0010000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_L1CE] = {
        .name = "PCR_L1CE",
        .reg = REG_kv3_PCR,
        .offset = 53,
        .width = 1,
        .mask = 0x0020000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PCR_DSEM] = {
        .name = "PCR_DSEM",
        .reg = REG_kv3_PCR,
        .offset = 54,
        .width = 1,
        .mask = 0x0040000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_ASN] = {
        .name = "MMC_ASN",
        .reg = REG_kv3_MMC,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_S] = {
        .name = "MMC_S",
        .reg = REG_kv3_MMC,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_SNE] = {
        .name = "MMC_SNE",
        .reg = REG_kv3_MMC,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_SPE] = {
        .name = "MMC_SPE",
        .reg = REG_kv3_MMC,
        .offset = 15,
        .width = 1,
        .mask = 0x0000000000008000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_PTC] = {
        .name = "MMC_PTC",
        .reg = REG_kv3_MMC,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_SW] = {
        .name = "MMC_SW",
        .reg = REG_kv3_MMC,
        .offset = 18,
        .width = 4,
        .mask = 0x00000000003c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_SS] = {
        .name = "MMC_SS",
        .reg = REG_kv3_MMC,
        .offset = 22,
        .width = 6,
        .mask = 0x000000000fc00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_SB] = {
        .name = "MMC_SB",
        .reg = REG_kv3_MMC,
        .offset = 28,
        .width = 1,
        .mask = 0x0000000010000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_PAR] = {
        .name = "MMC_PAR",
        .reg = REG_kv3_MMC,
        .offset = 30,
        .width = 1,
        .mask = 0x0000000040000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MMC_E] = {
        .name = "MMC_E",
        .reg = REG_kv3_MMC,
        .offset = 31,
        .width = 1,
        .mask = 0x0000000080000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEL_ES] = {
        .name = "TEL_ES",
        .reg = REG_kv3_TEL,
        .offset = 0,
        .width = 2,
        .mask = 0x0000000000000003,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEL_CP] = {
        .name = "TEL_CP",
        .reg = REG_kv3_TEL,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEL_PA] = {
        .name = "TEL_PA",
        .reg = REG_kv3_TEL,
        .offset = 4,
        .width = 4,
        .mask = 0x00000000000000f0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEL_PS] = {
        .name = "TEL_PS",
        .reg = REG_kv3_TEL,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEL_FN] = {
        .name = "TEL_FN",
        .reg = REG_kv3_TEL,
        .offset = 12,
        .width = 28,
        .mask = 0x000000fffffff000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEH_ASN] = {
        .name = "TEH_ASN",
        .reg = REG_kv3_TEH,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEH_G] = {
        .name = "TEH_G",
        .reg = REG_kv3_TEH,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEH_VS] = {
        .name = "TEH_VS",
        .reg = REG_kv3_TEH,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_TEH_PN] = {
        .name = "TEH_PN",
        .reg = REG_kv3_TEH,
        .offset = 12,
        .width = 29,
        .mask = 0x000001fffffff000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MSG,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_BE0] = {
        .name = "DC_BE0",
        .reg = REG_kv3_DC,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_BR0] = {
        .name = "DC_BR0",
        .reg = REG_kv3_DC,
        .offset = 1,
        .width = 6,
        .mask = 0x000000000000007e,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_BE1] = {
        .name = "DC_BE1",
        .reg = REG_kv3_DC,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_BR1] = {
        .name = "DC_BR1",
        .reg = REG_kv3_DC,
        .offset = 8,
        .width = 6,
        .mask = 0x0000000000003f00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_WE0] = {
        .name = "DC_WE0",
        .reg = REG_kv3_DC,
        .offset = 14,
        .width = 1,
        .mask = 0x0000000000004000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_WR0] = {
        .name = "DC_WR0",
        .reg = REG_kv3_DC,
        .offset = 15,
        .width = 6,
        .mask = 0x00000000001f8000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_WE1] = {
        .name = "DC_WE1",
        .reg = REG_kv3_DC,
        .offset = 21,
        .width = 1,
        .mask = 0x0000000000200000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC_WR1] = {
        .name = "DC_WR1",
        .reg = REG_kv3_DC,
        .offset = 22,
        .width = 6,
        .mask = 0x000000000fc00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_PSE] = {
        .name = "MES_PSE",
        .reg = REG_kv3_MES,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_PILSY] = {
        .name = "MES_PILSY",
        .reg = REG_kv3_MES,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_PILDE] = {
        .name = "MES_PILDE",
        .reg = REG_kv3_MES,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_PILPA] = {
        .name = "MES_PILPA",
        .reg = REG_kv3_MES,
        .offset = 3,
        .width = 1,
        .mask = 0x0000000000000008,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DSE] = {
        .name = "MES_DSE",
        .reg = REG_kv3_MES,
        .offset = 4,
        .width = 1,
        .mask = 0x0000000000000010,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DILSY] = {
        .name = "MES_DILSY",
        .reg = REG_kv3_MES,
        .offset = 5,
        .width = 1,
        .mask = 0x0000000000000020,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DILDE] = {
        .name = "MES_DILDE",
        .reg = REG_kv3_MES,
        .offset = 6,
        .width = 1,
        .mask = 0x0000000000000040,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DILPA] = {
        .name = "MES_DILPA",
        .reg = REG_kv3_MES,
        .offset = 7,
        .width = 1,
        .mask = 0x0000000000000080,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DDEE] = {
        .name = "MES_DDEE",
        .reg = REG_kv3_MES,
        .offset = 8,
        .width = 1,
        .mask = 0x0000000000000100,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MES_DSYE] = {
        .name = "MES_DSYE",
        .reg = REG_kv3_MES,
        .offset = 9,
        .width = 1,
        .mask = 0x0000000000000200,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_MES,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_WS_WU0] = {
        .name = "WS_WU0",
        .reg = REG_kv3_WS,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
    },
    [REGFIELD_kv3_WS_WU1] = {
        .name = "WS_WU1",
        .reg = REG_kv3_WS,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
    },
    [REGFIELD_kv3_WS_WU2] = {
        .name = "WS_WU2",
        .reg = REG_kv3_WS,
        .offset = 2,
        .width = 1,
        .mask = 0x0000000000000004,
    },
    [REGFIELD_kv3_IPE_FE] = {
        .name = "IPE_FE",
        .reg = REG_kv3_IPE,
        .offset = 0,
        .width = 16,
        .mask = 0x000000000000ffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_SYNC,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_IPE_BE] = {
        .name = "IPE_BE",
        .reg = REG_kv3_IPE,
        .offset = 16,
        .width = 16,
        .mask = 0x00000000ffff0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_SYNC,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_IPE_FM] = {
        .name = "IPE_FM",
        .reg = REG_kv3_IPE,
        .offset = 32,
        .width = 16,
        .mask = 0x0000ffff00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_SYNC,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_IPE_BM] = {
        .name = "IPE_BM",
        .reg = REG_kv3_IPE,
        .offset = 48,
        .width = 16,
        .mask = 0xffff000000000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_SYNC,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DO_B2] = {
        .name = "DO_B2",
        .reg = REG_kv3_DO,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
    },
    [REGFIELD_kv3_DO_B3] = {
        .name = "DO_B3",
        .reg = REG_kv3_DO,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
    },
    [REGFIELD_kv3_DO_W2] = {
        .name = "DO_W2",
        .reg = REG_kv3_DO,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
    },
    [REGFIELD_kv3_DO_W3] = {
        .name = "DO_W3",
        .reg = REG_kv3_DO,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
    },
    [REGFIELD_kv3_DO_BI0] = {
        .name = "DO_BI0",
        .reg = REG_kv3_DO,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
    },
    [REGFIELD_kv3_DO_BI1] = {
        .name = "DO_BI1",
        .reg = REG_kv3_DO,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
    },
    [REGFIELD_kv3_DO_BI2] = {
        .name = "DO_BI2",
        .reg = REG_kv3_DO,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
    },
    [REGFIELD_kv3_DO_BI3] = {
        .name = "DO_BI3",
        .reg = REG_kv3_DO,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
    },
    [REGFIELD_kv3_DBA2_DBA2] = {
        .name = "DBA2_DBA2",
        .reg = REG_kv3_DBA2,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DBA3_DBA3] = {
        .name = "DBA3_DBA3",
        .reg = REG_kv3_DBA3,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DWA2_DWA2] = {
        .name = "DWA2_DWA2",
        .reg = REG_kv3_DWA2,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DWA3_DWA3] = {
        .name = "DWA3_DWA3",
        .reg = REG_kv3_DWA3,
        .offset = 0,
        .width = 64,
        .mask = 0xffffffffffffffff,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_B2] = {
        .name = "DOW_B2",
        .reg = REG_kv3_DOW,
        .offset = 8,
        .width = 2,
        .mask = 0x0000000000000300,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_B3] = {
        .name = "DOW_B3",
        .reg = REG_kv3_DOW,
        .offset = 10,
        .width = 2,
        .mask = 0x0000000000000c00,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_W2] = {
        .name = "DOW_W2",
        .reg = REG_kv3_DOW,
        .offset = 12,
        .width = 2,
        .mask = 0x0000000000003000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_W3] = {
        .name = "DOW_W3",
        .reg = REG_kv3_DOW,
        .offset = 14,
        .width = 2,
        .mask = 0x000000000000c000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_BI0] = {
        .name = "DOW_BI0",
        .reg = REG_kv3_DOW,
        .offset = 16,
        .width = 2,
        .mask = 0x0000000000030000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_BI0,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_BI1] = {
        .name = "DOW_BI1",
        .reg = REG_kv3_DOW,
        .offset = 18,
        .width = 2,
        .mask = 0x00000000000c0000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_BI1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_BI2] = {
        .name = "DOW_BI2",
        .reg = REG_kv3_DOW,
        .offset = 20,
        .width = 2,
        .mask = 0x0000000000300000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_BI2,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DOW_BI3] = {
        .name = "DOW_BI3",
        .reg = REG_kv3_DOW,
        .offset = 22,
        .width = 2,
        .mask = 0x0000000000c00000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_BI3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_MO_COMM] = {
        .name = "MO_COMM",
        .reg = REG_kv3_MO,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
    },
    [REGFIELD_kv3_MOW_COMM] = {
        .name = "MOW_COMM",
        .reg = REG_kv3_MOW,
        .offset = 34,
        .width = 2,
        .mask = 0x0000000c00000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_COMM,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_ES_DRX] = {
        .name = "ES_DRX",
        .reg = REG_kv3_ES,
        .offset = 37,
        .width = 1,
        .mask = 0x0000002000000000,
    },
    [REGFIELD_kv3_ES_DAF] = {
        .name = "ES_DAF",
        .reg = REG_kv3_ES,
        .offset = 38,
        .width = 1,
        .mask = 0x0000004000000000,
    },
    [REGFIELD_kv3_ES_DCV2] = {
        .name = "ES_DCV2",
        .reg = REG_kv3_ES,
        .offset = 12,
        .width = 3,
        .mask = 0x0000000000007000,
    },
    [REGFIELD_kv3_ES_WBN] = {
        .name = "ES_WBN",
        .reg = REG_kv3_ES,
        .offset = 15,
        .width = 2,
        .mask = 0x0000000000018000,
    },
    [REGFIELD_kv3_ES_PL0_DRX] = {
        .name = "ES_PL0_DRX",
        .reg = REG_kv3_ES_PL0,
        .offset = 37,
        .width = 1,
        .mask = 0x0000002000000000,
    },
    [REGFIELD_kv3_ES_PL0_DAF] = {
        .name = "ES_PL0_DAF",
        .reg = REG_kv3_ES_PL0,
        .offset = 38,
        .width = 1,
        .mask = 0x0000004000000000,
    },
    [REGFIELD_kv3_ES_PL0_DCV2] = {
        .name = "ES_PL0_DCV2",
        .reg = REG_kv3_ES_PL0,
        .offset = 12,
        .width = 3,
        .mask = 0x0000000000007000,
    },
    [REGFIELD_kv3_ES_PL0_WBN] = {
        .name = "ES_PL0_WBN",
        .reg = REG_kv3_ES_PL0,
        .offset = 15,
        .width = 2,
        .mask = 0x0000000000018000,
    },
    [REGFIELD_kv3_ES_PL1_DRX] = {
        .name = "ES_PL1_DRX",
        .reg = REG_kv3_ES_PL1,
        .offset = 37,
        .width = 1,
        .mask = 0x0000002000000000,
    },
    [REGFIELD_kv3_ES_PL1_DAF] = {
        .name = "ES_PL1_DAF",
        .reg = REG_kv3_ES_PL1,
        .offset = 38,
        .width = 1,
        .mask = 0x0000004000000000,
    },
    [REGFIELD_kv3_ES_PL1_DCV2] = {
        .name = "ES_PL1_DCV2",
        .reg = REG_kv3_ES_PL1,
        .offset = 12,
        .width = 3,
        .mask = 0x0000000000007000,
    },
    [REGFIELD_kv3_ES_PL1_WBN] = {
        .name = "ES_PL1_WBN",
        .reg = REG_kv3_ES_PL1,
        .offset = 15,
        .width = 2,
        .mask = 0x0000000000018000,
    },
    [REGFIELD_kv3_ES_PL2_DRX] = {
        .name = "ES_PL2_DRX",
        .reg = REG_kv3_ES_PL2,
        .offset = 37,
        .width = 1,
        .mask = 0x0000002000000000,
    },
    [REGFIELD_kv3_ES_PL2_DAF] = {
        .name = "ES_PL2_DAF",
        .reg = REG_kv3_ES_PL2,
        .offset = 38,
        .width = 1,
        .mask = 0x0000004000000000,
    },
    [REGFIELD_kv3_ES_PL2_DCV2] = {
        .name = "ES_PL2_DCV2",
        .reg = REG_kv3_ES_PL2,
        .offset = 12,
        .width = 3,
        .mask = 0x0000000000007000,
    },
    [REGFIELD_kv3_ES_PL2_WBN] = {
        .name = "ES_PL2_WBN",
        .reg = REG_kv3_ES_PL2,
        .offset = 15,
        .width = 2,
        .mask = 0x0000000000018000,
    },
    [REGFIELD_kv3_ES_PL3_DRX] = {
        .name = "ES_PL3_DRX",
        .reg = REG_kv3_ES_PL3,
        .offset = 37,
        .width = 1,
        .mask = 0x0000002000000000,
    },
    [REGFIELD_kv3_ES_PL3_DAF] = {
        .name = "ES_PL3_DAF",
        .reg = REG_kv3_ES_PL3,
        .offset = 38,
        .width = 1,
        .mask = 0x0000004000000000,
    },
    [REGFIELD_kv3_ES_PL3_DCV2] = {
        .name = "ES_PL3_DCV2",
        .reg = REG_kv3_ES_PL3,
        .offset = 12,
        .width = 3,
        .mask = 0x0000000000007000,
    },
    [REGFIELD_kv3_ES_PL3_WBN] = {
        .name = "ES_PL3_WBN",
        .reg = REG_kv3_ES_PL3,
        .offset = 15,
        .width = 2,
        .mask = 0x0000000000018000,
    },
    [REGFIELD_kv3_SID_SID] = {
        .name = "SID_SID",
        .reg = REG_kv3_SID,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SID_PL0_SID] = {
        .name = "SID_PL0_SID",
        .reg = REG_kv3_SID_PL0,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SID_PL1_SID] = {
        .name = "SID_PL1_SID",
        .reg = REG_kv3_SID_PL1,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SID_PL2_SID] = {
        .name = "SID_PL2_SID",
        .reg = REG_kv3_SID_PL2,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_SID_PL3_SID] = {
        .name = "SID_PL3_SID",
        .reg = REG_kv3_SID_PL3,
        .offset = 0,
        .width = 9,
        .mask = 0x00000000000001ff,
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_PMC_SAF] = {
        .name = "PMC_SAF",
        .reg = REG_kv3_PMC,
        .offset = 28,
        .width = 2,
        .mask = 0x0000000030000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PMIT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_v2_PCR_CAR] = {
        .name = "PCR_CAR",
        .reg = REG_kv3_PCR,
        .offset = 24,
        .width = 4,
        .mask = 0x000000000f000000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_PCR,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC0_BE] = {
        .name = "DC0_BE",
        .reg = REG_kv3_DC0,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC0_WE] = {
        .name = "DC0_WE",
        .reg = REG_kv3_DC0,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC0_WTYP] = {
        .name = "DC0_WTYP",
        .reg = REG_kv3_DC0,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC0_WSZ] = {
        .name = "DC0_WSZ",
        .reg = REG_kv3_DC0,
        .offset = 4,
        .width = 28,
        .mask = 0x00000000fffffff0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC1_BE] = {
        .name = "DC1_BE",
        .reg = REG_kv3_DC1,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC1_WE] = {
        .name = "DC1_WE",
        .reg = REG_kv3_DC1,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC1_WTYP] = {
        .name = "DC1_WTYP",
        .reg = REG_kv3_DC1,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC1_WSZ] = {
        .name = "DC1_WSZ",
        .reg = REG_kv3_DC1,
        .offset = 4,
        .width = 28,
        .mask = 0x00000000fffffff0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC2_BE] = {
        .name = "DC2_BE",
        .reg = REG_kv3_DC2,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC2_WE] = {
        .name = "DC2_WE",
        .reg = REG_kv3_DC2,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC2_WTYP] = {
        .name = "DC2_WTYP",
        .reg = REG_kv3_DC2,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC2_WSZ] = {
        .name = "DC2_WSZ",
        .reg = REG_kv3_DC2,
        .offset = 4,
        .width = 28,
        .mask = 0x00000000fffffff0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC3_BE] = {
        .name = "DC3_BE",
        .reg = REG_kv3_DC3,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_B3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC3_WE] = {
        .name = "DC3_WE",
        .reg = REG_kv3_DC3,
        .offset = 1,
        .width = 1,
        .mask = 0x0000000000000002,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC3_WTYP] = {
        .name = "DC3_WTYP",
        .reg = REG_kv3_DC3,
        .offset = 2,
        .width = 2,
        .mask = 0x000000000000000c,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_DC3_WSZ] = {
        .name = "DC3_WSZ",
        .reg = REG_kv3_DC3,
        .offset = 4,
        .width = 28,
        .mask = 0x00000000fffffff0,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_DO_W3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_IXC_FCB] = {
        .name = "IXC_FCB",
        .reg = REG_kv3_IXC,
        .offset = 0,
        .width = 1,
        .mask = 0x0000000000000001,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_COMM,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
    [REGFIELD_kv3_IXC_BCB] = {
        .name = "IXC_BCB",
        .reg = REG_kv3_IXC,
        .offset = 16,
        .width = 1,
        .mask = 0x0000000000010000,
        .n_owners = 1,
        .owners = (const RegisterField []) {
            REGFIELD_kv3_MO_COMM,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
    },
};

typedef struct RegisterDescr RegisterDescr;
struct RegisterDescr {
    const char *name; /* name (debug purpose mostly) */
    RegFile regfile;
    size_t reg_width; /* architectural width */
    size_t offset; /* offset in storage */
    /* the following fields concern only SFR registers */
    uint64_t reset; /* reset_value */
    uint64_t mask; /* write mask */
    int n_fields; /* number of fields */
    const RegisterField *fields; /* fields */
    RegisterReadErrorType rerror; /* consequence on read pl error */
    RegisterWriteErrorType werror; /* consequence on write pl error */
    RegisterAccessType raccess; /* allowed read instruction */
    RegisterAccessType waccess; /* allowed write instruction */
    uint64_t cpu_models; /* CPU models for which this register exists */
};

static const RegisterDescr REGISTERS[] = {
    [REG_kv3_PC] = {
        .name = "pc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PC) + 0,
        /*.reset = Hardwired,*/
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PS] = {
        .name = "ps",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_PS) + 0,
        .reset = 0x01000004,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PS_PL,
            REGFIELD_kv3_PS_ET,
            REGFIELD_kv3_PS_HTD,
            REGFIELD_kv3_PS_IE,
            REGFIELD_kv3_PS_HLE,
            REGFIELD_kv3_PS_SRE,
            REGFIELD_kv3_PS_DAUS,
            REGFIELD_kv3_PS_ICE,
            REGFIELD_kv3_PS_USE,
            REGFIELD_kv3_PS_DCE,
            REGFIELD_kv3_PS_MME,
            REGFIELD_kv3_PS_IL,
            REGFIELD_kv3_PS_VS,
            REGFIELD_kv3_PS_V64,
            REGFIELD_kv3_PS_L2E,
            REGFIELD_kv3_PS_SME,
            REGFIELD_kv3_PS_SMR,
            REGFIELD_kv3_PS_PMJ,
            REGFIELD_kv3_PS_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PCR] = {
        .name = "pcr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PCR) + 0,
        .reset = 0x0010000000000000,
        .mask = (
              0x00000000000000ff
            | 0x000000000000ff00
            | 0x0000000000ff0000
            | 0x000000000f000000
            | 0x00000000f0000000
            | 0x000000ff00000000
            | 0x00000f0000000000
            | 0x000ff00000000000
            | 0x0010000000000000
            | 0x0020000000000000
            | 0x0040000000000000
        ),
        .n_fields = 11,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PCR_PID,
            REGFIELD_kv3_PCR_CID,
            REGFIELD_kv3_PCR_MID,
            REGFIELD_kv3_PCR_CAR,
            REGFIELD_kv3_PCR_CMA,
            REGFIELD_kv3_PCR_SV,
            REGFIELD_kv3_PCR_ST,
            REGFIELD_kv3_PCR_BM,
            REGFIELD_kv3_PCR_COE,
            REGFIELD_kv3_PCR_L1CE,
            REGFIELD_kv3_PCR_DSEM,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_RA] = {
        .name = "ra",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 24,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_CS] = {
        .name = "cs",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_CS) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000001000
            | 0x0000000000002000
            | 0x0000000000030000
            | 0x0000000000300000
            | 0x0000000001000000
            | 0x0000ffff00000000
            | 0x003f000000000000
            | 0x0fc0000000000000
        ),
        .n_fields = 17,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_CS_IC,
            REGFIELD_kv3_CS_IO,
            REGFIELD_kv3_CS_DZ,
            REGFIELD_kv3_CS_OV,
            REGFIELD_kv3_CS_UN,
            REGFIELD_kv3_CS_IN,
            REGFIELD_kv3_CS_XIO,
            REGFIELD_kv3_CS_XDZ,
            REGFIELD_kv3_CS_XOV,
            REGFIELD_kv3_CS_XUN,
            REGFIELD_kv3_CS_XIN,
            REGFIELD_kv3_CS_RM,
            REGFIELD_kv3_CS_XRM,
            REGFIELD_kv3_CS_XMF,
            REGFIELD_kv3_CS_CC,
            REGFIELD_kv3_CS_XDROP,
            REGFIELD_kv3_CS_XPOW2,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_CSIT] = {
        .name = "csit",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_CSIT) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000001000
            | 0x0000000000002000
            | 0x0000000000010000
            | 0x00000000000e0000
            | 0x0000000000100000
        ),
        .n_fields = 14,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_CSIT_ICIE,
            REGFIELD_kv3_CSIT_IOIE,
            REGFIELD_kv3_CSIT_DZIE,
            REGFIELD_kv3_CSIT_OVIE,
            REGFIELD_kv3_CSIT_UNIE,
            REGFIELD_kv3_CSIT_INIE,
            REGFIELD_kv3_CSIT_XIOIE,
            REGFIELD_kv3_CSIT_XDZIE,
            REGFIELD_kv3_CSIT_XOVIE,
            REGFIELD_kv3_CSIT_XUNIE,
            REGFIELD_kv3_CSIT_XINIE,
            REGFIELD_kv3_CSIT_AEIR,
            REGFIELD_kv3_CSIT_AEC,
            REGFIELD_kv3_CSIT_SPCV,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_AESPC] = {
        .name = "aespc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_AESPC) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_AESPC_AESPC,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_LS] = {
        .name = "ls",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 56,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_LE] = {
        .name = "le",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 64,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_LC] = {
        .name = "lc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 72,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_IPE] = {
        .name = "ipe",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_IPE) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x000000000000ffff
            | 0x00000000ffff0000
            | 0x0000ffff00000000
            | 0xffff000000000000
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_IPE_FE,
            REGFIELD_kv3_IPE_BE,
            REGFIELD_kv3_IPE_FM,
            REGFIELD_kv3_IPE_BM,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_MEN] = {
        .name = "men",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MEN) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x000000000000ffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MEN_MEN,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PMC] = {
        .name = "pmc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PMC) + 0,
        .reset = 0x0000000000408000,
        .mask = (
              0x000000000000003f
            | 0x0000000000001f80
            | 0x00000000000fc000
            | 0x0000000007e00000
            | 0x0000000040000000
            | 0x0000000100000000
            | 0x0000000200000000
            | 0x0000000400000000
            | 0x0000000800000000
            | 0x0000003000000000
        ),
        .n_fields = 10,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PMC_PM0C,
            REGFIELD_kv3_PMC_PM1C,
            REGFIELD_kv3_PMC_PM2C,
            REGFIELD_kv3_PMC_PM3C,
            REGFIELD_kv3_PMC_SAV,
            REGFIELD_kv3_PMC_PM0IE,
            REGFIELD_kv3_PMC_PM1IE,
            REGFIELD_kv3_PMC_PM2IE,
            REGFIELD_kv3_PMC_PM3IE,
            REGFIELD_kv3_PMC_SAT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_PM0] = {
        .name = "pm0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM0) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PM0_PM0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PM1] = {
        .name = "pm1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM1) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PM1_PM1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PM2] = {
        .name = "pm2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM2) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PM2_PM2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PM3] = {
        .name = "pm3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PM3) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PM3_PM3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_PMSA] = {
        .name = "pmsa",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PMSA) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PMSA_PMSA,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_TCR] = {
        .name = "tcr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_TCR) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000100000
            | 0x0000000000200000
            | 0x0000000000400000
            | 0x0000000000800000
            | 0x0000000001000000
            | 0x0000000002000000
            | 0x0000000004000000
            | 0x0000000008000000
            | 0x0000000010000000
        ),
        .n_fields = 13,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_TCR_T0CE,
            REGFIELD_kv3_TCR_T1CE,
            REGFIELD_kv3_TCR_T0IE,
            REGFIELD_kv3_TCR_T1IE,
            REGFIELD_kv3_TCR_T0ST,
            REGFIELD_kv3_TCR_T1ST,
            REGFIELD_kv3_TCR_T0SI,
            REGFIELD_kv3_TCR_T1SI,
            REGFIELD_kv3_TCR_WCE,
            REGFIELD_kv3_TCR_WIE,
            REGFIELD_kv3_TCR_WUI,
            REGFIELD_kv3_TCR_WUS,
            REGFIELD_kv3_TCR_WSI,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_T0V] = {
        .name = "t0v",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T0V) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_T0V_T0V,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_T1V] = {
        .name = "t1v",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T1V) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_T1V_T1V,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_T0R] = {
        .name = "t0r",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T0R) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_T0R_T0R,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_T1R] = {
        .name = "t1r",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_T1R) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_T1R_T1R,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_WDV] = {
        .name = "wdv",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_WDV) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_WDV_WDV,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_WDR] = {
        .name = "wdr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_WDR) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_WDR_WDR,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ILE] = {
        .name = "ile",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILE) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000001000
            | 0x0000000000002000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000100000
            | 0x0000000000200000
            | 0x0000000000400000
            | 0x0000000000800000
            | 0x0000000001000000
            | 0x0000000002000000
            | 0x0000000004000000
            | 0x0000000008000000
            | 0x0000000010000000
            | 0x0000000020000000
            | 0x0000000040000000
            | 0x0000000080000000
        ),
        .n_fields = 32,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ILE_IT0,
            REGFIELD_kv3_ILE_IT1,
            REGFIELD_kv3_ILE_IT2,
            REGFIELD_kv3_ILE_IT3,
            REGFIELD_kv3_ILE_IT4,
            REGFIELD_kv3_ILE_IT5,
            REGFIELD_kv3_ILE_IT6,
            REGFIELD_kv3_ILE_IT7,
            REGFIELD_kv3_ILE_IT8,
            REGFIELD_kv3_ILE_IT9,
            REGFIELD_kv3_ILE_IT10,
            REGFIELD_kv3_ILE_IT11,
            REGFIELD_kv3_ILE_IT12,
            REGFIELD_kv3_ILE_IT13,
            REGFIELD_kv3_ILE_IT14,
            REGFIELD_kv3_ILE_IT15,
            REGFIELD_kv3_ILE_IT16,
            REGFIELD_kv3_ILE_IT17,
            REGFIELD_kv3_ILE_IT18,
            REGFIELD_kv3_ILE_IT19,
            REGFIELD_kv3_ILE_IT20,
            REGFIELD_kv3_ILE_IT21,
            REGFIELD_kv3_ILE_IT22,
            REGFIELD_kv3_ILE_IT23,
            REGFIELD_kv3_ILE_IT24,
            REGFIELD_kv3_ILE_IT25,
            REGFIELD_kv3_ILE_IT26,
            REGFIELD_kv3_ILE_IT27,
            REGFIELD_kv3_ILE_IT28,
            REGFIELD_kv3_ILE_IT29,
            REGFIELD_kv3_ILE_IT30,
            REGFIELD_kv3_ILE_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ILL] = {
        .name = "ill",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILL) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
            | 0x0000003000000000
            | 0x000000c000000000
            | 0x0000030000000000
            | 0x00000c0000000000
            | 0x0000300000000000
            | 0x0000c00000000000
            | 0x0003000000000000
            | 0x000c000000000000
            | 0x0030000000000000
            | 0x00c0000000000000
            | 0x0300000000000000
            | 0x0c00000000000000
            | 0x3000000000000000
            | 0xc000000000000000
        ),
        .n_fields = 32,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ILL_IT0,
            REGFIELD_kv3_ILL_IT1,
            REGFIELD_kv3_ILL_IT2,
            REGFIELD_kv3_ILL_IT3,
            REGFIELD_kv3_ILL_IT4,
            REGFIELD_kv3_ILL_IT5,
            REGFIELD_kv3_ILL_IT6,
            REGFIELD_kv3_ILL_IT7,
            REGFIELD_kv3_ILL_IT8,
            REGFIELD_kv3_ILL_IT9,
            REGFIELD_kv3_ILL_IT10,
            REGFIELD_kv3_ILL_IT11,
            REGFIELD_kv3_ILL_IT12,
            REGFIELD_kv3_ILL_IT13,
            REGFIELD_kv3_ILL_IT14,
            REGFIELD_kv3_ILL_IT15,
            REGFIELD_kv3_ILL_IT16,
            REGFIELD_kv3_ILL_IT17,
            REGFIELD_kv3_ILL_IT18,
            REGFIELD_kv3_ILL_IT19,
            REGFIELD_kv3_ILL_IT20,
            REGFIELD_kv3_ILL_IT21,
            REGFIELD_kv3_ILL_IT22,
            REGFIELD_kv3_ILL_IT23,
            REGFIELD_kv3_ILL_IT24,
            REGFIELD_kv3_ILL_IT25,
            REGFIELD_kv3_ILL_IT26,
            REGFIELD_kv3_ILL_IT27,
            REGFIELD_kv3_ILL_IT28,
            REGFIELD_kv3_ILL_IT29,
            REGFIELD_kv3_ILL_IT30,
            REGFIELD_kv3_ILL_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ILR] = {
        .name = "ilr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ILR) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000001000
            | 0x0000000000002000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000100000
            | 0x0000000000200000
            | 0x0000000000400000
            | 0x0000000000800000
            | 0x0000000001000000
            | 0x0000000002000000
            | 0x0000000004000000
            | 0x0000000008000000
            | 0x0000000010000000
            | 0x0000000020000000
            | 0x0000000040000000
            | 0x0000000080000000
        ),
        .n_fields = 32,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ILR_IT0,
            REGFIELD_kv3_ILR_IT1,
            REGFIELD_kv3_ILR_IT2,
            REGFIELD_kv3_ILR_IT3,
            REGFIELD_kv3_ILR_IT4,
            REGFIELD_kv3_ILR_IT5,
            REGFIELD_kv3_ILR_IT6,
            REGFIELD_kv3_ILR_IT7,
            REGFIELD_kv3_ILR_IT8,
            REGFIELD_kv3_ILR_IT9,
            REGFIELD_kv3_ILR_IT10,
            REGFIELD_kv3_ILR_IT11,
            REGFIELD_kv3_ILR_IT12,
            REGFIELD_kv3_ILR_IT13,
            REGFIELD_kv3_ILR_IT14,
            REGFIELD_kv3_ILR_IT15,
            REGFIELD_kv3_ILR_IT16,
            REGFIELD_kv3_ILR_IT17,
            REGFIELD_kv3_ILR_IT18,
            REGFIELD_kv3_ILR_IT19,
            REGFIELD_kv3_ILR_IT20,
            REGFIELD_kv3_ILR_IT21,
            REGFIELD_kv3_ILR_IT22,
            REGFIELD_kv3_ILR_IT23,
            REGFIELD_kv3_ILR_IT24,
            REGFIELD_kv3_ILR_IT25,
            REGFIELD_kv3_ILR_IT26,
            REGFIELD_kv3_ILR_IT27,
            REGFIELD_kv3_ILR_IT28,
            REGFIELD_kv3_ILR_IT29,
            REGFIELD_kv3_ILR_IT30,
            REGFIELD_kv3_ILR_IT31,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_MMC] = {
        .name = "mmc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_MMC) + 0,
        .reset = 0x00004000,
        .mask = (
              0x00000000000001ff
            | 0x0000000000000200
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000030000
            | 0x00000000003c0000
            | 0x000000000fc00000
            | 0x0000000010000000
            | 0x0000000040000000
            | 0x0000000080000000
        ),
        .n_fields = 10,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MMC_ASN,
            REGFIELD_kv3_MMC_S,
            REGFIELD_kv3_MMC_SNE,
            REGFIELD_kv3_MMC_SPE,
            REGFIELD_kv3_MMC_PTC,
            REGFIELD_kv3_MMC_SW,
            REGFIELD_kv3_MMC_SS,
            REGFIELD_kv3_MMC_SB,
            REGFIELD_kv3_MMC_PAR,
            REGFIELD_kv3_MMC_E,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_TEL] = {
        .name = "tel",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_TEL) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x00000000000000f0
            | 0x0000000000000c00
            | 0x000000fffffff000
        ),
        .n_fields = 5,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_TEL_ES,
            REGFIELD_kv3_TEL_CP,
            REGFIELD_kv3_TEL_PA,
            REGFIELD_kv3_TEL_PS,
            REGFIELD_kv3_TEL_FN,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_TEH] = {
        .name = "teh",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_TEH) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x00000000000001ff
            | 0x0000000000000200
            | 0x0000000000000c00
            | 0x000001fffffff000
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_TEH_ASN,
            REGFIELD_kv3_TEH_G,
            REGFIELD_kv3_TEH_VS,
            REGFIELD_kv3_TEH_PN,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_IXC] = {
        .name = "ixc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_IXC) + 0,
        .reset = 0x0000000000010001,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SYO] = {
        .name = "syo",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SYO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SYO_Q0,
            REGFIELD_kv3_SYO_Q1,
            REGFIELD_kv3_SYO_Q2,
            REGFIELD_kv3_SYO_Q3,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_HTO] = {
        .name = "hto",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_HTO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
        ),
        .n_fields = 13,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_HTO_OPC,
            REGFIELD_kv3_HTO_DMIS,
            REGFIELD_kv3_HTO_PSYS,
            REGFIELD_kv3_HTO_DSYS,
            REGFIELD_kv3_HTO_DECCG,
            REGFIELD_kv3_HTO_SECCG,
            REGFIELD_kv3_HTO_NOMAP,
            REGFIELD_kv3_HTO_PROT,
            REGFIELD_kv3_HTO_W2CL,
            REGFIELD_kv3_HTO_A2CL,
            REGFIELD_kv3_HTO_DE,
            REGFIELD_kv3_HTO_VSFR,
            REGFIELD_kv3_HTO_PLO,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ITO] = {
        .name = "ito",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ITO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
            | 0x0000003000000000
            | 0x000000c000000000
            | 0x0000030000000000
            | 0x00000c0000000000
            | 0x0000300000000000
            | 0x0000c00000000000
            | 0x0003000000000000
            | 0x000c000000000000
            | 0x0030000000000000
            | 0x00c0000000000000
            | 0x0300000000000000
            | 0x0c00000000000000
            | 0x3000000000000000
            | 0xc000000000000000
        ),
        .n_fields = 32,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ITO_IT0,
            REGFIELD_kv3_ITO_IT1,
            REGFIELD_kv3_ITO_IT2,
            REGFIELD_kv3_ITO_IT3,
            REGFIELD_kv3_ITO_IT4,
            REGFIELD_kv3_ITO_IT5,
            REGFIELD_kv3_ITO_IT6,
            REGFIELD_kv3_ITO_IT7,
            REGFIELD_kv3_ITO_IT8,
            REGFIELD_kv3_ITO_IT9,
            REGFIELD_kv3_ITO_IT10,
            REGFIELD_kv3_ITO_IT11,
            REGFIELD_kv3_ITO_IT12,
            REGFIELD_kv3_ITO_IT13,
            REGFIELD_kv3_ITO_IT14,
            REGFIELD_kv3_ITO_IT15,
            REGFIELD_kv3_ITO_IT16,
            REGFIELD_kv3_ITO_IT17,
            REGFIELD_kv3_ITO_IT18,
            REGFIELD_kv3_ITO_IT19,
            REGFIELD_kv3_ITO_IT20,
            REGFIELD_kv3_ITO_IT21,
            REGFIELD_kv3_ITO_IT22,
            REGFIELD_kv3_ITO_IT23,
            REGFIELD_kv3_ITO_IT24,
            REGFIELD_kv3_ITO_IT25,
            REGFIELD_kv3_ITO_IT26,
            REGFIELD_kv3_ITO_IT27,
            REGFIELD_kv3_ITO_IT28,
            REGFIELD_kv3_ITO_IT29,
            REGFIELD_kv3_ITO_IT30,
            REGFIELD_kv3_ITO_IT31,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DO] = {
        .name = "do",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_DO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
            REGFIELD_kv3_DO_B1,
            REGFIELD_kv3_DO_W0,
            REGFIELD_kv3_DO_W1,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_MO] = {
        .name = "mo",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
        ),
        .n_fields = 17,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MO_MMI,
            REGFIELD_kv3_MO_RFE,
            REGFIELD_kv3_MO_STOP,
            REGFIELD_kv3_MO_SYNC,
            REGFIELD_kv3_MO_PCR,
            REGFIELD_kv3_MO_MSG,
            REGFIELD_kv3_MO_MEN,
            REGFIELD_kv3_MO_MES,
            REGFIELD_kv3_MO_CSIT,
            REGFIELD_kv3_MO_T0,
            REGFIELD_kv3_MO_T1,
            REGFIELD_kv3_MO_WD,
            REGFIELD_kv3_MO_PM0,
            REGFIELD_kv3_MO_PM1,
            REGFIELD_kv3_MO_PM2,
            REGFIELD_kv3_MO_PM3,
            REGFIELD_kv3_MO_PMIT,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_PSO] = {
        .name = "pso",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PSO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
            | 0x0000003000000000
            | 0x000000c000000000
            | 0x0000030000000000
            | 0x00000c0000000000
            | 0x0000300000000000
            | 0x0000c00000000000
            | 0x0003000000000000
        ),
        .n_fields = 25,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PSO_PL0,
            REGFIELD_kv3_PSO_PL1,
            REGFIELD_kv3_PSO_ET,
            REGFIELD_kv3_PSO_HTD,
            REGFIELD_kv3_PSO_IE,
            REGFIELD_kv3_PSO_HLE,
            REGFIELD_kv3_PSO_SRE,
            REGFIELD_kv3_PSO_DAUS,
            REGFIELD_kv3_PSO_ICE,
            REGFIELD_kv3_PSO_USE,
            REGFIELD_kv3_PSO_DCE,
            REGFIELD_kv3_PSO_MME,
            REGFIELD_kv3_PSO_IL0,
            REGFIELD_kv3_PSO_IL1,
            REGFIELD_kv3_PSO_VS0,
            REGFIELD_kv3_PSO_VS1,
            REGFIELD_kv3_PSO_V64,
            REGFIELD_kv3_PSO_L2E,
            REGFIELD_kv3_PSO_SME,
            REGFIELD_kv3_PSO_SMR,
            REGFIELD_kv3_PSO_PMJ0,
            REGFIELD_kv3_PSO_PMJ1,
            REGFIELD_kv3_PSO_PMJ2,
            REGFIELD_kv3_PSO_PMJ3,
            REGFIELD_kv3_PSO_MMUP,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES38] = {
        .name = "res38",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 304,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES39] = {
        .name = "res39",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 312,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DC] = {
        .name = "dc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_DC) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000001
            | 0x000000000000007e
            | 0x0000000000000080
            | 0x0000000000003f00
            | 0x0000000000004000
            | 0x00000000001f8000
            | 0x0000000000200000
            | 0x000000000fc00000
        ),
        .n_fields = 8,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DC_BE0,
            REGFIELD_kv3_DC_BR0,
            REGFIELD_kv3_DC_BE1,
            REGFIELD_kv3_DC_BR1,
            REGFIELD_kv3_DC_WE0,
            REGFIELD_kv3_DC_WR0,
            REGFIELD_kv3_DC_WE1,
            REGFIELD_kv3_DC_WR1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DBA0] = {
        .name = "dba0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA0) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DBA0_DBA0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DBA1] = {
        .name = "dba1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA1) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DBA1_DBA1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DWA0] = {
        .name = "dwa0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA0) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DWA0_DWA0,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DWA1] = {
        .name = "dwa1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA1) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DWA1_DWA1,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_MES] = {
        .name = "mes",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_MES) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
        ),
        .n_fields = 10,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MES_PSE,
            REGFIELD_kv3_MES_PILSY,
            REGFIELD_kv3_MES_PILDE,
            REGFIELD_kv3_MES_PILPA,
            REGFIELD_kv3_MES_DSE,
            REGFIELD_kv3_MES_DILSY,
            REGFIELD_kv3_MES_DILDE,
            REGFIELD_kv3_MES_DILPA,
            REGFIELD_kv3_MES_DDEE,
            REGFIELD_kv3_MES_DSYE,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_WS] = {
        .name = "ws",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_WS) + 0,
        .reset = 0x00000007,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x0000000000000004
        ),
        .n_fields = 3,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_WS_WU0,
            REGFIELD_kv3_WS_WU1,
            REGFIELD_kv3_WS_WU2,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DC0] = {
        .name = "dc0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_0) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DC1] = {
        .name = "dc1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_1) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DC2] = {
        .name = "dc2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_2) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DC3] = {
        .name = "dc3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_3) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DBA2] = {
        .name = "dba2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA2) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DBA3] = {
        .name = "dba3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA3) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DWA2] = {
        .name = "dwa2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA2) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_DWA3] = {
        .name = "dwa3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA3) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_RES55] = {
        .name = "res55",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 440,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES56] = {
        .name = "res56",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 448,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES57] = {
        .name = "res57",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 456,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES58] = {
        .name = "res58",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 464,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES59] = {
        .name = "res59",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 472,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES60] = {
        .name = "res60",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 480,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES61] = {
        .name = "res61",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 488,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES62] = {
        .name = "res62",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 496,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES63] = {
        .name = "res63",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 504,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPC_PL0] = {
        .name = "spc_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 512,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPC_PL1] = {
        .name = "spc_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 520,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPC_PL2] = {
        .name = "spc_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 528,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPC_PL3] = {
        .name = "spc_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 536,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPS_PL0] = {
        .name = "sps_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL0) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SPS_PL0_PL,
            REGFIELD_kv3_SPS_PL0_ET,
            REGFIELD_kv3_SPS_PL0_HTD,
            REGFIELD_kv3_SPS_PL0_IE,
            REGFIELD_kv3_SPS_PL0_HLE,
            REGFIELD_kv3_SPS_PL0_SRE,
            REGFIELD_kv3_SPS_PL0_DAUS,
            REGFIELD_kv3_SPS_PL0_ICE,
            REGFIELD_kv3_SPS_PL0_USE,
            REGFIELD_kv3_SPS_PL0_DCE,
            REGFIELD_kv3_SPS_PL0_MME,
            REGFIELD_kv3_SPS_PL0_IL,
            REGFIELD_kv3_SPS_PL0_VS,
            REGFIELD_kv3_SPS_PL0_V64,
            REGFIELD_kv3_SPS_PL0_L2E,
            REGFIELD_kv3_SPS_PL0_SME,
            REGFIELD_kv3_SPS_PL0_SMR,
            REGFIELD_kv3_SPS_PL0_PMJ,
            REGFIELD_kv3_SPS_PL0_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPS_PL1] = {
        .name = "sps_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL1) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SPS_PL1_PL,
            REGFIELD_kv3_SPS_PL1_ET,
            REGFIELD_kv3_SPS_PL1_HTD,
            REGFIELD_kv3_SPS_PL1_IE,
            REGFIELD_kv3_SPS_PL1_HLE,
            REGFIELD_kv3_SPS_PL1_SRE,
            REGFIELD_kv3_SPS_PL1_DAUS,
            REGFIELD_kv3_SPS_PL1_ICE,
            REGFIELD_kv3_SPS_PL1_USE,
            REGFIELD_kv3_SPS_PL1_DCE,
            REGFIELD_kv3_SPS_PL1_MME,
            REGFIELD_kv3_SPS_PL1_IL,
            REGFIELD_kv3_SPS_PL1_VS,
            REGFIELD_kv3_SPS_PL1_V64,
            REGFIELD_kv3_SPS_PL1_L2E,
            REGFIELD_kv3_SPS_PL1_SME,
            REGFIELD_kv3_SPS_PL1_SMR,
            REGFIELD_kv3_SPS_PL1_PMJ,
            REGFIELD_kv3_SPS_PL1_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPS_PL2] = {
        .name = "sps_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL2) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SPS_PL2_PL,
            REGFIELD_kv3_SPS_PL2_ET,
            REGFIELD_kv3_SPS_PL2_HTD,
            REGFIELD_kv3_SPS_PL2_IE,
            REGFIELD_kv3_SPS_PL2_HLE,
            REGFIELD_kv3_SPS_PL2_SRE,
            REGFIELD_kv3_SPS_PL2_DAUS,
            REGFIELD_kv3_SPS_PL2_ICE,
            REGFIELD_kv3_SPS_PL2_USE,
            REGFIELD_kv3_SPS_PL2_DCE,
            REGFIELD_kv3_SPS_PL2_MME,
            REGFIELD_kv3_SPS_PL2_IL,
            REGFIELD_kv3_SPS_PL2_VS,
            REGFIELD_kv3_SPS_PL2_V64,
            REGFIELD_kv3_SPS_PL2_L2E,
            REGFIELD_kv3_SPS_PL2_SME,
            REGFIELD_kv3_SPS_PL2_SMR,
            REGFIELD_kv3_SPS_PL2_PMJ,
            REGFIELD_kv3_SPS_PL2_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPS_PL3] = {
        .name = "sps_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SPS_PL3) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SPS_PL3_PL,
            REGFIELD_kv3_SPS_PL3_ET,
            REGFIELD_kv3_SPS_PL3_HTD,
            REGFIELD_kv3_SPS_PL3_IE,
            REGFIELD_kv3_SPS_PL3_HLE,
            REGFIELD_kv3_SPS_PL3_SRE,
            REGFIELD_kv3_SPS_PL3_DAUS,
            REGFIELD_kv3_SPS_PL3_ICE,
            REGFIELD_kv3_SPS_PL3_USE,
            REGFIELD_kv3_SPS_PL3_DCE,
            REGFIELD_kv3_SPS_PL3_MME,
            REGFIELD_kv3_SPS_PL3_IL,
            REGFIELD_kv3_SPS_PL3_VS,
            REGFIELD_kv3_SPS_PL3_V64,
            REGFIELD_kv3_SPS_PL3_L2E,
            REGFIELD_kv3_SPS_PL3_SME,
            REGFIELD_kv3_SPS_PL3_SMR,
            REGFIELD_kv3_SPS_PL3_PMJ,
            REGFIELD_kv3_SPS_PL3_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EA_PL0] = {
        .name = "ea_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 576,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EA_PL1] = {
        .name = "ea_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 584,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EA_PL2] = {
        .name = "ea_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 592,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EA_PL3] = {
        .name = "ea_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 600,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EV_PL0] = {
        .name = "ev_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 608,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EV_PL1] = {
        .name = "ev_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 616,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EV_PL2] = {
        .name = "ev_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 624,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EV_PL3] = {
        .name = "ev_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 632,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR_PL0] = {
        .name = "sr_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 640,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR_PL1] = {
        .name = "sr_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 648,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR_PL2] = {
        .name = "sr_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 656,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR_PL3] = {
        .name = "sr_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 664,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ES_PL0] = {
        .name = "es_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL0) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 26,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL0_EC,
            REGFIELD_kv3_ES_PL0_OAPL,
            REGFIELD_kv3_ES_PL0_ED,
            REGFIELD_kv3_ES_PL0_ORPL,
            REGFIELD_kv3_ES_PL0_PTAPL,
            REGFIELD_kv3_ES_PL0_PTRPL,
            REGFIELD_kv3_ES_PL0_DC,
            REGFIELD_kv3_ES_PL0_ITN,
            REGFIELD_kv3_ES_PL0_HTC,
            REGFIELD_kv3_ES_PL0_SN,
            REGFIELD_kv3_ES_PL0_BN,
            REGFIELD_kv3_ES_PL0_WN,
            REGFIELD_kv3_ES_PL0_SFRT,
            REGFIELD_kv3_ES_PL0_ITL,
            REGFIELD_kv3_ES_PL0_SFRI,
            REGFIELD_kv3_ES_PL0_ITI,
            REGFIELD_kv3_ES_PL0_GPRP,
            REGFIELD_kv3_ES_PL0_SFRP,
            REGFIELD_kv3_ES_PL0_DHT,
            REGFIELD_kv3_ES_PL0_RWX,
            REGFIELD_kv3_ES_PL0_NTA,
            REGFIELD_kv3_ES_PL0_UCA,
            REGFIELD_kv3_ES_PL0_AS,
            REGFIELD_kv3_ES_PL0_BS,
            REGFIELD_kv3_ES_PL0_DRI,
            REGFIELD_kv3_ES_PL0_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_ES_PL1] = {
        .name = "es_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL1) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 26,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL1_EC,
            REGFIELD_kv3_ES_PL1_OAPL,
            REGFIELD_kv3_ES_PL1_ED,
            REGFIELD_kv3_ES_PL1_ORPL,
            REGFIELD_kv3_ES_PL1_PTAPL,
            REGFIELD_kv3_ES_PL1_PTRPL,
            REGFIELD_kv3_ES_PL1_DC,
            REGFIELD_kv3_ES_PL1_ITN,
            REGFIELD_kv3_ES_PL1_HTC,
            REGFIELD_kv3_ES_PL1_SN,
            REGFIELD_kv3_ES_PL1_BN,
            REGFIELD_kv3_ES_PL1_WN,
            REGFIELD_kv3_ES_PL1_SFRT,
            REGFIELD_kv3_ES_PL1_ITL,
            REGFIELD_kv3_ES_PL1_SFRI,
            REGFIELD_kv3_ES_PL1_ITI,
            REGFIELD_kv3_ES_PL1_GPRP,
            REGFIELD_kv3_ES_PL1_SFRP,
            REGFIELD_kv3_ES_PL1_DHT,
            REGFIELD_kv3_ES_PL1_RWX,
            REGFIELD_kv3_ES_PL1_NTA,
            REGFIELD_kv3_ES_PL1_UCA,
            REGFIELD_kv3_ES_PL1_AS,
            REGFIELD_kv3_ES_PL1_BS,
            REGFIELD_kv3_ES_PL1_DRI,
            REGFIELD_kv3_ES_PL1_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_ES_PL2] = {
        .name = "es_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL2) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 26,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL2_EC,
            REGFIELD_kv3_ES_PL2_OAPL,
            REGFIELD_kv3_ES_PL2_ED,
            REGFIELD_kv3_ES_PL2_ORPL,
            REGFIELD_kv3_ES_PL2_PTAPL,
            REGFIELD_kv3_ES_PL2_PTRPL,
            REGFIELD_kv3_ES_PL2_DC,
            REGFIELD_kv3_ES_PL2_ITN,
            REGFIELD_kv3_ES_PL2_HTC,
            REGFIELD_kv3_ES_PL2_SN,
            REGFIELD_kv3_ES_PL2_BN,
            REGFIELD_kv3_ES_PL2_WN,
            REGFIELD_kv3_ES_PL2_SFRT,
            REGFIELD_kv3_ES_PL2_ITL,
            REGFIELD_kv3_ES_PL2_SFRI,
            REGFIELD_kv3_ES_PL2_ITI,
            REGFIELD_kv3_ES_PL2_GPRP,
            REGFIELD_kv3_ES_PL2_SFRP,
            REGFIELD_kv3_ES_PL2_DHT,
            REGFIELD_kv3_ES_PL2_RWX,
            REGFIELD_kv3_ES_PL2_NTA,
            REGFIELD_kv3_ES_PL2_UCA,
            REGFIELD_kv3_ES_PL2_AS,
            REGFIELD_kv3_ES_PL2_BS,
            REGFIELD_kv3_ES_PL2_DRI,
            REGFIELD_kv3_ES_PL2_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_ES_PL3] = {
        .name = "es_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL3) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 26,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL3_EC,
            REGFIELD_kv3_ES_PL3_OAPL,
            REGFIELD_kv3_ES_PL3_ED,
            REGFIELD_kv3_ES_PL3_ORPL,
            REGFIELD_kv3_ES_PL3_PTAPL,
            REGFIELD_kv3_ES_PL3_PTRPL,
            REGFIELD_kv3_ES_PL3_DC,
            REGFIELD_kv3_ES_PL3_ITN,
            REGFIELD_kv3_ES_PL3_HTC,
            REGFIELD_kv3_ES_PL3_SN,
            REGFIELD_kv3_ES_PL3_BN,
            REGFIELD_kv3_ES_PL3_WN,
            REGFIELD_kv3_ES_PL3_SFRT,
            REGFIELD_kv3_ES_PL3_ITL,
            REGFIELD_kv3_ES_PL3_SFRI,
            REGFIELD_kv3_ES_PL3_ITI,
            REGFIELD_kv3_ES_PL3_GPRP,
            REGFIELD_kv3_ES_PL3_SFRP,
            REGFIELD_kv3_ES_PL3_DHT,
            REGFIELD_kv3_ES_PL3_RWX,
            REGFIELD_kv3_ES_PL3_NTA,
            REGFIELD_kv3_ES_PL3_UCA,
            REGFIELD_kv3_ES_PL3_AS,
            REGFIELD_kv3_ES_PL3_BS,
            REGFIELD_kv3_ES_PL3_DRI,
            REGFIELD_kv3_ES_PL3_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SID_PL0] = {
        .name = "sid_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL0) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SID_PL1] = {
        .name = "sid_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL1) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SID_PL2] = {
        .name = "sid_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL2) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SID_PL3] = {
        .name = "sid_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID_PL3) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SR1_PL0] = {
        .name = "sr1_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 736,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SR1_PL1] = {
        .name = "sr1_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 744,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SR1_PL2] = {
        .name = "sr1_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 752,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SR1_PL3] = {
        .name = "sr1_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 760,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_SYOW] = {
        .name = "syow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SYO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SYOW_Q0,
            REGFIELD_kv3_SYOW_Q1,
            REGFIELD_kv3_SYOW_Q2,
            REGFIELD_kv3_SYOW_Q3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_HTOW] = {
        .name = "htow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_HTO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
        ),
        .n_fields = 13,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_HTOW_OPC,
            REGFIELD_kv3_HTOW_DMIS,
            REGFIELD_kv3_HTOW_PSYS,
            REGFIELD_kv3_HTOW_DSYS,
            REGFIELD_kv3_HTOW_DECCG,
            REGFIELD_kv3_HTOW_SECCG,
            REGFIELD_kv3_HTOW_NOMAP,
            REGFIELD_kv3_HTOW_PROT,
            REGFIELD_kv3_HTOW_W2CL,
            REGFIELD_kv3_HTOW_A2CL,
            REGFIELD_kv3_HTOW_DE,
            REGFIELD_kv3_HTOW_VSFR,
            REGFIELD_kv3_HTOW_PLO,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ITOW] = {
        .name = "itow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ITO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
            | 0x0000003000000000
            | 0x000000c000000000
            | 0x0000030000000000
            | 0x00000c0000000000
            | 0x0000300000000000
            | 0x0000c00000000000
            | 0x0003000000000000
            | 0x000c000000000000
            | 0x0030000000000000
            | 0x00c0000000000000
            | 0x0300000000000000
            | 0x0c00000000000000
            | 0x3000000000000000
            | 0xc000000000000000
        ),
        .n_fields = 32,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ITOW_IT0,
            REGFIELD_kv3_ITOW_IT1,
            REGFIELD_kv3_ITOW_IT2,
            REGFIELD_kv3_ITOW_IT3,
            REGFIELD_kv3_ITOW_IT4,
            REGFIELD_kv3_ITOW_IT5,
            REGFIELD_kv3_ITOW_IT6,
            REGFIELD_kv3_ITOW_IT7,
            REGFIELD_kv3_ITOW_IT8,
            REGFIELD_kv3_ITOW_IT9,
            REGFIELD_kv3_ITOW_IT10,
            REGFIELD_kv3_ITOW_IT11,
            REGFIELD_kv3_ITOW_IT12,
            REGFIELD_kv3_ITOW_IT13,
            REGFIELD_kv3_ITOW_IT14,
            REGFIELD_kv3_ITOW_IT15,
            REGFIELD_kv3_ITOW_IT16,
            REGFIELD_kv3_ITOW_IT17,
            REGFIELD_kv3_ITOW_IT18,
            REGFIELD_kv3_ITOW_IT19,
            REGFIELD_kv3_ITOW_IT20,
            REGFIELD_kv3_ITOW_IT21,
            REGFIELD_kv3_ITOW_IT22,
            REGFIELD_kv3_ITOW_IT23,
            REGFIELD_kv3_ITOW_IT24,
            REGFIELD_kv3_ITOW_IT25,
            REGFIELD_kv3_ITOW_IT26,
            REGFIELD_kv3_ITOW_IT27,
            REGFIELD_kv3_ITOW_IT28,
            REGFIELD_kv3_ITOW_IT29,
            REGFIELD_kv3_ITOW_IT30,
            REGFIELD_kv3_ITOW_IT31,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_DOW] = {
        .name = "dow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_DO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DOW_B0,
            REGFIELD_kv3_DOW_B1,
            REGFIELD_kv3_DOW_W0,
            REGFIELD_kv3_DOW_W1,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_MOW] = {
        .name = "mow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
        ),
        .n_fields = 17,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MOW_MMI,
            REGFIELD_kv3_MOW_RFE,
            REGFIELD_kv3_MOW_STOP,
            REGFIELD_kv3_MOW_SYNC,
            REGFIELD_kv3_MOW_PCR,
            REGFIELD_kv3_MOW_MSG,
            REGFIELD_kv3_MOW_MEN,
            REGFIELD_kv3_MOW_MES,
            REGFIELD_kv3_MOW_CSIT,
            REGFIELD_kv3_MOW_T0,
            REGFIELD_kv3_MOW_T1,
            REGFIELD_kv3_MOW_WD,
            REGFIELD_kv3_MOW_PM0,
            REGFIELD_kv3_MOW_PM1,
            REGFIELD_kv3_MOW_PM2,
            REGFIELD_kv3_MOW_PM3,
            REGFIELD_kv3_MOW_PMIT,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_PSOW] = {
        .name = "psow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PSO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
            | 0x0000003000000000
            | 0x000000c000000000
            | 0x0000030000000000
            | 0x00000c0000000000
            | 0x0000300000000000
            | 0x0000c00000000000
            | 0x0003000000000000
        ),
        .n_fields = 25,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PSOW_PL0,
            REGFIELD_kv3_PSOW_PL1,
            REGFIELD_kv3_PSOW_ET,
            REGFIELD_kv3_PSOW_HTD,
            REGFIELD_kv3_PSOW_IE,
            REGFIELD_kv3_PSOW_HLE,
            REGFIELD_kv3_PSOW_SRE,
            REGFIELD_kv3_PSOW_DAUS,
            REGFIELD_kv3_PSOW_ICE,
            REGFIELD_kv3_PSOW_USE,
            REGFIELD_kv3_PSOW_DCE,
            REGFIELD_kv3_PSOW_MME,
            REGFIELD_kv3_PSOW_IL0,
            REGFIELD_kv3_PSOW_IL1,
            REGFIELD_kv3_PSOW_VS0,
            REGFIELD_kv3_PSOW_VS1,
            REGFIELD_kv3_PSOW_V64,
            REGFIELD_kv3_PSOW_L2E,
            REGFIELD_kv3_PSOW_SME,
            REGFIELD_kv3_PSOW_SMR,
            REGFIELD_kv3_PSOW_PMJ0,
            REGFIELD_kv3_PSOW_PMJ1,
            REGFIELD_kv3_PSOW_PMJ2,
            REGFIELD_kv3_PSOW_PMJ3,
            REGFIELD_kv3_PSOW_MMUP,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES102] = {
        .name = "res102",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 816,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES103] = {
        .name = "res103",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 824,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES104] = {
        .name = "res104",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 832,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES105] = {
        .name = "res105",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 840,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES106] = {
        .name = "res106",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 848,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES107] = {
        .name = "res107",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 856,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES108] = {
        .name = "res108",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 864,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES109] = {
        .name = "res109",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 872,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES110] = {
        .name = "res110",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 880,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES111] = {
        .name = "res111",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 888,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES112] = {
        .name = "res112",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 896,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES113] = {
        .name = "res113",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 904,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES114] = {
        .name = "res114",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 912,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES115] = {
        .name = "res115",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 920,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES116] = {
        .name = "res116",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 928,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES117] = {
        .name = "res117",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 936,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES118] = {
        .name = "res118",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 944,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES119] = {
        .name = "res119",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 952,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES120] = {
        .name = "res120",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 960,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES121] = {
        .name = "res121",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 968,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES122] = {
        .name = "res122",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 976,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES123] = {
        .name = "res123",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 984,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES124] = {
        .name = "res124",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 992,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES125] = {
        .name = "res125",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1000,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES126] = {
        .name = "res126",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1008,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES127] = {
        .name = "res127",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1016,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPC] = {
        .name = "spc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1024,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES129] = {
        .name = "res129",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1032,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES130] = {
        .name = "res130",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1040,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES131] = {
        .name = "res131",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1048,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SPS] = {
        .name = "sps",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_SPS) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x0000000000000004
            | 0x0000000000000008
            | 0x0000000000000010
            | 0x0000000000000020
            | 0x0000000000000040
            | 0x0000000000000080
            | 0x0000000000000100
            | 0x0000000000000200
            | 0x0000000000000400
            | 0x0000000000000800
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000010000
            | 0x0000000000020000
            | 0x0000000000040000
            | 0x0000000000080000
            | 0x0000000000f00000
            | 0x0000000001000000
        ),
        .n_fields = 19,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SPS_PL,
            REGFIELD_kv3_SPS_ET,
            REGFIELD_kv3_SPS_HTD,
            REGFIELD_kv3_SPS_IE,
            REGFIELD_kv3_SPS_HLE,
            REGFIELD_kv3_SPS_SRE,
            REGFIELD_kv3_SPS_DAUS,
            REGFIELD_kv3_SPS_ICE,
            REGFIELD_kv3_SPS_USE,
            REGFIELD_kv3_SPS_DCE,
            REGFIELD_kv3_SPS_MME,
            REGFIELD_kv3_SPS_IL,
            REGFIELD_kv3_SPS_VS,
            REGFIELD_kv3_SPS_V64,
            REGFIELD_kv3_SPS_L2E,
            REGFIELD_kv3_SPS_SME,
            REGFIELD_kv3_SPS_SMR,
            REGFIELD_kv3_SPS_PMJ,
            REGFIELD_kv3_SPS_MMUP,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES133] = {
        .name = "res133",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1064,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES134] = {
        .name = "res134",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1072,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES135] = {
        .name = "res135",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1080,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EA] = {
        .name = "ea",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1088,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES137] = {
        .name = "res137",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1096,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES138] = {
        .name = "res138",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1104,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES139] = {
        .name = "res139",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1112,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_EV] = {
        .name = "ev",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1120,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES141] = {
        .name = "res141",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1128,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES142] = {
        .name = "res142",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1136,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES143] = {
        .name = "res143",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1144,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR] = {
        .name = "sr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1152,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES145] = {
        .name = "res145",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1160,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES146] = {
        .name = "res146",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1168,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES147] = {
        .name = "res147",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1176,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_ES] = {
        .name = "es",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000004000
            | 0x0000000000008000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 26,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_EC,
            REGFIELD_kv3_ES_OAPL,
            REGFIELD_kv3_ES_ED,
            REGFIELD_kv3_ES_ORPL,
            REGFIELD_kv3_ES_PTAPL,
            REGFIELD_kv3_ES_PTRPL,
            REGFIELD_kv3_ES_DC,
            REGFIELD_kv3_ES_ITN,
            REGFIELD_kv3_ES_HTC,
            REGFIELD_kv3_ES_SN,
            REGFIELD_kv3_ES_BN,
            REGFIELD_kv3_ES_WN,
            REGFIELD_kv3_ES_SFRT,
            REGFIELD_kv3_ES_ITL,
            REGFIELD_kv3_ES_SFRI,
            REGFIELD_kv3_ES_ITI,
            REGFIELD_kv3_ES_GPRP,
            REGFIELD_kv3_ES_SFRP,
            REGFIELD_kv3_ES_DHT,
            REGFIELD_kv3_ES_RWX,
            REGFIELD_kv3_ES_NTA,
            REGFIELD_kv3_ES_UCA,
            REGFIELD_kv3_ES_AS,
            REGFIELD_kv3_ES_BS,
            REGFIELD_kv3_ES_DRI,
            REGFIELD_kv3_ES_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_RES149] = {
        .name = "res149",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1192,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES150] = {
        .name = "res150",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1200,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES151] = {
        .name = "res151",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1208,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SID] = {
        .name = "sid",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SID) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_RES153] = {
        .name = "res153",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1224,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES154] = {
        .name = "res154",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1232,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES155] = {
        .name = "res155",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1240,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_SR1] = {
        .name = "sr1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1248,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1,
    },
    [REG_kv3_RES157] = {
        .name = "res157",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1256,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES158] = {
        .name = "res158",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1264,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES159] = {
        .name = "res159",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1272,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES160] = {
        .name = "res160",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1280,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES161] = {
        .name = "res161",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1288,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES162] = {
        .name = "res162",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1296,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES163] = {
        .name = "res163",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1304,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES164] = {
        .name = "res164",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1312,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES165] = {
        .name = "res165",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1320,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES166] = {
        .name = "res166",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1328,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES167] = {
        .name = "res167",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1336,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES168] = {
        .name = "res168",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1344,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES169] = {
        .name = "res169",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1352,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES170] = {
        .name = "res170",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1360,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES171] = {
        .name = "res171",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1368,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES172] = {
        .name = "res172",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1376,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES173] = {
        .name = "res173",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1384,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES174] = {
        .name = "res174",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1392,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES175] = {
        .name = "res175",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1400,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES176] = {
        .name = "res176",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1408,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES177] = {
        .name = "res177",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1416,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES178] = {
        .name = "res178",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1424,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES179] = {
        .name = "res179",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1432,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES180] = {
        .name = "res180",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1440,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES181] = {
        .name = "res181",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1448,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES182] = {
        .name = "res182",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1456,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES183] = {
        .name = "res183",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1464,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES184] = {
        .name = "res184",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1472,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES185] = {
        .name = "res185",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1480,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES186] = {
        .name = "res186",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1488,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES187] = {
        .name = "res187",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1496,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES188] = {
        .name = "res188",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1504,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES189] = {
        .name = "res189",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1512,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES190] = {
        .name = "res190",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1520,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES191] = {
        .name = "res191",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1528,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES192] = {
        .name = "res192",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1536,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES193] = {
        .name = "res193",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1544,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES194] = {
        .name = "res194",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1552,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES195] = {
        .name = "res195",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1560,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES196] = {
        .name = "res196",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1568,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES197] = {
        .name = "res197",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1576,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES198] = {
        .name = "res198",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1584,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES199] = {
        .name = "res199",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1592,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES200] = {
        .name = "res200",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1600,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES201] = {
        .name = "res201",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1608,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES202] = {
        .name = "res202",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1616,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES203] = {
        .name = "res203",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1624,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES204] = {
        .name = "res204",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1632,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES205] = {
        .name = "res205",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1640,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES206] = {
        .name = "res206",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1648,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES207] = {
        .name = "res207",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1656,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES208] = {
        .name = "res208",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1664,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES209] = {
        .name = "res209",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1672,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES210] = {
        .name = "res210",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1680,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES211] = {
        .name = "res211",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1688,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES212] = {
        .name = "res212",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1696,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES213] = {
        .name = "res213",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1704,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES214] = {
        .name = "res214",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1712,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES215] = {
        .name = "res215",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1720,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES216] = {
        .name = "res216",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1728,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES217] = {
        .name = "res217",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1736,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES218] = {
        .name = "res218",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1744,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES219] = {
        .name = "res219",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1752,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES220] = {
        .name = "res220",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1760,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES221] = {
        .name = "res221",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1768,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES222] = {
        .name = "res222",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1776,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES223] = {
        .name = "res223",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1784,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES224] = {
        .name = "res224",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1792,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES225] = {
        .name = "res225",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1800,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES226] = {
        .name = "res226",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1808,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES227] = {
        .name = "res227",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1816,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES228] = {
        .name = "res228",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1824,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES229] = {
        .name = "res229",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1832,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES230] = {
        .name = "res230",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1840,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES231] = {
        .name = "res231",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1848,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES232] = {
        .name = "res232",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1856,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES233] = {
        .name = "res233",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1864,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES234] = {
        .name = "res234",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1872,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES235] = {
        .name = "res235",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1880,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES236] = {
        .name = "res236",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1888,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES237] = {
        .name = "res237",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1896,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES238] = {
        .name = "res238",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1904,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES239] = {
        .name = "res239",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1912,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES240] = {
        .name = "res240",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1920,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES241] = {
        .name = "res241",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1928,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES242] = {
        .name = "res242",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1936,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES243] = {
        .name = "res243",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1944,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES244] = {
        .name = "res244",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1952,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES245] = {
        .name = "res245",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1960,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES246] = {
        .name = "res246",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1968,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES247] = {
        .name = "res247",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1976,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES248] = {
        .name = "res248",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1984,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES249] = {
        .name = "res249",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1992,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES250] = {
        .name = "res250",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2000,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES251] = {
        .name = "res251",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2008,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES252] = {
        .name = "res252",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2016,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES253] = {
        .name = "res253",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2024,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES254] = {
        .name = "res254",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2032,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_RES255] = {
        .name = "res255",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2040,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR0] = {
        .name = "vsfr0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2048,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR1] = {
        .name = "vsfr1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2056,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR2] = {
        .name = "vsfr2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2064,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR3] = {
        .name = "vsfr3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2072,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR4] = {
        .name = "vsfr4",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2080,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR5] = {
        .name = "vsfr5",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2088,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR6] = {
        .name = "vsfr6",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2096,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR7] = {
        .name = "vsfr7",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2104,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR8] = {
        .name = "vsfr8",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2112,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR9] = {
        .name = "vsfr9",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2120,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR10] = {
        .name = "vsfr10",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2128,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR11] = {
        .name = "vsfr11",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2136,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR12] = {
        .name = "vsfr12",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2144,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR13] = {
        .name = "vsfr13",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2152,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR14] = {
        .name = "vsfr14",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2160,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR15] = {
        .name = "vsfr15",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2168,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR16] = {
        .name = "vsfr16",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2176,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR17] = {
        .name = "vsfr17",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2184,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR18] = {
        .name = "vsfr18",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2192,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR19] = {
        .name = "vsfr19",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2200,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR20] = {
        .name = "vsfr20",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2208,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR21] = {
        .name = "vsfr21",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2216,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR22] = {
        .name = "vsfr22",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2224,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR23] = {
        .name = "vsfr23",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2232,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR24] = {
        .name = "vsfr24",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2240,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR25] = {
        .name = "vsfr25",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2248,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR26] = {
        .name = "vsfr26",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2256,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR27] = {
        .name = "vsfr27",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2264,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR28] = {
        .name = "vsfr28",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2272,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR29] = {
        .name = "vsfr29",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2280,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR30] = {
        .name = "vsfr30",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2288,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR31] = {
        .name = "vsfr31",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2296,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR32] = {
        .name = "vsfr32",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2304,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR33] = {
        .name = "vsfr33",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2312,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR34] = {
        .name = "vsfr34",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2320,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR35] = {
        .name = "vsfr35",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2328,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR36] = {
        .name = "vsfr36",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2336,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR37] = {
        .name = "vsfr37",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2344,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR38] = {
        .name = "vsfr38",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2352,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR39] = {
        .name = "vsfr39",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2360,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR40] = {
        .name = "vsfr40",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2368,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR41] = {
        .name = "vsfr41",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2376,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR42] = {
        .name = "vsfr42",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2384,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR43] = {
        .name = "vsfr43",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2392,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR44] = {
        .name = "vsfr44",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2400,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR45] = {
        .name = "vsfr45",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2408,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR46] = {
        .name = "vsfr46",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2416,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR47] = {
        .name = "vsfr47",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2424,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR48] = {
        .name = "vsfr48",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2432,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR49] = {
        .name = "vsfr49",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2440,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR50] = {
        .name = "vsfr50",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2448,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR51] = {
        .name = "vsfr51",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2456,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR52] = {
        .name = "vsfr52",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2464,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR53] = {
        .name = "vsfr53",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2472,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR54] = {
        .name = "vsfr54",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2480,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR55] = {
        .name = "vsfr55",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2488,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR56] = {
        .name = "vsfr56",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2496,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR57] = {
        .name = "vsfr57",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2504,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR58] = {
        .name = "vsfr58",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2512,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR59] = {
        .name = "vsfr59",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2520,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR60] = {
        .name = "vsfr60",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2528,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR61] = {
        .name = "vsfr61",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2536,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR62] = {
        .name = "vsfr62",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2544,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR63] = {
        .name = "vsfr63",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2552,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR64] = {
        .name = "vsfr64",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2560,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR65] = {
        .name = "vsfr65",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2568,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR66] = {
        .name = "vsfr66",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2576,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR67] = {
        .name = "vsfr67",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2584,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR68] = {
        .name = "vsfr68",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2592,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR69] = {
        .name = "vsfr69",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2600,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR70] = {
        .name = "vsfr70",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2608,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR71] = {
        .name = "vsfr71",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2616,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR72] = {
        .name = "vsfr72",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2624,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR73] = {
        .name = "vsfr73",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2632,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR74] = {
        .name = "vsfr74",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2640,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR75] = {
        .name = "vsfr75",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2648,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR76] = {
        .name = "vsfr76",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2656,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR77] = {
        .name = "vsfr77",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2664,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR78] = {
        .name = "vsfr78",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2672,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR79] = {
        .name = "vsfr79",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2680,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR80] = {
        .name = "vsfr80",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2688,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR81] = {
        .name = "vsfr81",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2696,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR82] = {
        .name = "vsfr82",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2704,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR83] = {
        .name = "vsfr83",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2712,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR84] = {
        .name = "vsfr84",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2720,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR85] = {
        .name = "vsfr85",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2728,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR86] = {
        .name = "vsfr86",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2736,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR87] = {
        .name = "vsfr87",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2744,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR88] = {
        .name = "vsfr88",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2752,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR89] = {
        .name = "vsfr89",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2760,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR90] = {
        .name = "vsfr90",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2768,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR91] = {
        .name = "vsfr91",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2776,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR92] = {
        .name = "vsfr92",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2784,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR93] = {
        .name = "vsfr93",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2792,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR94] = {
        .name = "vsfr94",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2800,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR95] = {
        .name = "vsfr95",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2808,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR96] = {
        .name = "vsfr96",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2816,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR97] = {
        .name = "vsfr97",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2824,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR98] = {
        .name = "vsfr98",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2832,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR99] = {
        .name = "vsfr99",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2840,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR100] = {
        .name = "vsfr100",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2848,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR101] = {
        .name = "vsfr101",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2856,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR102] = {
        .name = "vsfr102",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2864,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR103] = {
        .name = "vsfr103",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2872,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR104] = {
        .name = "vsfr104",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2880,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR105] = {
        .name = "vsfr105",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2888,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR106] = {
        .name = "vsfr106",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2896,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR107] = {
        .name = "vsfr107",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2904,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR108] = {
        .name = "vsfr108",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2912,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR109] = {
        .name = "vsfr109",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2920,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR110] = {
        .name = "vsfr110",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2928,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR111] = {
        .name = "vsfr111",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2936,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR112] = {
        .name = "vsfr112",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2944,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR113] = {
        .name = "vsfr113",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2952,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR114] = {
        .name = "vsfr114",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2960,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR115] = {
        .name = "vsfr115",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2968,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR116] = {
        .name = "vsfr116",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2976,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR117] = {
        .name = "vsfr117",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2984,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR118] = {
        .name = "vsfr118",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 2992,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR119] = {
        .name = "vsfr119",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3000,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR120] = {
        .name = "vsfr120",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3008,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR121] = {
        .name = "vsfr121",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3016,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR122] = {
        .name = "vsfr122",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3024,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR123] = {
        .name = "vsfr123",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3032,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR124] = {
        .name = "vsfr124",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3040,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR125] = {
        .name = "vsfr125",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3048,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR126] = {
        .name = "vsfr126",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3056,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR127] = {
        .name = "vsfr127",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3064,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR128] = {
        .name = "vsfr128",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3072,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR129] = {
        .name = "vsfr129",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3080,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR130] = {
        .name = "vsfr130",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3088,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR131] = {
        .name = "vsfr131",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3096,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR132] = {
        .name = "vsfr132",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3104,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR133] = {
        .name = "vsfr133",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3112,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR134] = {
        .name = "vsfr134",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3120,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR135] = {
        .name = "vsfr135",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3128,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR136] = {
        .name = "vsfr136",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3136,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR137] = {
        .name = "vsfr137",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3144,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR138] = {
        .name = "vsfr138",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3152,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR139] = {
        .name = "vsfr139",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3160,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR140] = {
        .name = "vsfr140",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3168,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR141] = {
        .name = "vsfr141",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3176,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR142] = {
        .name = "vsfr142",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3184,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR143] = {
        .name = "vsfr143",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3192,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR144] = {
        .name = "vsfr144",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3200,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR145] = {
        .name = "vsfr145",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3208,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR146] = {
        .name = "vsfr146",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3216,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR147] = {
        .name = "vsfr147",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3224,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR148] = {
        .name = "vsfr148",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3232,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR149] = {
        .name = "vsfr149",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3240,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR150] = {
        .name = "vsfr150",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3248,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR151] = {
        .name = "vsfr151",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3256,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR152] = {
        .name = "vsfr152",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3264,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR153] = {
        .name = "vsfr153",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3272,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR154] = {
        .name = "vsfr154",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3280,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR155] = {
        .name = "vsfr155",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3288,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR156] = {
        .name = "vsfr156",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3296,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR157] = {
        .name = "vsfr157",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3304,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR158] = {
        .name = "vsfr158",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3312,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR159] = {
        .name = "vsfr159",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3320,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR160] = {
        .name = "vsfr160",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3328,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR161] = {
        .name = "vsfr161",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3336,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR162] = {
        .name = "vsfr162",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3344,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR163] = {
        .name = "vsfr163",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3352,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR164] = {
        .name = "vsfr164",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3360,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR165] = {
        .name = "vsfr165",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3368,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR166] = {
        .name = "vsfr166",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3376,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR167] = {
        .name = "vsfr167",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3384,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR168] = {
        .name = "vsfr168",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3392,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR169] = {
        .name = "vsfr169",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3400,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR170] = {
        .name = "vsfr170",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3408,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR171] = {
        .name = "vsfr171",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3416,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR172] = {
        .name = "vsfr172",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3424,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR173] = {
        .name = "vsfr173",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3432,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR174] = {
        .name = "vsfr174",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3440,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR175] = {
        .name = "vsfr175",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3448,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR176] = {
        .name = "vsfr176",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3456,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR177] = {
        .name = "vsfr177",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3464,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR178] = {
        .name = "vsfr178",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3472,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR179] = {
        .name = "vsfr179",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3480,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR180] = {
        .name = "vsfr180",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3488,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR181] = {
        .name = "vsfr181",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3496,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR182] = {
        .name = "vsfr182",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3504,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR183] = {
        .name = "vsfr183",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3512,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR184] = {
        .name = "vsfr184",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3520,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR185] = {
        .name = "vsfr185",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3528,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR186] = {
        .name = "vsfr186",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3536,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR187] = {
        .name = "vsfr187",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3544,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR188] = {
        .name = "vsfr188",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3552,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR189] = {
        .name = "vsfr189",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3560,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR190] = {
        .name = "vsfr190",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3568,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR191] = {
        .name = "vsfr191",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3576,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR192] = {
        .name = "vsfr192",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3584,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR193] = {
        .name = "vsfr193",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3592,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR194] = {
        .name = "vsfr194",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3600,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR195] = {
        .name = "vsfr195",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3608,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR196] = {
        .name = "vsfr196",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3616,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR197] = {
        .name = "vsfr197",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3624,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR198] = {
        .name = "vsfr198",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3632,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR199] = {
        .name = "vsfr199",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3640,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR200] = {
        .name = "vsfr200",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3648,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR201] = {
        .name = "vsfr201",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3656,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR202] = {
        .name = "vsfr202",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3664,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR203] = {
        .name = "vsfr203",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3672,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR204] = {
        .name = "vsfr204",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3680,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR205] = {
        .name = "vsfr205",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3688,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR206] = {
        .name = "vsfr206",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3696,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR207] = {
        .name = "vsfr207",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3704,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR208] = {
        .name = "vsfr208",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3712,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR209] = {
        .name = "vsfr209",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3720,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR210] = {
        .name = "vsfr210",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3728,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR211] = {
        .name = "vsfr211",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3736,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR212] = {
        .name = "vsfr212",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3744,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR213] = {
        .name = "vsfr213",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3752,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR214] = {
        .name = "vsfr214",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3760,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR215] = {
        .name = "vsfr215",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3768,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR216] = {
        .name = "vsfr216",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3776,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR217] = {
        .name = "vsfr217",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3784,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR218] = {
        .name = "vsfr218",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3792,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR219] = {
        .name = "vsfr219",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3800,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR220] = {
        .name = "vsfr220",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3808,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR221] = {
        .name = "vsfr221",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3816,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR222] = {
        .name = "vsfr222",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3824,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR223] = {
        .name = "vsfr223",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3832,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR224] = {
        .name = "vsfr224",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3840,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR225] = {
        .name = "vsfr225",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3848,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR226] = {
        .name = "vsfr226",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3856,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR227] = {
        .name = "vsfr227",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3864,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR228] = {
        .name = "vsfr228",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3872,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR229] = {
        .name = "vsfr229",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3880,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR230] = {
        .name = "vsfr230",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3888,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR231] = {
        .name = "vsfr231",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3896,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR232] = {
        .name = "vsfr232",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3904,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR233] = {
        .name = "vsfr233",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3912,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR234] = {
        .name = "vsfr234",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3920,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR235] = {
        .name = "vsfr235",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3928,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR236] = {
        .name = "vsfr236",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3936,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR237] = {
        .name = "vsfr237",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3944,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR238] = {
        .name = "vsfr238",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3952,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR239] = {
        .name = "vsfr239",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3960,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR240] = {
        .name = "vsfr240",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3968,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR241] = {
        .name = "vsfr241",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3976,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR242] = {
        .name = "vsfr242",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3984,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR243] = {
        .name = "vsfr243",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 3992,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR244] = {
        .name = "vsfr244",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4000,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR245] = {
        .name = "vsfr245",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4008,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR246] = {
        .name = "vsfr246",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4016,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR247] = {
        .name = "vsfr247",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4024,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR248] = {
        .name = "vsfr248",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4032,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR249] = {
        .name = "vsfr249",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4040,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR250] = {
        .name = "vsfr250",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4048,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR251] = {
        .name = "vsfr251",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4056,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR252] = {
        .name = "vsfr252",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4064,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR253] = {
        .name = "vsfr253",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4072,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR254] = {
        .name = "vsfr254",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4080,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_VSFR255] = {
        .name = "vsfr255",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 4088,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R0] = {
        .name = "r0",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R1] = {
        .name = "r1",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 8,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R2] = {
        .name = "r2",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 16,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R3] = {
        .name = "r3",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 24,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R4] = {
        .name = "r4",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R5] = {
        .name = "r5",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 40,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R6] = {
        .name = "r6",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 48,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R7] = {
        .name = "r7",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 56,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R8] = {
        .name = "r8",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R9] = {
        .name = "r9",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 72,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R10] = {
        .name = "r10",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 80,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R11] = {
        .name = "r11",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 88,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R12] = {
        .name = "r12",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R13] = {
        .name = "r13",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 104,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R14] = {
        .name = "r14",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 112,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R15] = {
        .name = "r15",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 120,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R16] = {
        .name = "r16",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R17] = {
        .name = "r17",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 136,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R18] = {
        .name = "r18",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 144,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R19] = {
        .name = "r19",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R20] = {
        .name = "r20",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R21] = {
        .name = "r21",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 168,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R22] = {
        .name = "r22",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 176,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R23] = {
        .name = "r23",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 184,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R24] = {
        .name = "r24",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R25] = {
        .name = "r25",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 200,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R26] = {
        .name = "r26",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 208,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R27] = {
        .name = "r27",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R28] = {
        .name = "r28",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R29] = {
        .name = "r29",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 232,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R30] = {
        .name = "r30",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 240,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R31] = {
        .name = "r31",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 248,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R32] = {
        .name = "r32",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R33] = {
        .name = "r33",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 264,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R34] = {
        .name = "r34",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 272,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R35] = {
        .name = "r35",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R36] = {
        .name = "r36",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R37] = {
        .name = "r37",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 296,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R38] = {
        .name = "r38",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 304,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R39] = {
        .name = "r39",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 312,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R40] = {
        .name = "r40",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R41] = {
        .name = "r41",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 328,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R42] = {
        .name = "r42",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 336,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R43] = {
        .name = "r43",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R44] = {
        .name = "r44",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R45] = {
        .name = "r45",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 360,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R46] = {
        .name = "r46",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 368,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R47] = {
        .name = "r47",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 376,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R48] = {
        .name = "r48",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R49] = {
        .name = "r49",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 392,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R50] = {
        .name = "r50",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 400,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R51] = {
        .name = "r51",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R52] = {
        .name = "r52",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R53] = {
        .name = "r53",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 424,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R54] = {
        .name = "r54",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 432,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R55] = {
        .name = "r55",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 440,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R56] = {
        .name = "r56",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R57] = {
        .name = "r57",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 456,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R58] = {
        .name = "r58",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 464,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R59] = {
        .name = "r59",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R60] = {
        .name = "r60",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R61] = {
        .name = "r61",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 488,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R62] = {
        .name = "r62",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 496,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_R63] = {
        .name = "r63",
        .regfile = REGFILE_kv3_GPR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 504,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P0] = {
        .name = "p0",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P2] = {
        .name = "p2",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 16,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P4] = {
        .name = "p4",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P6] = {
        .name = "p6",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 48,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P8] = {
        .name = "p8",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P10] = {
        .name = "p10",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 80,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P12] = {
        .name = "p12",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P14] = {
        .name = "p14",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 112,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P16] = {
        .name = "p16",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P18] = {
        .name = "p18",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 144,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P20] = {
        .name = "p20",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P22] = {
        .name = "p22",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 176,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P24] = {
        .name = "p24",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P26] = {
        .name = "p26",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 208,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P28] = {
        .name = "p28",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P30] = {
        .name = "p30",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 240,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P32] = {
        .name = "p32",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P34] = {
        .name = "p34",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 272,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P36] = {
        .name = "p36",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P38] = {
        .name = "p38",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 304,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P40] = {
        .name = "p40",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P42] = {
        .name = "p42",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 336,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P44] = {
        .name = "p44",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P46] = {
        .name = "p46",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 368,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P48] = {
        .name = "p48",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P50] = {
        .name = "p50",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 400,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P52] = {
        .name = "p52",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P54] = {
        .name = "p54",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 432,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P56] = {
        .name = "p56",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P58] = {
        .name = "p58",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 464,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P60] = {
        .name = "p60",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_P62] = {
        .name = "p62",
        .regfile = REGFILE_kv3_PGR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 496,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q0] = {
        .name = "q0",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q4] = {
        .name = "q4",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q8] = {
        .name = "q8",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q12] = {
        .name = "q12",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q16] = {
        .name = "q16",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q20] = {
        .name = "q20",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q24] = {
        .name = "q24",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q28] = {
        .name = "q28",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q32] = {
        .name = "q32",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q36] = {
        .name = "q36",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q40] = {
        .name = "q40",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q44] = {
        .name = "q44",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q48] = {
        .name = "q48",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q52] = {
        .name = "q52",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q56] = {
        .name = "q56",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_Q60] = {
        .name = "q60",
        .regfile = REGFILE_kv3_QGR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_GRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C0] = {
        .name = "c0",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C1] = {
        .name = "c1",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 8,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C2] = {
        .name = "c2",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 16,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C3] = {
        .name = "c3",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 24,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C4] = {
        .name = "c4",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C5] = {
        .name = "c5",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 40,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C6] = {
        .name = "c6",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 48,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C7] = {
        .name = "c7",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 56,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C8] = {
        .name = "c8",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C9] = {
        .name = "c9",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 72,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C10] = {
        .name = "c10",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 80,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C11] = {
        .name = "c11",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 88,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C12] = {
        .name = "c12",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C13] = {
        .name = "c13",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 104,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C14] = {
        .name = "c14",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 112,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C15] = {
        .name = "c15",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 120,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C16] = {
        .name = "c16",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C17] = {
        .name = "c17",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 136,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C18] = {
        .name = "c18",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 144,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C19] = {
        .name = "c19",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C20] = {
        .name = "c20",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C21] = {
        .name = "c21",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 168,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C22] = {
        .name = "c22",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 176,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C23] = {
        .name = "c23",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 184,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C24] = {
        .name = "c24",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C25] = {
        .name = "c25",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 200,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C26] = {
        .name = "c26",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 208,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C27] = {
        .name = "c27",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C28] = {
        .name = "c28",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C29] = {
        .name = "c29",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 232,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C30] = {
        .name = "c30",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 240,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C31] = {
        .name = "c31",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 248,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C32] = {
        .name = "c32",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C33] = {
        .name = "c33",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 264,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C34] = {
        .name = "c34",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 272,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C35] = {
        .name = "c35",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C36] = {
        .name = "c36",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C37] = {
        .name = "c37",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 296,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C38] = {
        .name = "c38",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 304,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C39] = {
        .name = "c39",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 312,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C40] = {
        .name = "c40",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C41] = {
        .name = "c41",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 328,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C42] = {
        .name = "c42",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 336,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C43] = {
        .name = "c43",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C44] = {
        .name = "c44",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C45] = {
        .name = "c45",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 360,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C46] = {
        .name = "c46",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 368,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C47] = {
        .name = "c47",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 376,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C48] = {
        .name = "c48",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C49] = {
        .name = "c49",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 392,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C50] = {
        .name = "c50",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 400,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C51] = {
        .name = "c51",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C52] = {
        .name = "c52",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C53] = {
        .name = "c53",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 424,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C54] = {
        .name = "c54",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 432,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C55] = {
        .name = "c55",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 440,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C56] = {
        .name = "c56",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C57] = {
        .name = "c57",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 456,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C58] = {
        .name = "c58",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 464,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C59] = {
        .name = "c59",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C60] = {
        .name = "c60",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C61] = {
        .name = "c61",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 488,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C62] = {
        .name = "c62",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 496,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C63] = {
        .name = "c63",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 504,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C64] = {
        .name = "c64",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C65] = {
        .name = "c65",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 520,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C66] = {
        .name = "c66",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 528,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C67] = {
        .name = "c67",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C68] = {
        .name = "c68",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 544,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C69] = {
        .name = "c69",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 552,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C70] = {
        .name = "c70",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 560,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C71] = {
        .name = "c71",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 568,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C72] = {
        .name = "c72",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 576,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C73] = {
        .name = "c73",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 584,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C74] = {
        .name = "c74",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 592,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C75] = {
        .name = "c75",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 600,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C76] = {
        .name = "c76",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 608,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C77] = {
        .name = "c77",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 616,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C78] = {
        .name = "c78",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 624,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C79] = {
        .name = "c79",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 632,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C80] = {
        .name = "c80",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C81] = {
        .name = "c81",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 648,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C82] = {
        .name = "c82",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 656,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C83] = {
        .name = "c83",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C84] = {
        .name = "c84",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 672,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C85] = {
        .name = "c85",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 680,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C86] = {
        .name = "c86",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 688,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C87] = {
        .name = "c87",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 696,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C88] = {
        .name = "c88",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 704,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C89] = {
        .name = "c89",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 712,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C90] = {
        .name = "c90",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 720,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C91] = {
        .name = "c91",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 728,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C92] = {
        .name = "c92",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 736,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C93] = {
        .name = "c93",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 744,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C94] = {
        .name = "c94",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 752,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C95] = {
        .name = "c95",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 760,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C96] = {
        .name = "c96",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C97] = {
        .name = "c97",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 776,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C98] = {
        .name = "c98",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 784,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C99] = {
        .name = "c99",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C100] = {
        .name = "c100",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 800,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C101] = {
        .name = "c101",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 808,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C102] = {
        .name = "c102",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 816,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C103] = {
        .name = "c103",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 824,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C104] = {
        .name = "c104",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 832,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C105] = {
        .name = "c105",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 840,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C106] = {
        .name = "c106",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 848,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C107] = {
        .name = "c107",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 856,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C108] = {
        .name = "c108",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 864,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C109] = {
        .name = "c109",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 872,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C110] = {
        .name = "c110",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 880,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C111] = {
        .name = "c111",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 888,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C112] = {
        .name = "c112",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C113] = {
        .name = "c113",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 904,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C114] = {
        .name = "c114",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 912,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C115] = {
        .name = "c115",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C116] = {
        .name = "c116",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 928,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C117] = {
        .name = "c117",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 936,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C118] = {
        .name = "c118",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 944,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C119] = {
        .name = "c119",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 952,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C120] = {
        .name = "c120",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 960,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C121] = {
        .name = "c121",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 968,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C122] = {
        .name = "c122",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 976,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C123] = {
        .name = "c123",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 984,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C124] = {
        .name = "c124",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 992,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C125] = {
        .name = "c125",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1000,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C126] = {
        .name = "c126",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1008,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C127] = {
        .name = "c127",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1016,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C128] = {
        .name = "c128",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C129] = {
        .name = "c129",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1032,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C130] = {
        .name = "c130",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1040,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C131] = {
        .name = "c131",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1048,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C132] = {
        .name = "c132",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1056,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C133] = {
        .name = "c133",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1064,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C134] = {
        .name = "c134",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1072,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C135] = {
        .name = "c135",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1080,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C136] = {
        .name = "c136",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1088,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C137] = {
        .name = "c137",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1096,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C138] = {
        .name = "c138",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1104,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C139] = {
        .name = "c139",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1112,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C140] = {
        .name = "c140",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1120,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C141] = {
        .name = "c141",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C142] = {
        .name = "c142",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1136,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C143] = {
        .name = "c143",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1144,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C144] = {
        .name = "c144",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C145] = {
        .name = "c145",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C146] = {
        .name = "c146",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1168,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C147] = {
        .name = "c147",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1176,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C148] = {
        .name = "c148",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1184,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C149] = {
        .name = "c149",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C150] = {
        .name = "c150",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1200,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C151] = {
        .name = "c151",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1208,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C152] = {
        .name = "c152",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C153] = {
        .name = "c153",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C154] = {
        .name = "c154",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1232,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C155] = {
        .name = "c155",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1240,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C156] = {
        .name = "c156",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1248,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C157] = {
        .name = "c157",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C158] = {
        .name = "c158",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1264,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C159] = {
        .name = "c159",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1272,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C160] = {
        .name = "c160",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C161] = {
        .name = "c161",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C162] = {
        .name = "c162",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1296,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C163] = {
        .name = "c163",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1304,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C164] = {
        .name = "c164",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1312,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C165] = {
        .name = "c165",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C166] = {
        .name = "c166",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1328,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C167] = {
        .name = "c167",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1336,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C168] = {
        .name = "c168",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C169] = {
        .name = "c169",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C170] = {
        .name = "c170",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1360,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C171] = {
        .name = "c171",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1368,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C172] = {
        .name = "c172",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1376,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C173] = {
        .name = "c173",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C174] = {
        .name = "c174",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1392,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C175] = {
        .name = "c175",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1400,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C176] = {
        .name = "c176",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C177] = {
        .name = "c177",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C178] = {
        .name = "c178",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1424,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C179] = {
        .name = "c179",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1432,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C180] = {
        .name = "c180",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1440,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C181] = {
        .name = "c181",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C182] = {
        .name = "c182",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1456,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C183] = {
        .name = "c183",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1464,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C184] = {
        .name = "c184",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C185] = {
        .name = "c185",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C186] = {
        .name = "c186",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1488,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C187] = {
        .name = "c187",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1496,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C188] = {
        .name = "c188",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1504,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C189] = {
        .name = "c189",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C190] = {
        .name = "c190",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1520,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C191] = {
        .name = "c191",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1528,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C192] = {
        .name = "c192",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C193] = {
        .name = "c193",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1544,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C194] = {
        .name = "c194",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1552,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C195] = {
        .name = "c195",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1560,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C196] = {
        .name = "c196",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1568,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C197] = {
        .name = "c197",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1576,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C198] = {
        .name = "c198",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1584,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C199] = {
        .name = "c199",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1592,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C200] = {
        .name = "c200",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1600,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C201] = {
        .name = "c201",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1608,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C202] = {
        .name = "c202",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1616,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C203] = {
        .name = "c203",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1624,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C204] = {
        .name = "c204",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1632,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C205] = {
        .name = "c205",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C206] = {
        .name = "c206",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1648,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C207] = {
        .name = "c207",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1656,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C208] = {
        .name = "c208",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C209] = {
        .name = "c209",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1672,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C210] = {
        .name = "c210",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1680,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C211] = {
        .name = "c211",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1688,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C212] = {
        .name = "c212",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1696,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C213] = {
        .name = "c213",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1704,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C214] = {
        .name = "c214",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1712,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C215] = {
        .name = "c215",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1720,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C216] = {
        .name = "c216",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1728,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C217] = {
        .name = "c217",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1736,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C218] = {
        .name = "c218",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1744,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C219] = {
        .name = "c219",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1752,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C220] = {
        .name = "c220",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1760,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C221] = {
        .name = "c221",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C222] = {
        .name = "c222",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1776,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C223] = {
        .name = "c223",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1784,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C224] = {
        .name = "c224",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C225] = {
        .name = "c225",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1800,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C226] = {
        .name = "c226",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1808,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C227] = {
        .name = "c227",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1816,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C228] = {
        .name = "c228",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1824,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C229] = {
        .name = "c229",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1832,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C230] = {
        .name = "c230",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1840,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C231] = {
        .name = "c231",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1848,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C232] = {
        .name = "c232",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1856,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C233] = {
        .name = "c233",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1864,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C234] = {
        .name = "c234",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1872,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C235] = {
        .name = "c235",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1880,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C236] = {
        .name = "c236",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1888,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C237] = {
        .name = "c237",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C238] = {
        .name = "c238",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1904,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C239] = {
        .name = "c239",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1912,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C240] = {
        .name = "c240",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C241] = {
        .name = "c241",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1928,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C242] = {
        .name = "c242",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1936,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C243] = {
        .name = "c243",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1944,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C244] = {
        .name = "c244",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1952,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C245] = {
        .name = "c245",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1960,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C246] = {
        .name = "c246",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1968,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C247] = {
        .name = "c247",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1976,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C248] = {
        .name = "c248",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1984,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C249] = {
        .name = "c249",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1992,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C250] = {
        .name = "c250",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2000,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C251] = {
        .name = "c251",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2008,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C252] = {
        .name = "c252",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2016,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C253] = {
        .name = "c253",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C254] = {
        .name = "c254",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2032,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_C255] = {
        .name = "c255",
        .regfile = REGFILE_kv3_XCR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2040,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B0] = {
        .name = "b0",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B1] = {
        .name = "b1",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 16,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B2] = {
        .name = "b2",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B3] = {
        .name = "b3",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 48,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B4] = {
        .name = "b4",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B5] = {
        .name = "b5",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 80,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B6] = {
        .name = "b6",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B7] = {
        .name = "b7",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 112,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B8] = {
        .name = "b8",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B9] = {
        .name = "b9",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 144,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B10] = {
        .name = "b10",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B11] = {
        .name = "b11",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 176,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B12] = {
        .name = "b12",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B13] = {
        .name = "b13",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 208,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B14] = {
        .name = "b14",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B15] = {
        .name = "b15",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 240,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B16] = {
        .name = "b16",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B17] = {
        .name = "b17",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 272,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B18] = {
        .name = "b18",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B19] = {
        .name = "b19",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 304,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B20] = {
        .name = "b20",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B21] = {
        .name = "b21",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 336,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B22] = {
        .name = "b22",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B23] = {
        .name = "b23",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 368,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B24] = {
        .name = "b24",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B25] = {
        .name = "b25",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 400,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B26] = {
        .name = "b26",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B27] = {
        .name = "b27",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 432,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B28] = {
        .name = "b28",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B29] = {
        .name = "b29",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 464,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B30] = {
        .name = "b30",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B31] = {
        .name = "b31",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 496,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B32] = {
        .name = "b32",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B33] = {
        .name = "b33",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 528,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B34] = {
        .name = "b34",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 544,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B35] = {
        .name = "b35",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 560,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B36] = {
        .name = "b36",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 576,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B37] = {
        .name = "b37",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 592,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B38] = {
        .name = "b38",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 608,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B39] = {
        .name = "b39",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 624,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B40] = {
        .name = "b40",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B41] = {
        .name = "b41",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 656,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B42] = {
        .name = "b42",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 672,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B43] = {
        .name = "b43",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 688,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B44] = {
        .name = "b44",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 704,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B45] = {
        .name = "b45",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 720,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B46] = {
        .name = "b46",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 736,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B47] = {
        .name = "b47",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 752,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B48] = {
        .name = "b48",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B49] = {
        .name = "b49",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 784,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B50] = {
        .name = "b50",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 800,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B51] = {
        .name = "b51",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 816,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B52] = {
        .name = "b52",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 832,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B53] = {
        .name = "b53",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 848,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B54] = {
        .name = "b54",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 864,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B55] = {
        .name = "b55",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 880,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B56] = {
        .name = "b56",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B57] = {
        .name = "b57",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 912,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B58] = {
        .name = "b58",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 928,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B59] = {
        .name = "b59",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 944,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B60] = {
        .name = "b60",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 960,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B61] = {
        .name = "b61",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 976,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B62] = {
        .name = "b62",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 992,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B63] = {
        .name = "b63",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1008,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B64] = {
        .name = "b64",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B65] = {
        .name = "b65",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1040,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B66] = {
        .name = "b66",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1056,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B67] = {
        .name = "b67",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1072,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B68] = {
        .name = "b68",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1088,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B69] = {
        .name = "b69",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1104,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B70] = {
        .name = "b70",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1120,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B71] = {
        .name = "b71",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1136,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B72] = {
        .name = "b72",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B73] = {
        .name = "b73",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1168,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B74] = {
        .name = "b74",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1184,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B75] = {
        .name = "b75",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1200,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B76] = {
        .name = "b76",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B77] = {
        .name = "b77",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1232,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B78] = {
        .name = "b78",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1248,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B79] = {
        .name = "b79",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1264,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B80] = {
        .name = "b80",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B81] = {
        .name = "b81",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1296,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B82] = {
        .name = "b82",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1312,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B83] = {
        .name = "b83",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1328,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B84] = {
        .name = "b84",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B85] = {
        .name = "b85",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1360,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B86] = {
        .name = "b86",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1376,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B87] = {
        .name = "b87",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1392,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B88] = {
        .name = "b88",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B89] = {
        .name = "b89",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1424,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B90] = {
        .name = "b90",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1440,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B91] = {
        .name = "b91",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1456,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B92] = {
        .name = "b92",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B93] = {
        .name = "b93",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1488,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B94] = {
        .name = "b94",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1504,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B95] = {
        .name = "b95",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1520,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B96] = {
        .name = "b96",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B97] = {
        .name = "b97",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1552,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B98] = {
        .name = "b98",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1568,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B99] = {
        .name = "b99",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1584,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B100] = {
        .name = "b100",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1600,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B101] = {
        .name = "b101",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1616,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B102] = {
        .name = "b102",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1632,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B103] = {
        .name = "b103",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1648,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B104] = {
        .name = "b104",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B105] = {
        .name = "b105",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1680,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B106] = {
        .name = "b106",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1696,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B107] = {
        .name = "b107",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1712,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B108] = {
        .name = "b108",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1728,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B109] = {
        .name = "b109",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1744,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B110] = {
        .name = "b110",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1760,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B111] = {
        .name = "b111",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1776,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B112] = {
        .name = "b112",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B113] = {
        .name = "b113",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1808,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B114] = {
        .name = "b114",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1824,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B115] = {
        .name = "b115",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1840,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B116] = {
        .name = "b116",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1856,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B117] = {
        .name = "b117",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1872,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B118] = {
        .name = "b118",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1888,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B119] = {
        .name = "b119",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1904,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B120] = {
        .name = "b120",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B121] = {
        .name = "b121",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1936,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B122] = {
        .name = "b122",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1952,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B123] = {
        .name = "b123",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1968,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B124] = {
        .name = "b124",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1984,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B125] = {
        .name = "b125",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2000,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B126] = {
        .name = "b126",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2016,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_B127] = {
        .name = "b127",
        .regfile = REGFILE_kv3_XBR,
        .reg_width = 128,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2032,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A0] = {
        .name = "a0",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A1] = {
        .name = "a1",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 32,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A2] = {
        .name = "a2",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A3] = {
        .name = "a3",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 96,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A4] = {
        .name = "a4",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A5] = {
        .name = "a5",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 160,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A6] = {
        .name = "a6",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A7] = {
        .name = "a7",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 224,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A8] = {
        .name = "a8",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A9] = {
        .name = "a9",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 288,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A10] = {
        .name = "a10",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A11] = {
        .name = "a11",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 352,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A12] = {
        .name = "a12",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A13] = {
        .name = "a13",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 416,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A14] = {
        .name = "a14",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A15] = {
        .name = "a15",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 480,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A16] = {
        .name = "a16",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A17] = {
        .name = "a17",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 544,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A18] = {
        .name = "a18",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 576,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A19] = {
        .name = "a19",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 608,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A20] = {
        .name = "a20",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A21] = {
        .name = "a21",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 672,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A22] = {
        .name = "a22",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 704,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A23] = {
        .name = "a23",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 736,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A24] = {
        .name = "a24",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A25] = {
        .name = "a25",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 800,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A26] = {
        .name = "a26",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 832,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A27] = {
        .name = "a27",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 864,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A28] = {
        .name = "a28",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A29] = {
        .name = "a29",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 928,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A30] = {
        .name = "a30",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 960,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A31] = {
        .name = "a31",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 992,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A32] = {
        .name = "a32",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A33] = {
        .name = "a33",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1056,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A34] = {
        .name = "a34",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1088,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A35] = {
        .name = "a35",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1120,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A36] = {
        .name = "a36",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A37] = {
        .name = "a37",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1184,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A38] = {
        .name = "a38",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A39] = {
        .name = "a39",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1248,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A40] = {
        .name = "a40",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A41] = {
        .name = "a41",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1312,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A42] = {
        .name = "a42",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A43] = {
        .name = "a43",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1376,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A44] = {
        .name = "a44",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A45] = {
        .name = "a45",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1440,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A46] = {
        .name = "a46",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A47] = {
        .name = "a47",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1504,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A48] = {
        .name = "a48",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A49] = {
        .name = "a49",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1568,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A50] = {
        .name = "a50",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1600,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A51] = {
        .name = "a51",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1632,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A52] = {
        .name = "a52",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A53] = {
        .name = "a53",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1696,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A54] = {
        .name = "a54",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1728,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A55] = {
        .name = "a55",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1760,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A56] = {
        .name = "a56",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A57] = {
        .name = "a57",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1824,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A58] = {
        .name = "a58",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1856,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A59] = {
        .name = "a59",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1888,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A60] = {
        .name = "a60",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A61] = {
        .name = "a61",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1952,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A62] = {
        .name = "a62",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1984,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_A63] = {
        .name = "a63",
        .regfile = REGFILE_kv3_XVR,
        .reg_width = 256,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 2016,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W0] = {
        .name = "w0",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W1] = {
        .name = "w1",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 64,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W2] = {
        .name = "w2",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W3] = {
        .name = "w3",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 192,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W4] = {
        .name = "w4",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W5] = {
        .name = "w5",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 320,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W6] = {
        .name = "w6",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W7] = {
        .name = "w7",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 448,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W8] = {
        .name = "w8",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W9] = {
        .name = "w9",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 576,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W10] = {
        .name = "w10",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W11] = {
        .name = "w11",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 704,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W12] = {
        .name = "w12",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W13] = {
        .name = "w13",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 832,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W14] = {
        .name = "w14",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W15] = {
        .name = "w15",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 960,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W16] = {
        .name = "w16",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W17] = {
        .name = "w17",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1088,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W18] = {
        .name = "w18",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W19] = {
        .name = "w19",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1216,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W20] = {
        .name = "w20",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W21] = {
        .name = "w21",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1344,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W22] = {
        .name = "w22",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W23] = {
        .name = "w23",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1472,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W24] = {
        .name = "w24",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W25] = {
        .name = "w25",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1600,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W26] = {
        .name = "w26",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W27] = {
        .name = "w27",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1728,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W28] = {
        .name = "w28",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W29] = {
        .name = "w29",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1856,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W30] = {
        .name = "w30",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_W31] = {
        .name = "w31",
        .regfile = REGFILE_kv3_XWR,
        .reg_width = 512,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1984,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X0] = {
        .name = "x0",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 0,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X1] = {
        .name = "x1",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 128,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X2] = {
        .name = "x2",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 256,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X3] = {
        .name = "x3",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 384,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X4] = {
        .name = "x4",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 512,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X5] = {
        .name = "x5",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 640,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X6] = {
        .name = "x6",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 768,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X7] = {
        .name = "x7",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 896,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X8] = {
        .name = "x8",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1024,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X9] = {
        .name = "x9",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1152,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X10] = {
        .name = "x10",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1280,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X11] = {
        .name = "x11",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1408,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X12] = {
        .name = "x12",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1536,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X13] = {
        .name = "x13",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1664,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X14] = {
        .name = "x14",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1792,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_kv3_X15] = {
        .name = "x15",
        .regfile = REGFILE_kv3_XMR,
        .reg_width = 1024,
        .offset = offsetof(CPUArchState, storages.kv3_XRS) + 1920,
        .reset = 0x0,
        .mask = 0xffffffffffffffffull,
        .cpu_models = CPU_MODEL_v1 | CPU_MODEL_v2,
    },
    [REG_v2_PCR] = {
        .name = "pcr",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PCR) + 0,
        .reset = 0x0010000001000000,
        .mask = (
              0x00000000000000ff
            | 0x000000000000ff00
            | 0x0000000000ff0000
            | 0x000000000f000000
            | 0x00000000f0000000
            | 0x000000ff00000000
            | 0x00000f0000000000
            | 0x000ff00000000000
            | 0x0010000000000000
            | 0x0020000000000000
            | 0x0040000000000000
        ),
        .n_fields = 11,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PCR_PID,
            REGFIELD_kv3_PCR_CID,
            REGFIELD_kv3_PCR_MID,
            REGFIELD_v2_PCR_CAR,
            REGFIELD_kv3_PCR_CMA,
            REGFIELD_kv3_PCR_SV,
            REGFIELD_kv3_PCR_ST,
            REGFIELD_kv3_PCR_BM,
            REGFIELD_kv3_PCR_COE,
            REGFIELD_kv3_PCR_L1CE,
            REGFIELD_kv3_PCR_DSEM,
        },
        .rerror = REG_READ_ERROR_READ,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_PMC] = {
        .name = "pmc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_PMC) + 0,
        .reset = 0x0000000000408000,
        .mask = (
              0x000000000000003f
            | 0x0000000000001f80
            | 0x00000000000fc000
            | 0x0000000007e00000
            | 0x0000000030000000
            | 0x0000000040000000
            | 0x0000000100000000
            | 0x0000000200000000
            | 0x0000000400000000
            | 0x0000000800000000
            | 0x0000003000000000
        ),
        .n_fields = 11,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_PMC_PM0C,
            REGFIELD_kv3_PMC_PM1C,
            REGFIELD_kv3_PMC_PM2C,
            REGFIELD_kv3_PMC_PM3C,
            REGFIELD_kv3_PMC_SAF,
            REGFIELD_kv3_PMC_SAV,
            REGFIELD_kv3_PMC_PM0IE,
            REGFIELD_kv3_PMC_PM1IE,
            REGFIELD_kv3_PMC_PM2IE,
            REGFIELD_kv3_PMC_PM3IE,
            REGFIELD_kv3_PMC_SAT,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_IXC] = {
        .name = "ixc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_IXC) + 0,
        .reset = 0x00010001,
        .mask = (
              0x0000000000000001
            | 0x0000000000010000
        ),
        .n_fields = 2,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_IXC_FCB,
            REGFIELD_kv3_IXC_BCB,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DO] = {
        .name = "do",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_DO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
        ),
        .n_fields = 12,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DO_B0,
            REGFIELD_kv3_DO_B1,
            REGFIELD_kv3_DO_W0,
            REGFIELD_kv3_DO_W1,
            REGFIELD_kv3_DO_B2,
            REGFIELD_kv3_DO_B3,
            REGFIELD_kv3_DO_W2,
            REGFIELD_kv3_DO_W3,
            REGFIELD_kv3_DO_BI0,
            REGFIELD_kv3_DO_BI1,
            REGFIELD_kv3_DO_BI2,
            REGFIELD_kv3_DO_BI3,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_MO] = {
        .name = "mo",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
        ),
        .n_fields = 18,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MO_MMI,
            REGFIELD_kv3_MO_RFE,
            REGFIELD_kv3_MO_STOP,
            REGFIELD_kv3_MO_SYNC,
            REGFIELD_kv3_MO_PCR,
            REGFIELD_kv3_MO_MSG,
            REGFIELD_kv3_MO_MEN,
            REGFIELD_kv3_MO_MES,
            REGFIELD_kv3_MO_CSIT,
            REGFIELD_kv3_MO_T0,
            REGFIELD_kv3_MO_T1,
            REGFIELD_kv3_MO_WD,
            REGFIELD_kv3_MO_PM0,
            REGFIELD_kv3_MO_PM1,
            REGFIELD_kv3_MO_PM2,
            REGFIELD_kv3_MO_PM3,
            REGFIELD_kv3_MO_PMIT,
            REGFIELD_kv3_MO_COMM,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DC] = {
        .name = "dc",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.v2_DC) + 0,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_NONE,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DC0] = {
        .name = "dc0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_0) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x000000000000000c
            | 0x00000000fffffff0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DC0_BE,
            REGFIELD_kv3_DC0_WE,
            REGFIELD_kv3_DC0_WTYP,
            REGFIELD_kv3_DC0_WSZ,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DC1] = {
        .name = "dc1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_1) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x000000000000000c
            | 0x00000000fffffff0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DC1_BE,
            REGFIELD_kv3_DC1_WE,
            REGFIELD_kv3_DC1_WTYP,
            REGFIELD_kv3_DC1_WSZ,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DC2] = {
        .name = "dc2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_2) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x000000000000000c
            | 0x00000000fffffff0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DC2_BE,
            REGFIELD_kv3_DC2_WE,
            REGFIELD_kv3_DC2_WTYP,
            REGFIELD_kv3_DC2_WSZ,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DC3] = {
        .name = "dc3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DCV2_3) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000001
            | 0x0000000000000002
            | 0x000000000000000c
            | 0x00000000fffffff0
        ),
        .n_fields = 4,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DC3_BE,
            REGFIELD_kv3_DC3_WE,
            REGFIELD_kv3_DC3_WTYP,
            REGFIELD_kv3_DC3_WSZ,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DBA2] = {
        .name = "dba2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA2) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DBA2_DBA2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DBA3] = {
        .name = "dba3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DBA3) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DBA3_DBA3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DWA2] = {
        .name = "dwa2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA2) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DWA2_DWA2,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DWA3] = {
        .name = "dwa3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_DWA3) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0xffffffffffffffff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DWA3_DWA3,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_ES_PL0] = {
        .name = "es_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL0) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000007000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000018000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000002000000000
            | 0x0000004000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 27,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL0_EC,
            REGFIELD_kv3_ES_PL0_OAPL,
            REGFIELD_kv3_ES_PL0_ED,
            REGFIELD_kv3_ES_PL0_ORPL,
            REGFIELD_kv3_ES_PL0_PTAPL,
            REGFIELD_kv3_ES_PL0_PTRPL,
            REGFIELD_kv3_ES_PL0_DCV2,
            REGFIELD_kv3_ES_PL0_ITN,
            REGFIELD_kv3_ES_PL0_HTC,
            REGFIELD_kv3_ES_PL0_SN,
            REGFIELD_kv3_ES_PL0_WBN,
            REGFIELD_kv3_ES_PL0_SFRT,
            REGFIELD_kv3_ES_PL0_ITL,
            REGFIELD_kv3_ES_PL0_SFRI,
            REGFIELD_kv3_ES_PL0_ITI,
            REGFIELD_kv3_ES_PL0_GPRP,
            REGFIELD_kv3_ES_PL0_SFRP,
            REGFIELD_kv3_ES_PL0_DHT,
            REGFIELD_kv3_ES_PL0_DRX,
            REGFIELD_kv3_ES_PL0_DAF,
            REGFIELD_kv3_ES_PL0_RWX,
            REGFIELD_kv3_ES_PL0_NTA,
            REGFIELD_kv3_ES_PL0_UCA,
            REGFIELD_kv3_ES_PL0_AS,
            REGFIELD_kv3_ES_PL0_BS,
            REGFIELD_kv3_ES_PL0_DRI,
            REGFIELD_kv3_ES_PL0_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_ES_PL1] = {
        .name = "es_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL1) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000007000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000018000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000002000000000
            | 0x0000004000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 27,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL1_EC,
            REGFIELD_kv3_ES_PL1_OAPL,
            REGFIELD_kv3_ES_PL1_ED,
            REGFIELD_kv3_ES_PL1_ORPL,
            REGFIELD_kv3_ES_PL1_PTAPL,
            REGFIELD_kv3_ES_PL1_PTRPL,
            REGFIELD_kv3_ES_PL1_DCV2,
            REGFIELD_kv3_ES_PL1_ITN,
            REGFIELD_kv3_ES_PL1_HTC,
            REGFIELD_kv3_ES_PL1_SN,
            REGFIELD_kv3_ES_PL1_WBN,
            REGFIELD_kv3_ES_PL1_SFRT,
            REGFIELD_kv3_ES_PL1_ITL,
            REGFIELD_kv3_ES_PL1_SFRI,
            REGFIELD_kv3_ES_PL1_ITI,
            REGFIELD_kv3_ES_PL1_GPRP,
            REGFIELD_kv3_ES_PL1_SFRP,
            REGFIELD_kv3_ES_PL1_DHT,
            REGFIELD_kv3_ES_PL1_DRX,
            REGFIELD_kv3_ES_PL1_DAF,
            REGFIELD_kv3_ES_PL1_RWX,
            REGFIELD_kv3_ES_PL1_NTA,
            REGFIELD_kv3_ES_PL1_UCA,
            REGFIELD_kv3_ES_PL1_AS,
            REGFIELD_kv3_ES_PL1_BS,
            REGFIELD_kv3_ES_PL1_DRI,
            REGFIELD_kv3_ES_PL1_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_ES_PL2] = {
        .name = "es_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL2) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000007000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000018000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000002000000000
            | 0x0000004000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 27,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL2_EC,
            REGFIELD_kv3_ES_PL2_OAPL,
            REGFIELD_kv3_ES_PL2_ED,
            REGFIELD_kv3_ES_PL2_ORPL,
            REGFIELD_kv3_ES_PL2_PTAPL,
            REGFIELD_kv3_ES_PL2_PTRPL,
            REGFIELD_kv3_ES_PL2_DCV2,
            REGFIELD_kv3_ES_PL2_ITN,
            REGFIELD_kv3_ES_PL2_HTC,
            REGFIELD_kv3_ES_PL2_SN,
            REGFIELD_kv3_ES_PL2_WBN,
            REGFIELD_kv3_ES_PL2_SFRT,
            REGFIELD_kv3_ES_PL2_ITL,
            REGFIELD_kv3_ES_PL2_SFRI,
            REGFIELD_kv3_ES_PL2_ITI,
            REGFIELD_kv3_ES_PL2_GPRP,
            REGFIELD_kv3_ES_PL2_SFRP,
            REGFIELD_kv3_ES_PL2_DHT,
            REGFIELD_kv3_ES_PL2_DRX,
            REGFIELD_kv3_ES_PL2_DAF,
            REGFIELD_kv3_ES_PL2_RWX,
            REGFIELD_kv3_ES_PL2_NTA,
            REGFIELD_kv3_ES_PL2_UCA,
            REGFIELD_kv3_ES_PL2_AS,
            REGFIELD_kv3_ES_PL2_BS,
            REGFIELD_kv3_ES_PL2_DRI,
            REGFIELD_kv3_ES_PL2_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_ES_PL3] = {
        .name = "es_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES_PL3) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000007000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000018000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000002000000000
            | 0x0000004000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 27,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_PL3_EC,
            REGFIELD_kv3_ES_PL3_OAPL,
            REGFIELD_kv3_ES_PL3_ED,
            REGFIELD_kv3_ES_PL3_ORPL,
            REGFIELD_kv3_ES_PL3_PTAPL,
            REGFIELD_kv3_ES_PL3_PTRPL,
            REGFIELD_kv3_ES_PL3_DCV2,
            REGFIELD_kv3_ES_PL3_ITN,
            REGFIELD_kv3_ES_PL3_HTC,
            REGFIELD_kv3_ES_PL3_SN,
            REGFIELD_kv3_ES_PL3_WBN,
            REGFIELD_kv3_ES_PL3_SFRT,
            REGFIELD_kv3_ES_PL3_ITL,
            REGFIELD_kv3_ES_PL3_SFRI,
            REGFIELD_kv3_ES_PL3_ITI,
            REGFIELD_kv3_ES_PL3_GPRP,
            REGFIELD_kv3_ES_PL3_SFRP,
            REGFIELD_kv3_ES_PL3_DHT,
            REGFIELD_kv3_ES_PL3_DRX,
            REGFIELD_kv3_ES_PL3_DAF,
            REGFIELD_kv3_ES_PL3_RWX,
            REGFIELD_kv3_ES_PL3_NTA,
            REGFIELD_kv3_ES_PL3_UCA,
            REGFIELD_kv3_ES_PL3_AS,
            REGFIELD_kv3_ES_PL3_BS,
            REGFIELD_kv3_ES_PL3_DRI,
            REGFIELD_kv3_ES_PL3_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SID_PL0] = {
        .name = "sid_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL0) + 0,
        .reset = 0x00000000,
        .mask = (
              0x00000000000001ff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SID_PL0_SID,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SID_PL1] = {
        .name = "sid_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL1) + 0,
        .reset = 0x00000000,
        .mask = (
              0x00000000000001ff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SID_PL1_SID,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SID_PL2] = {
        .name = "sid_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL2) + 0,
        .reset = 0x00000000,
        .mask = (
              0x00000000000001ff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SID_PL2_SID,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SID_PL3] = {
        .name = "sid_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_SID_PL3) + 0,
        .reset = 0x00000000,
        .mask = (
              0x00000000000001ff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SID_PL3_SID,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SR1_PL0] = {
        .name = "sr1_pl0",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 736,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SR1_PL1] = {
        .name = "sr1_pl1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 744,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SR1_PL2] = {
        .name = "sr1_pl2",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 752,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SR1_PL3] = {
        .name = "sr1_pl3",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 760,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_DOW] = {
        .name = "dow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.kv3_DO) + 0,
        .reset = 0x00000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
        ),
        .n_fields = 12,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_DOW_B0,
            REGFIELD_kv3_DOW_B1,
            REGFIELD_kv3_DOW_W0,
            REGFIELD_kv3_DOW_W1,
            REGFIELD_kv3_DOW_B2,
            REGFIELD_kv3_DOW_B3,
            REGFIELD_kv3_DOW_W2,
            REGFIELD_kv3_DOW_W3,
            REGFIELD_kv3_DOW_BI0,
            REGFIELD_kv3_DOW_BI1,
            REGFIELD_kv3_DOW_BI2,
            REGFIELD_kv3_DOW_BI3,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_MOW] = {
        .name = "mow",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_MO) + 0,
        .reset = 0x0000000000000000,
        .mask = (
              0x0000000000000003
            | 0x000000000000000c
            | 0x0000000000000030
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000003000
            | 0x000000000000c000
            | 0x0000000000030000
            | 0x00000000000c0000
            | 0x0000000000300000
            | 0x0000000000c00000
            | 0x0000000003000000
            | 0x000000000c000000
            | 0x0000000030000000
            | 0x00000000c0000000
            | 0x0000000300000000
            | 0x0000000c00000000
        ),
        .n_fields = 18,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_MOW_MMI,
            REGFIELD_kv3_MOW_RFE,
            REGFIELD_kv3_MOW_STOP,
            REGFIELD_kv3_MOW_SYNC,
            REGFIELD_kv3_MOW_PCR,
            REGFIELD_kv3_MOW_MSG,
            REGFIELD_kv3_MOW_MEN,
            REGFIELD_kv3_MOW_MES,
            REGFIELD_kv3_MOW_CSIT,
            REGFIELD_kv3_MOW_T0,
            REGFIELD_kv3_MOW_T1,
            REGFIELD_kv3_MOW_WD,
            REGFIELD_kv3_MOW_PM0,
            REGFIELD_kv3_MOW_PM1,
            REGFIELD_kv3_MOW_PM2,
            REGFIELD_kv3_MOW_PM3,
            REGFIELD_kv3_MOW_PMIT,
            REGFIELD_kv3_MOW_COMM,
        },
        .rerror = REG_READ_ERROR_TRAP_PRIVILEGE,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_NONE,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_ES] = {
        .name = "es",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_ES) + 0,
        .reset = 0x0000000000000004,
        .mask = (
              0x000000000000000f
            | 0x0000000000000030
            | 0xfffffffffffffff0
            | 0x00000000000000c0
            | 0x0000000000000300
            | 0x0000000000000c00
            | 0x0000000000007000
            | 0x000000000001f000
            | 0x000000000001f000
            | 0x0000000000fff000
            | 0x0000000000018000
            | 0x0000000000020000
            | 0x0000000000060000
            | 0x00000000001c0000
            | 0x000000001ff80000
            | 0x0000000007e00000
            | 0x0000000ff8000000
            | 0x0000001000000000
            | 0x0000002000000000
            | 0x0000004000000000
            | 0x0000038000000000
            | 0x0000040000000000
            | 0x0000080000000000
            | 0x0003f00000000000
            | 0x003c000000000000
            | 0x0fc0000000000000
            | 0xf000000000000000
        ),
        .n_fields = 27,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_ES_EC,
            REGFIELD_kv3_ES_OAPL,
            REGFIELD_kv3_ES_ED,
            REGFIELD_kv3_ES_ORPL,
            REGFIELD_kv3_ES_PTAPL,
            REGFIELD_kv3_ES_PTRPL,
            REGFIELD_kv3_ES_DCV2,
            REGFIELD_kv3_ES_ITN,
            REGFIELD_kv3_ES_HTC,
            REGFIELD_kv3_ES_SN,
            REGFIELD_kv3_ES_WBN,
            REGFIELD_kv3_ES_SFRT,
            REGFIELD_kv3_ES_ITL,
            REGFIELD_kv3_ES_SFRI,
            REGFIELD_kv3_ES_ITI,
            REGFIELD_kv3_ES_GPRP,
            REGFIELD_kv3_ES_SFRP,
            REGFIELD_kv3_ES_DHT,
            REGFIELD_kv3_ES_DRX,
            REGFIELD_kv3_ES_DAF,
            REGFIELD_kv3_ES_RWX,
            REGFIELD_kv3_ES_NTA,
            REGFIELD_kv3_ES_UCA,
            REGFIELD_kv3_ES_AS,
            REGFIELD_kv3_ES_BS,
            REGFIELD_kv3_ES_DRI,
            REGFIELD_kv3_ES_PIC,
        },
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_WFX,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SID] = {
        .name = "sid",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 32,
        .offset = offsetof(CPUArchState, storages.v2_SID) + 0,
        .reset = 0x00000000,
        .mask = (
              0x00000000000001ff
        ),
        .n_fields = 1,
        .fields = (const RegisterField []) {
            REGFIELD_kv3_SID_SID,
        },
        .rerror = REG_READ_ERROR_READ0,
        .werror = REG_WRITE_ERROR_TRAP_PRIVILEGE,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
    [REG_v2_SR1] = {
        .name = "sr1",
        .regfile = REGFILE_kv3_SFR,
        .reg_width = 64,
        .offset = offsetof(CPUArchState, storages.kv3_SRS) + 1248,
        .reset = 0x0000000000000000,
        .mask = 0xffffffffffffffffull,
        .raccess = REG_ACCESS_GET,
        .waccess = REG_ACCESS_SET,
        .cpu_models = CPU_MODEL_v2,
    },
};

typedef struct RegisterFile RegisterFile;
struct RegisterFile {
    size_t size;
    const Register *registers;
};

static const RegisterFile REGFILE_MAPPING[] = {
    [REGFILE_kv3_SFR] = {
        .size = 512,
        .registers = (const Register[]) {
            REG_kv3_PC, REG_kv3_PS, REG_kv3_PCR, REG_kv3_RA,
            REG_kv3_CS, REG_kv3_CSIT, REG_kv3_AESPC, REG_kv3_LS,
            REG_kv3_LE, REG_kv3_LC, REG_kv3_IPE, REG_kv3_MEN,
            REG_kv3_PMC, REG_kv3_PM0, REG_kv3_PM1, REG_kv3_PM2,
            REG_kv3_PM3, REG_kv3_PMSA, REG_kv3_TCR, REG_kv3_T0V,
            REG_kv3_T1V, REG_kv3_T0R, REG_kv3_T1R, REG_kv3_WDV,
            REG_kv3_WDR, REG_kv3_ILE, REG_kv3_ILL, REG_kv3_ILR,
            REG_kv3_MMC, REG_kv3_TEL, REG_kv3_TEH, REG_kv3_IXC,
            REG_kv3_SYO, REG_kv3_HTO, REG_kv3_ITO, REG_kv3_DO,
            REG_kv3_MO, REG_kv3_PSO, REG_kv3_RES38, REG_kv3_RES39,
            REG_kv3_DC, REG_kv3_DBA0, REG_kv3_DBA1, REG_kv3_DWA0,
            REG_kv3_DWA1, REG_kv3_MES, REG_kv3_WS, REG_kv3_DC0,
            REG_kv3_DC1, REG_kv3_DC2, REG_kv3_DC3, REG_kv3_DBA2,
            REG_kv3_DBA3, REG_kv3_DWA2, REG_kv3_DWA3, REG_kv3_RES55,
            REG_kv3_RES56, REG_kv3_RES57, REG_kv3_RES58, REG_kv3_RES59,
            REG_kv3_RES60, REG_kv3_RES61, REG_kv3_RES62, REG_kv3_RES63,
            REG_kv3_SPC_PL0, REG_kv3_SPC_PL1, REG_kv3_SPC_PL2, REG_kv3_SPC_PL3,
            REG_kv3_SPS_PL0, REG_kv3_SPS_PL1, REG_kv3_SPS_PL2, REG_kv3_SPS_PL3,
            REG_kv3_EA_PL0, REG_kv3_EA_PL1, REG_kv3_EA_PL2, REG_kv3_EA_PL3,
            REG_kv3_EV_PL0, REG_kv3_EV_PL1, REG_kv3_EV_PL2, REG_kv3_EV_PL3,
            REG_kv3_SR_PL0, REG_kv3_SR_PL1, REG_kv3_SR_PL2, REG_kv3_SR_PL3,
            REG_kv3_ES_PL0, REG_kv3_ES_PL1, REG_kv3_ES_PL2, REG_kv3_ES_PL3,
            REG_kv3_SID_PL0, REG_kv3_SID_PL1, REG_kv3_SID_PL2, REG_kv3_SID_PL3,
            REG_kv3_SR1_PL0, REG_kv3_SR1_PL1, REG_kv3_SR1_PL2, REG_kv3_SR1_PL3,
            REG_kv3_SYOW, REG_kv3_HTOW, REG_kv3_ITOW, REG_kv3_DOW,
            REG_kv3_MOW, REG_kv3_PSOW, REG_kv3_RES102, REG_kv3_RES103,
            REG_kv3_RES104, REG_kv3_RES105, REG_kv3_RES106, REG_kv3_RES107,
            REG_kv3_RES108, REG_kv3_RES109, REG_kv3_RES110, REG_kv3_RES111,
            REG_kv3_RES112, REG_kv3_RES113, REG_kv3_RES114, REG_kv3_RES115,
            REG_kv3_RES116, REG_kv3_RES117, REG_kv3_RES118, REG_kv3_RES119,
            REG_kv3_RES120, REG_kv3_RES121, REG_kv3_RES122, REG_kv3_RES123,
            REG_kv3_RES124, REG_kv3_RES125, REG_kv3_RES126, REG_kv3_RES127,
            REG_kv3_SPC, REG_kv3_RES129, REG_kv3_RES130, REG_kv3_RES131,
            REG_kv3_SPS, REG_kv3_RES133, REG_kv3_RES134, REG_kv3_RES135,
            REG_kv3_EA, REG_kv3_RES137, REG_kv3_RES138, REG_kv3_RES139,
            REG_kv3_EV, REG_kv3_RES141, REG_kv3_RES142, REG_kv3_RES143,
            REG_kv3_SR, REG_kv3_RES145, REG_kv3_RES146, REG_kv3_RES147,
            REG_kv3_ES, REG_kv3_RES149, REG_kv3_RES150, REG_kv3_RES151,
            REG_kv3_SID, REG_kv3_RES153, REG_kv3_RES154, REG_kv3_RES155,
            REG_kv3_SR1, REG_kv3_RES157, REG_kv3_RES158, REG_kv3_RES159,
            REG_kv3_RES160, REG_kv3_RES161, REG_kv3_RES162, REG_kv3_RES163,
            REG_kv3_RES164, REG_kv3_RES165, REG_kv3_RES166, REG_kv3_RES167,
            REG_kv3_RES168, REG_kv3_RES169, REG_kv3_RES170, REG_kv3_RES171,
            REG_kv3_RES172, REG_kv3_RES173, REG_kv3_RES174, REG_kv3_RES175,
            REG_kv3_RES176, REG_kv3_RES177, REG_kv3_RES178, REG_kv3_RES179,
            REG_kv3_RES180, REG_kv3_RES181, REG_kv3_RES182, REG_kv3_RES183,
            REG_kv3_RES184, REG_kv3_RES185, REG_kv3_RES186, REG_kv3_RES187,
            REG_kv3_RES188, REG_kv3_RES189, REG_kv3_RES190, REG_kv3_RES191,
            REG_kv3_RES192, REG_kv3_RES193, REG_kv3_RES194, REG_kv3_RES195,
            REG_kv3_RES196, REG_kv3_RES197, REG_kv3_RES198, REG_kv3_RES199,
            REG_kv3_RES200, REG_kv3_RES201, REG_kv3_RES202, REG_kv3_RES203,
            REG_kv3_RES204, REG_kv3_RES205, REG_kv3_RES206, REG_kv3_RES207,
            REG_kv3_RES208, REG_kv3_RES209, REG_kv3_RES210, REG_kv3_RES211,
            REG_kv3_RES212, REG_kv3_RES213, REG_kv3_RES214, REG_kv3_RES215,
            REG_kv3_RES216, REG_kv3_RES217, REG_kv3_RES218, REG_kv3_RES219,
            REG_kv3_RES220, REG_kv3_RES221, REG_kv3_RES222, REG_kv3_RES223,
            REG_kv3_RES224, REG_kv3_RES225, REG_kv3_RES226, REG_kv3_RES227,
            REG_kv3_RES228, REG_kv3_RES229, REG_kv3_RES230, REG_kv3_RES231,
            REG_kv3_RES232, REG_kv3_RES233, REG_kv3_RES234, REG_kv3_RES235,
            REG_kv3_RES236, REG_kv3_RES237, REG_kv3_RES238, REG_kv3_RES239,
            REG_kv3_RES240, REG_kv3_RES241, REG_kv3_RES242, REG_kv3_RES243,
            REG_kv3_RES244, REG_kv3_RES245, REG_kv3_RES246, REG_kv3_RES247,
            REG_kv3_RES248, REG_kv3_RES249, REG_kv3_RES250, REG_kv3_RES251,
            REG_kv3_RES252, REG_kv3_RES253, REG_kv3_RES254, REG_kv3_RES255,
            REG_kv3_VSFR0, REG_kv3_VSFR1, REG_kv3_VSFR2, REG_kv3_VSFR3,
            REG_kv3_VSFR4, REG_kv3_VSFR5, REG_kv3_VSFR6, REG_kv3_VSFR7,
            REG_kv3_VSFR8, REG_kv3_VSFR9, REG_kv3_VSFR10, REG_kv3_VSFR11,
            REG_kv3_VSFR12, REG_kv3_VSFR13, REG_kv3_VSFR14, REG_kv3_VSFR15,
            REG_kv3_VSFR16, REG_kv3_VSFR17, REG_kv3_VSFR18, REG_kv3_VSFR19,
            REG_kv3_VSFR20, REG_kv3_VSFR21, REG_kv3_VSFR22, REG_kv3_VSFR23,
            REG_kv3_VSFR24, REG_kv3_VSFR25, REG_kv3_VSFR26, REG_kv3_VSFR27,
            REG_kv3_VSFR28, REG_kv3_VSFR29, REG_kv3_VSFR30, REG_kv3_VSFR31,
            REG_kv3_VSFR32, REG_kv3_VSFR33, REG_kv3_VSFR34, REG_kv3_VSFR35,
            REG_kv3_VSFR36, REG_kv3_VSFR37, REG_kv3_VSFR38, REG_kv3_VSFR39,
            REG_kv3_VSFR40, REG_kv3_VSFR41, REG_kv3_VSFR42, REG_kv3_VSFR43,
            REG_kv3_VSFR44, REG_kv3_VSFR45, REG_kv3_VSFR46, REG_kv3_VSFR47,
            REG_kv3_VSFR48, REG_kv3_VSFR49, REG_kv3_VSFR50, REG_kv3_VSFR51,
            REG_kv3_VSFR52, REG_kv3_VSFR53, REG_kv3_VSFR54, REG_kv3_VSFR55,
            REG_kv3_VSFR56, REG_kv3_VSFR57, REG_kv3_VSFR58, REG_kv3_VSFR59,
            REG_kv3_VSFR60, REG_kv3_VSFR61, REG_kv3_VSFR62, REG_kv3_VSFR63,
            REG_kv3_VSFR64, REG_kv3_VSFR65, REG_kv3_VSFR66, REG_kv3_VSFR67,
            REG_kv3_VSFR68, REG_kv3_VSFR69, REG_kv3_VSFR70, REG_kv3_VSFR71,
            REG_kv3_VSFR72, REG_kv3_VSFR73, REG_kv3_VSFR74, REG_kv3_VSFR75,
            REG_kv3_VSFR76, REG_kv3_VSFR77, REG_kv3_VSFR78, REG_kv3_VSFR79,
            REG_kv3_VSFR80, REG_kv3_VSFR81, REG_kv3_VSFR82, REG_kv3_VSFR83,
            REG_kv3_VSFR84, REG_kv3_VSFR85, REG_kv3_VSFR86, REG_kv3_VSFR87,
            REG_kv3_VSFR88, REG_kv3_VSFR89, REG_kv3_VSFR90, REG_kv3_VSFR91,
            REG_kv3_VSFR92, REG_kv3_VSFR93, REG_kv3_VSFR94, REG_kv3_VSFR95,
            REG_kv3_VSFR96, REG_kv3_VSFR97, REG_kv3_VSFR98, REG_kv3_VSFR99,
            REG_kv3_VSFR100, REG_kv3_VSFR101, REG_kv3_VSFR102, REG_kv3_VSFR103,
            REG_kv3_VSFR104, REG_kv3_VSFR105, REG_kv3_VSFR106, REG_kv3_VSFR107,
            REG_kv3_VSFR108, REG_kv3_VSFR109, REG_kv3_VSFR110, REG_kv3_VSFR111,
            REG_kv3_VSFR112, REG_kv3_VSFR113, REG_kv3_VSFR114, REG_kv3_VSFR115,
            REG_kv3_VSFR116, REG_kv3_VSFR117, REG_kv3_VSFR118, REG_kv3_VSFR119,
            REG_kv3_VSFR120, REG_kv3_VSFR121, REG_kv3_VSFR122, REG_kv3_VSFR123,
            REG_kv3_VSFR124, REG_kv3_VSFR125, REG_kv3_VSFR126, REG_kv3_VSFR127,
            REG_kv3_VSFR128, REG_kv3_VSFR129, REG_kv3_VSFR130, REG_kv3_VSFR131,
            REG_kv3_VSFR132, REG_kv3_VSFR133, REG_kv3_VSFR134, REG_kv3_VSFR135,
            REG_kv3_VSFR136, REG_kv3_VSFR137, REG_kv3_VSFR138, REG_kv3_VSFR139,
            REG_kv3_VSFR140, REG_kv3_VSFR141, REG_kv3_VSFR142, REG_kv3_VSFR143,
            REG_kv3_VSFR144, REG_kv3_VSFR145, REG_kv3_VSFR146, REG_kv3_VSFR147,
            REG_kv3_VSFR148, REG_kv3_VSFR149, REG_kv3_VSFR150, REG_kv3_VSFR151,
            REG_kv3_VSFR152, REG_kv3_VSFR153, REG_kv3_VSFR154, REG_kv3_VSFR155,
            REG_kv3_VSFR156, REG_kv3_VSFR157, REG_kv3_VSFR158, REG_kv3_VSFR159,
            REG_kv3_VSFR160, REG_kv3_VSFR161, REG_kv3_VSFR162, REG_kv3_VSFR163,
            REG_kv3_VSFR164, REG_kv3_VSFR165, REG_kv3_VSFR166, REG_kv3_VSFR167,
            REG_kv3_VSFR168, REG_kv3_VSFR169, REG_kv3_VSFR170, REG_kv3_VSFR171,
            REG_kv3_VSFR172, REG_kv3_VSFR173, REG_kv3_VSFR174, REG_kv3_VSFR175,
            REG_kv3_VSFR176, REG_kv3_VSFR177, REG_kv3_VSFR178, REG_kv3_VSFR179,
            REG_kv3_VSFR180, REG_kv3_VSFR181, REG_kv3_VSFR182, REG_kv3_VSFR183,
            REG_kv3_VSFR184, REG_kv3_VSFR185, REG_kv3_VSFR186, REG_kv3_VSFR187,
            REG_kv3_VSFR188, REG_kv3_VSFR189, REG_kv3_VSFR190, REG_kv3_VSFR191,
            REG_kv3_VSFR192, REG_kv3_VSFR193, REG_kv3_VSFR194, REG_kv3_VSFR195,
            REG_kv3_VSFR196, REG_kv3_VSFR197, REG_kv3_VSFR198, REG_kv3_VSFR199,
            REG_kv3_VSFR200, REG_kv3_VSFR201, REG_kv3_VSFR202, REG_kv3_VSFR203,
            REG_kv3_VSFR204, REG_kv3_VSFR205, REG_kv3_VSFR206, REG_kv3_VSFR207,
            REG_kv3_VSFR208, REG_kv3_VSFR209, REG_kv3_VSFR210, REG_kv3_VSFR211,
            REG_kv3_VSFR212, REG_kv3_VSFR213, REG_kv3_VSFR214, REG_kv3_VSFR215,
            REG_kv3_VSFR216, REG_kv3_VSFR217, REG_kv3_VSFR218, REG_kv3_VSFR219,
            REG_kv3_VSFR220, REG_kv3_VSFR221, REG_kv3_VSFR222, REG_kv3_VSFR223,
            REG_kv3_VSFR224, REG_kv3_VSFR225, REG_kv3_VSFR226, REG_kv3_VSFR227,
            REG_kv3_VSFR228, REG_kv3_VSFR229, REG_kv3_VSFR230, REG_kv3_VSFR231,
            REG_kv3_VSFR232, REG_kv3_VSFR233, REG_kv3_VSFR234, REG_kv3_VSFR235,
            REG_kv3_VSFR236, REG_kv3_VSFR237, REG_kv3_VSFR238, REG_kv3_VSFR239,
            REG_kv3_VSFR240, REG_kv3_VSFR241, REG_kv3_VSFR242, REG_kv3_VSFR243,
            REG_kv3_VSFR244, REG_kv3_VSFR245, REG_kv3_VSFR246, REG_kv3_VSFR247,
            REG_kv3_VSFR248, REG_kv3_VSFR249, REG_kv3_VSFR250, REG_kv3_VSFR251,
            REG_kv3_VSFR252, REG_kv3_VSFR253, REG_kv3_VSFR254, REG_kv3_VSFR255,
        },
    },
    [REGFILE_kv3_GPR] = {
        .size = 64,
        .registers = (const Register[]) {
            REG_kv3_R0, REG_kv3_R1, REG_kv3_R2, REG_kv3_R3,
            REG_kv3_R4, REG_kv3_R5, REG_kv3_R6, REG_kv3_R7,
            REG_kv3_R8, REG_kv3_R9, REG_kv3_R10, REG_kv3_R11,
            REG_kv3_R12, REG_kv3_R13, REG_kv3_R14, REG_kv3_R15,
            REG_kv3_R16, REG_kv3_R17, REG_kv3_R18, REG_kv3_R19,
            REG_kv3_R20, REG_kv3_R21, REG_kv3_R22, REG_kv3_R23,
            REG_kv3_R24, REG_kv3_R25, REG_kv3_R26, REG_kv3_R27,
            REG_kv3_R28, REG_kv3_R29, REG_kv3_R30, REG_kv3_R31,
            REG_kv3_R32, REG_kv3_R33, REG_kv3_R34, REG_kv3_R35,
            REG_kv3_R36, REG_kv3_R37, REG_kv3_R38, REG_kv3_R39,
            REG_kv3_R40, REG_kv3_R41, REG_kv3_R42, REG_kv3_R43,
            REG_kv3_R44, REG_kv3_R45, REG_kv3_R46, REG_kv3_R47,
            REG_kv3_R48, REG_kv3_R49, REG_kv3_R50, REG_kv3_R51,
            REG_kv3_R52, REG_kv3_R53, REG_kv3_R54, REG_kv3_R55,
            REG_kv3_R56, REG_kv3_R57, REG_kv3_R58, REG_kv3_R59,
            REG_kv3_R60, REG_kv3_R61, REG_kv3_R62, REG_kv3_R63,
        },
    },
    [REGFILE_kv3_PGR] = {
        .size = 32,
        .registers = (const Register[]) {
            REG_kv3_P0, REG_kv3_P2, REG_kv3_P4, REG_kv3_P6,
            REG_kv3_P8, REG_kv3_P10, REG_kv3_P12, REG_kv3_P14,
            REG_kv3_P16, REG_kv3_P18, REG_kv3_P20, REG_kv3_P22,
            REG_kv3_P24, REG_kv3_P26, REG_kv3_P28, REG_kv3_P30,
            REG_kv3_P32, REG_kv3_P34, REG_kv3_P36, REG_kv3_P38,
            REG_kv3_P40, REG_kv3_P42, REG_kv3_P44, REG_kv3_P46,
            REG_kv3_P48, REG_kv3_P50, REG_kv3_P52, REG_kv3_P54,
            REG_kv3_P56, REG_kv3_P58, REG_kv3_P60, REG_kv3_P62,
        },
    },
    [REGFILE_kv3_QGR] = {
        .size = 16,
        .registers = (const Register[]) {
            REG_kv3_Q0, REG_kv3_Q4, REG_kv3_Q8, REG_kv3_Q12,
            REG_kv3_Q16, REG_kv3_Q20, REG_kv3_Q24, REG_kv3_Q28,
            REG_kv3_Q32, REG_kv3_Q36, REG_kv3_Q40, REG_kv3_Q44,
            REG_kv3_Q48, REG_kv3_Q52, REG_kv3_Q56, REG_kv3_Q60,
        },
    },
    [REGFILE_kv3_XCR] = {
        .size = 256,
        .registers = (const Register[]) {
            REG_kv3_C0, REG_kv3_C1, REG_kv3_C2, REG_kv3_C3,
            REG_kv3_C4, REG_kv3_C5, REG_kv3_C6, REG_kv3_C7,
            REG_kv3_C8, REG_kv3_C9, REG_kv3_C10, REG_kv3_C11,
            REG_kv3_C12, REG_kv3_C13, REG_kv3_C14, REG_kv3_C15,
            REG_kv3_C16, REG_kv3_C17, REG_kv3_C18, REG_kv3_C19,
            REG_kv3_C20, REG_kv3_C21, REG_kv3_C22, REG_kv3_C23,
            REG_kv3_C24, REG_kv3_C25, REG_kv3_C26, REG_kv3_C27,
            REG_kv3_C28, REG_kv3_C29, REG_kv3_C30, REG_kv3_C31,
            REG_kv3_C32, REG_kv3_C33, REG_kv3_C34, REG_kv3_C35,
            REG_kv3_C36, REG_kv3_C37, REG_kv3_C38, REG_kv3_C39,
            REG_kv3_C40, REG_kv3_C41, REG_kv3_C42, REG_kv3_C43,
            REG_kv3_C44, REG_kv3_C45, REG_kv3_C46, REG_kv3_C47,
            REG_kv3_C48, REG_kv3_C49, REG_kv3_C50, REG_kv3_C51,
            REG_kv3_C52, REG_kv3_C53, REG_kv3_C54, REG_kv3_C55,
            REG_kv3_C56, REG_kv3_C57, REG_kv3_C58, REG_kv3_C59,
            REG_kv3_C60, REG_kv3_C61, REG_kv3_C62, REG_kv3_C63,
            REG_kv3_C64, REG_kv3_C65, REG_kv3_C66, REG_kv3_C67,
            REG_kv3_C68, REG_kv3_C69, REG_kv3_C70, REG_kv3_C71,
            REG_kv3_C72, REG_kv3_C73, REG_kv3_C74, REG_kv3_C75,
            REG_kv3_C76, REG_kv3_C77, REG_kv3_C78, REG_kv3_C79,
            REG_kv3_C80, REG_kv3_C81, REG_kv3_C82, REG_kv3_C83,
            REG_kv3_C84, REG_kv3_C85, REG_kv3_C86, REG_kv3_C87,
            REG_kv3_C88, REG_kv3_C89, REG_kv3_C90, REG_kv3_C91,
            REG_kv3_C92, REG_kv3_C93, REG_kv3_C94, REG_kv3_C95,
            REG_kv3_C96, REG_kv3_C97, REG_kv3_C98, REG_kv3_C99,
            REG_kv3_C100, REG_kv3_C101, REG_kv3_C102, REG_kv3_C103,
            REG_kv3_C104, REG_kv3_C105, REG_kv3_C106, REG_kv3_C107,
            REG_kv3_C108, REG_kv3_C109, REG_kv3_C110, REG_kv3_C111,
            REG_kv3_C112, REG_kv3_C113, REG_kv3_C114, REG_kv3_C115,
            REG_kv3_C116, REG_kv3_C117, REG_kv3_C118, REG_kv3_C119,
            REG_kv3_C120, REG_kv3_C121, REG_kv3_C122, REG_kv3_C123,
            REG_kv3_C124, REG_kv3_C125, REG_kv3_C126, REG_kv3_C127,
            REG_kv3_C128, REG_kv3_C129, REG_kv3_C130, REG_kv3_C131,
            REG_kv3_C132, REG_kv3_C133, REG_kv3_C134, REG_kv3_C135,
            REG_kv3_C136, REG_kv3_C137, REG_kv3_C138, REG_kv3_C139,
            REG_kv3_C140, REG_kv3_C141, REG_kv3_C142, REG_kv3_C143,
            REG_kv3_C144, REG_kv3_C145, REG_kv3_C146, REG_kv3_C147,
            REG_kv3_C148, REG_kv3_C149, REG_kv3_C150, REG_kv3_C151,
            REG_kv3_C152, REG_kv3_C153, REG_kv3_C154, REG_kv3_C155,
            REG_kv3_C156, REG_kv3_C157, REG_kv3_C158, REG_kv3_C159,
            REG_kv3_C160, REG_kv3_C161, REG_kv3_C162, REG_kv3_C163,
            REG_kv3_C164, REG_kv3_C165, REG_kv3_C166, REG_kv3_C167,
            REG_kv3_C168, REG_kv3_C169, REG_kv3_C170, REG_kv3_C171,
            REG_kv3_C172, REG_kv3_C173, REG_kv3_C174, REG_kv3_C175,
            REG_kv3_C176, REG_kv3_C177, REG_kv3_C178, REG_kv3_C179,
            REG_kv3_C180, REG_kv3_C181, REG_kv3_C182, REG_kv3_C183,
            REG_kv3_C184, REG_kv3_C185, REG_kv3_C186, REG_kv3_C187,
            REG_kv3_C188, REG_kv3_C189, REG_kv3_C190, REG_kv3_C191,
            REG_kv3_C192, REG_kv3_C193, REG_kv3_C194, REG_kv3_C195,
            REG_kv3_C196, REG_kv3_C197, REG_kv3_C198, REG_kv3_C199,
            REG_kv3_C200, REG_kv3_C201, REG_kv3_C202, REG_kv3_C203,
            REG_kv3_C204, REG_kv3_C205, REG_kv3_C206, REG_kv3_C207,
            REG_kv3_C208, REG_kv3_C209, REG_kv3_C210, REG_kv3_C211,
            REG_kv3_C212, REG_kv3_C213, REG_kv3_C214, REG_kv3_C215,
            REG_kv3_C216, REG_kv3_C217, REG_kv3_C218, REG_kv3_C219,
            REG_kv3_C220, REG_kv3_C221, REG_kv3_C222, REG_kv3_C223,
            REG_kv3_C224, REG_kv3_C225, REG_kv3_C226, REG_kv3_C227,
            REG_kv3_C228, REG_kv3_C229, REG_kv3_C230, REG_kv3_C231,
            REG_kv3_C232, REG_kv3_C233, REG_kv3_C234, REG_kv3_C235,
            REG_kv3_C236, REG_kv3_C237, REG_kv3_C238, REG_kv3_C239,
            REG_kv3_C240, REG_kv3_C241, REG_kv3_C242, REG_kv3_C243,
            REG_kv3_C244, REG_kv3_C245, REG_kv3_C246, REG_kv3_C247,
            REG_kv3_C248, REG_kv3_C249, REG_kv3_C250, REG_kv3_C251,
            REG_kv3_C252, REG_kv3_C253, REG_kv3_C254, REG_kv3_C255,
        },
    },
    [REGFILE_kv3_XBR] = {
        .size = 128,
        .registers = (const Register[]) {
            REG_kv3_B0, REG_kv3_B1, REG_kv3_B2, REG_kv3_B3,
            REG_kv3_B4, REG_kv3_B5, REG_kv3_B6, REG_kv3_B7,
            REG_kv3_B8, REG_kv3_B9, REG_kv3_B10, REG_kv3_B11,
            REG_kv3_B12, REG_kv3_B13, REG_kv3_B14, REG_kv3_B15,
            REG_kv3_B16, REG_kv3_B17, REG_kv3_B18, REG_kv3_B19,
            REG_kv3_B20, REG_kv3_B21, REG_kv3_B22, REG_kv3_B23,
            REG_kv3_B24, REG_kv3_B25, REG_kv3_B26, REG_kv3_B27,
            REG_kv3_B28, REG_kv3_B29, REG_kv3_B30, REG_kv3_B31,
            REG_kv3_B32, REG_kv3_B33, REG_kv3_B34, REG_kv3_B35,
            REG_kv3_B36, REG_kv3_B37, REG_kv3_B38, REG_kv3_B39,
            REG_kv3_B40, REG_kv3_B41, REG_kv3_B42, REG_kv3_B43,
            REG_kv3_B44, REG_kv3_B45, REG_kv3_B46, REG_kv3_B47,
            REG_kv3_B48, REG_kv3_B49, REG_kv3_B50, REG_kv3_B51,
            REG_kv3_B52, REG_kv3_B53, REG_kv3_B54, REG_kv3_B55,
            REG_kv3_B56, REG_kv3_B57, REG_kv3_B58, REG_kv3_B59,
            REG_kv3_B60, REG_kv3_B61, REG_kv3_B62, REG_kv3_B63,
            REG_kv3_B64, REG_kv3_B65, REG_kv3_B66, REG_kv3_B67,
            REG_kv3_B68, REG_kv3_B69, REG_kv3_B70, REG_kv3_B71,
            REG_kv3_B72, REG_kv3_B73, REG_kv3_B74, REG_kv3_B75,
            REG_kv3_B76, REG_kv3_B77, REG_kv3_B78, REG_kv3_B79,
            REG_kv3_B80, REG_kv3_B81, REG_kv3_B82, REG_kv3_B83,
            REG_kv3_B84, REG_kv3_B85, REG_kv3_B86, REG_kv3_B87,
            REG_kv3_B88, REG_kv3_B89, REG_kv3_B90, REG_kv3_B91,
            REG_kv3_B92, REG_kv3_B93, REG_kv3_B94, REG_kv3_B95,
            REG_kv3_B96, REG_kv3_B97, REG_kv3_B98, REG_kv3_B99,
            REG_kv3_B100, REG_kv3_B101, REG_kv3_B102, REG_kv3_B103,
            REG_kv3_B104, REG_kv3_B105, REG_kv3_B106, REG_kv3_B107,
            REG_kv3_B108, REG_kv3_B109, REG_kv3_B110, REG_kv3_B111,
            REG_kv3_B112, REG_kv3_B113, REG_kv3_B114, REG_kv3_B115,
            REG_kv3_B116, REG_kv3_B117, REG_kv3_B118, REG_kv3_B119,
            REG_kv3_B120, REG_kv3_B121, REG_kv3_B122, REG_kv3_B123,
            REG_kv3_B124, REG_kv3_B125, REG_kv3_B126, REG_kv3_B127,
        },
    },
    [REGFILE_kv3_XVR] = {
        .size = 64,
        .registers = (const Register[]) {
            REG_kv3_A0, REG_kv3_A1, REG_kv3_A2, REG_kv3_A3,
            REG_kv3_A4, REG_kv3_A5, REG_kv3_A6, REG_kv3_A7,
            REG_kv3_A8, REG_kv3_A9, REG_kv3_A10, REG_kv3_A11,
            REG_kv3_A12, REG_kv3_A13, REG_kv3_A14, REG_kv3_A15,
            REG_kv3_A16, REG_kv3_A17, REG_kv3_A18, REG_kv3_A19,
            REG_kv3_A20, REG_kv3_A21, REG_kv3_A22, REG_kv3_A23,
            REG_kv3_A24, REG_kv3_A25, REG_kv3_A26, REG_kv3_A27,
            REG_kv3_A28, REG_kv3_A29, REG_kv3_A30, REG_kv3_A31,
            REG_kv3_A32, REG_kv3_A33, REG_kv3_A34, REG_kv3_A35,
            REG_kv3_A36, REG_kv3_A37, REG_kv3_A38, REG_kv3_A39,
            REG_kv3_A40, REG_kv3_A41, REG_kv3_A42, REG_kv3_A43,
            REG_kv3_A44, REG_kv3_A45, REG_kv3_A46, REG_kv3_A47,
            REG_kv3_A48, REG_kv3_A49, REG_kv3_A50, REG_kv3_A51,
            REG_kv3_A52, REG_kv3_A53, REG_kv3_A54, REG_kv3_A55,
            REG_kv3_A56, REG_kv3_A57, REG_kv3_A58, REG_kv3_A59,
            REG_kv3_A60, REG_kv3_A61, REG_kv3_A62, REG_kv3_A63,
        },
    },
    [REGFILE_kv3_XWR] = {
        .size = 32,
        .registers = (const Register[]) {
            REG_kv3_W0, REG_kv3_W1, REG_kv3_W2, REG_kv3_W3,
            REG_kv3_W4, REG_kv3_W5, REG_kv3_W6, REG_kv3_W7,
            REG_kv3_W8, REG_kv3_W9, REG_kv3_W10, REG_kv3_W11,
            REG_kv3_W12, REG_kv3_W13, REG_kv3_W14, REG_kv3_W15,
            REG_kv3_W16, REG_kv3_W17, REG_kv3_W18, REG_kv3_W19,
            REG_kv3_W20, REG_kv3_W21, REG_kv3_W22, REG_kv3_W23,
            REG_kv3_W24, REG_kv3_W25, REG_kv3_W26, REG_kv3_W27,
            REG_kv3_W28, REG_kv3_W29, REG_kv3_W30, REG_kv3_W31,
        },
    },
    [REGFILE_kv3_XMR] = {
        .size = 16,
        .registers = (const Register[]) {
            REG_kv3_X0, REG_kv3_X1, REG_kv3_X2, REG_kv3_X3,
            REG_kv3_X4, REG_kv3_X5, REG_kv3_X6, REG_kv3_X7,
            REG_kv3_X8, REG_kv3_X9, REG_kv3_X10, REG_kv3_X11,
            REG_kv3_X12, REG_kv3_X13, REG_kv3_X14, REG_kv3_X15,
        },
    },
};

static const RegFile REGCLASS_MAPPING[] = {
    [REGCLASS_kv3_systemReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_singleReg] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_pairedReg] = REGFILE_kv3_PGR,
    [REGCLASS_kv3_pairedReg_0] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_pairedReg_1] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_quadReg] = REGFILE_kv3_QGR,
    [REGCLASS_kv3_quadReg_0] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_quadReg_1] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_quadReg_2] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_quadReg_3] = REGFILE_kv3_GPR,
    [REGCLASS_kv3_coproReg] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_blockReg] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockReg_0] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_blockReg_1] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_vectorReg] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_vectorReg_0] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_vectorReg_1] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_vectorReg_2] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_vectorReg_3] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_wideReg] = REGFILE_kv3_XWR,
    [REGCLASS_kv3_wideReg_0] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_wideReg_1] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_matrixReg] = REGFILE_kv3_XMR,
    [REGCLASS_kv3_matrixReg_0] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_matrixReg_1] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_matrixReg_2] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_matrixReg_3] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_aloneReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_onlyraReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_onlygetReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_onlysetReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_onlyfxReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_onlyswapReg] = REGFILE_kv3_SFR,
    [REGCLASS_kv3_vectorRegE] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_vectorRegO] = REGFILE_kv3_XVR,
    [REGCLASS_kv3_blockRegE] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockRegO] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockReg0M4] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockReg1M4] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockReg2M4] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_blockReg3M4] = REGFILE_kv3_XBR,
    [REGCLASS_kv3_coproReg0M4] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_coproReg1M4] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_coproReg2M4] = REGFILE_kv3_XCR,
    [REGCLASS_kv3_coproReg3M4] = REGFILE_kv3_XCR,
    [REGCLASS_v2_systemReg] = REGFILE_kv3_SFR,
    [REGCLASS_v2_aloneReg] = REGFILE_kv3_SFR,
    [REGCLASS_v2_onlygetReg] = REGFILE_kv3_SFR,
    [REGCLASS_v2_onlysetReg] = REGFILE_kv3_SFR,
    [REGCLASS_v2_onlyfxReg] = REGFILE_kv3_SFR,
    [REGCLASS_v2_onlyswapReg] = REGFILE_kv3_SFR,
};

