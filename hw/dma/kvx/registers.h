/*
 * Kalray KVX MPPA cluster DMA
 *
 * Copyright (c) 2021 Kalray Inc.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 or later, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef HW_DMA_KVX_REGISTERS_H
#define HW_DMA_KVX_REGISTERS_H

#include "hw/registerfields.h"

typedef enum {
    GROUP_RX_CHANNEL,
    GROUP_RX_JOB_QUEUE,
    GROUP_RX_JOB_CACHE,
    GROUP_RX_DIAG,
    GROUP_RX_MUX,
    GROUP_RX_MONITORING,
    GROUP_DMA_IT,
    GROUP_DMA_ERROR,
    GROUP_TX_THREAD,
    GROUP_TX_PGRM_MEM,
    GROUP_TX_PGRM_TABLE,
    GROUP_NOC_ROUTE_TABLE,
    GROUP_BW_LIMITER_TABLE,
    GROUP_TX_MONITORING,
    GROUP_TX_NOC_TEST,
    GROUP_TX_JOB_QUEUE,
    GROUP_TX_COMP_QUEUE,

    GROUP_END
} KvxDmaRegGroup;

static const uint64_t KVX_DMA_GROUP_MMIO_START[] = {
    [GROUP_RX_CHANNEL] = 0x0,
    [GROUP_RX_JOB_QUEUE] = 0x40000,
    [GROUP_RX_JOB_CACHE] = 0x48000,
    [GROUP_RX_DIAG] = 0x4c000,
    [GROUP_RX_MUX] = 0x4d000,
    [GROUP_RX_MONITORING] = 0x4e000,
    [GROUP_DMA_IT] = 0x50000,
    [GROUP_DMA_ERROR] = 0x51000,
    [GROUP_TX_THREAD] = 0x60000,
    [GROUP_TX_PGRM_MEM] = 0x64000,
    [GROUP_TX_PGRM_TABLE] = 0x65000,
    [GROUP_NOC_ROUTE_TABLE] = 0x66000,
    [GROUP_BW_LIMITER_TABLE] = 0x67000,
    [GROUP_TX_MONITORING] = 0x68000,
    [GROUP_TX_NOC_TEST] = 0x69000,
    [GROUP_TX_JOB_QUEUE] =  0x80000,
    [GROUP_TX_COMP_QUEUE] = 0xc0000,

    [GROUP_END] = 0x100000,
};

static const size_t KVX_DMA_GROUP_NUM_ELTS[] = {
    [GROUP_RX_CHANNEL] = KVX_DMA_NUM_RX_CHANNEL,
    [GROUP_RX_JOB_QUEUE] = KVX_DMA_NUM_RX_JOB_QUEUE,
    [GROUP_RX_JOB_CACHE] = KVX_DMA_NUM_RX_JOB_CACHE,
    [GROUP_RX_DIAG] = 1,
    [GROUP_RX_MUX] = 1,
    [GROUP_RX_MONITORING] = 1,
    [GROUP_DMA_IT] = 1,
    [GROUP_DMA_ERROR] = 1,
    [GROUP_TX_THREAD] = KVX_DMA_NUM_TX_THREAD,
    [GROUP_TX_PGRM_MEM] = 1,
    [GROUP_TX_PGRM_TABLE] = 1,
    [GROUP_NOC_ROUTE_TABLE] = 1,
    [GROUP_BW_LIMITER_TABLE] = 1,
    [GROUP_TX_MONITORING] = 1,
    [GROUP_TX_NOC_TEST] = 1,
    [GROUP_TX_JOB_QUEUE] = KVX_DMA_NUM_TX_JOB_QUEUE,
    [GROUP_TX_COMP_QUEUE] = KVX_DMA_NUM_TX_COMP_QUEUE,
};

static inline uint64_t kvx_dma_group_mmio_size(KvxDmaRegGroup group)
{
    size_t num_elts;
    uint64_t addr, next_addr;

    g_assert(group < GROUP_END);

    num_elts = KVX_DMA_GROUP_NUM_ELTS[group];
    addr = KVX_DMA_GROUP_MMIO_START[group];
    next_addr = KVX_DMA_GROUP_MMIO_START[group + 1];

    return (next_addr - addr) / num_elts;
}

REG64(RX_CHANNEL_BUFFER_START_ADDRESS, 0x0)
REG64(RX_CHANNEL_BUFFER_SIZE, 0x8)
REG64(RX_CHANNEL_BUFFER_ENABLE, 0x10)
REG64(RX_CHANNEL_CURRENT_OFFSET, 0x18)
REG64(RX_CHANNEL_JOB_QUEUE_CFG, 0x20)
REG64(RX_CHANNEL_ACTIVATED, 0x28)
REG64(RX_CHANNEL_BYTE_CNT, 0x30)
REG64(RX_CHANNEL_NOTIF_CNT, 0x38)
REG64(RX_CHANNEL_CNT_CLEAR_MODE, 0x40)
REG64(RX_CHANNEL_DMA_ERROR_STATUS, 0x48)
REG64(RX_CHANNEL_DMA_ERROR_STATUS_LAC, 0x50)
REG64(RX_CHANNEL_COMP_QUEUE_CFG, 0x58)
REG64(RX_CHANNEL_COMP_QUEUE_MODE, 0x60)
REG64(RX_CHANNEL_COMP_QUEUE_START_ADDRESS, 0x68)
REG64(RX_CHANNEL_COMP_QUEUE_SLOT_NB_LOG2, 0x70)
REG64(RX_CHANNEL_COMP_QUEUE_WRITE_POINTER, 0x78)
REG64(RX_CHANNEL_COMP_QUEUE_READ_POINTER, 0x80)
REG64(RX_CHANNEL_COMP_QUEUE_LOAD_INCR_READ_POINTER, 0x88)
REG64(RX_CHANNEL_COMP_QUEUE_VALID_READ_POINTER, 0x90)
REG64(RX_CHANNEL_COMP_QUEUE_LOAD_INCR_VALID_READ_POINTER, 0x98)
REG64(RX_CHANNEL_COMP_QUEUE_NOTIFICATION_ADDRESS, 0xa0)
REG64(RX_CHANNEL_COMP_QUEUE_FULL_NOTIFICATION_ADDRESS, 0xa8)
REG64(RX_CHANNEL_COMP_QUEUE_NOTIFICATION_ARG, 0xb0)
REG64(RX_CHANNEL_COMP_QUEUE_ASN, 0xb8)

REG64(RX_JOB_QUEUE_START_ADDRESS, 0x0)
REG64(RX_JOB_QUEUE_SLOT_NB_LOG2, 0x8)
REG64(RX_JOB_QUEUE_WRITE_POINTER, 0x10)
REG64(RX_JOB_QUEUE_LOAD_INCR_WRITE_POINTER, 0x18)
REG64(RX_JOB_QUEUE_VALID_WRITE_POINTER, 0x20)
REG64(RX_JOB_QUEUE_LOAD_INCR_VALID_WRITE_POINTER, 0x28)
REG64(RX_JOB_QUEUE_READ_POINTER, 0x30)
REG64(RX_JOB_QUEUE_NOTIFICATION_ADDRESS, 0x38)
REG64(RX_JOB_QUEUE_NOTIFICATION_ARG, 0x40)
REG64(RX_JOB_QUEUE_NOTIFICATION_MODE, 0x48)
REG64(RX_JOB_QUEUE_ACTIVATE, 0x50)
REG64(RX_JOB_QUEUE_STOP, 0x58)
REG64(RX_JOB_QUEUE_STATUS, 0x60)
REG64(RX_JOB_QUEUE_STATUS_LAC, 0x68)
REG64(RX_JOB_QUEUE_CACHE_ID, 0x70)
REG64(RX_JOB_QUEUE_ASN, 0x78)

REG64(RX_JOB_CACHE_JOB_NB, 0x0)
REG64(RX_JOB_CACHE_EMPTY_NOTIFICATION_ADDRESS, 0x8)
REG64(RX_JOB_CACHE_EMPTY_NOTIFICATION_ARG, 0x10)
REG64(RX_JOB_CACHE_EMPTY_NOTIFICATION_ENABLE, 0x18)
REG64(RX_JOB_CACHE_EMPTY_NOTIFICATION_ASN, 0x20)
REG64(RX_JOB_CACHE_POP_LO, 0x30)
REG64(RX_JOB_CACHE_POP_HI, 0x38)

REG64(RX_DIAG_ERROR_NOC_HEADER_LO, 0x0)
REG64(RX_DIAG_ERROR_NOC_HEADER_HI, 0x8)
REG64(RX_DIAG_ERROR_NOC_HEADER_STATUS, 0x10)
REG64(RX_DIAG_ERROR_NOC_HEADER_STATUS_LAC, 0x18)
REG64(RX_DIAG_CLOSED_CHAN_PKT_CNT, 0x20)
REG64(RX_DIAG_CLOSED_CHAN_PKT_CNT_LAC, 0x28)

REG64(RX_MUX_RX_SAP_CREDIT, 0x0)
REG64(RX_MUX_TX_SAP_CREDIT, 0x8)

REG64(RX_MONITORING_READY_FOR_POWER_OFF, 0x0)

REG64(DMA_IT_EN, 0x0)
    FIELD(DMA_IT_EN, RX_CLOSED_CHAN, 0, 1)
    FIELD(DMA_IT_EN, RX_WRITE_POINTER, 1, 1)
    FIELD(DMA_IT_EN, RX_BUFFER_SIZE, 2, 1)
    FIELD(DMA_IT_EN, RX_BUFFER_ADDR, 3, 1)
    FIELD(DMA_IT_EN, RX_BUFFER_DECC, 4, 1)
    FIELD(DMA_IT_EN, RX_COMP_QUEUE_ADDR, 5, 1)
    FIELD(DMA_IT_EN, RX_COMP_QUEUE_DECC, 6, 1)
    FIELD(DMA_IT_EN, RX_JOB_QUEUE_ADDR, 7, 1)
    FIELD(DMA_IT_EN, RX_JOB_QUEUE_DECC, 8, 1)
    FIELD(DMA_IT_EN, RX_JOB_CACHE_EMPTY_ADDR, 9, 1)
    FIELD(DMA_IT_EN, RX_JOB_CACHE_EMPTY_DECC, 10, 1)
    FIELD(DMA_IT_EN, RX_CHAN_JOB_CACHE, 11, 1)
    FIELD(DMA_IT_EN, TX_BUNDLE, 16, 1)
    FIELD(DMA_IT_EN, TX_PGRM_PERM, 17, 1)
    FIELD(DMA_IT_EN, TX_NOC_PERM, 18, 1)
    FIELD(DMA_IT_EN, TX_COM_PERM, 19, 1)
    FIELD(DMA_IT_EN, TX_READ_ADDR, 20, 1)
    FIELD(DMA_IT_EN, TX_READ_DECC, 21, 1)
    FIELD(DMA_IT_EN, TX_WRITE_ADDR, 22, 1)
    FIELD(DMA_IT_EN, TX_WRITE_DECC, 23, 1)
    FIELD(DMA_IT_EN, TX_COMP_QUEUE_ADDR, 24, 1)
    FIELD(DMA_IT_EN, TX_COMP_QUEUE_DECC, 25, 1)
    FIELD(DMA_IT_EN, TX_JOB_QUEUE_ADDR, 26, 1)
    FIELD(DMA_IT_EN, TX_JOB_QUEUE_DECC, 27, 1)
    FIELD(DMA_IT_EN, TX_JOB_TO_RX_JOB_PUSH, 28, 1)
    FIELD(DMA_IT_EN, TX_AT_ADD, 29, 1)
    FIELD(DMA_IT_EN, TX_VCHAN, 30, 1)
#define DMA_IT_EN_WRITE_MASK 0x7fff0fff

REG64(DMA_IT_VECTOR, 0x10)
REG64(DMA_IT_VECTOR_LAC, 0x18)

REG64(DMA_ERROR_RX_CHAN_ERROR_STATUS, 0x0)
REG64(DMA_ERROR_RX_CHAN_ERROR_STATUS_LAC, 0x8)
REG64(DMA_ERROR_RX_JOB_ERROR_STATUS, 0x10)
REG64(DMA_ERROR_RX_JOB_ERROR_STATUS_LAC, 0x18)
REG64(DMA_ERROR_TX_JOB_ERROR_STATUS, 0x20)
REG64(DMA_ERROR_TX_JOB_ERROR_STATUS_LAC, 0x28)
REG64(DMA_ERROR_TX_THREAD_ERROR_STATUS, 0x30)
REG64(DMA_ERROR_TX_THREAD_ERROR_STATUS_LAC, 0x38)
REG64(DMA_ERROR_TX_COMP_ERROR_STATUS, 0x40)
REG64(DMA_ERROR_TX_COMP_ERROR_STATUS_LAC, 0x48)

REG64(TX_THREAD_PARAMETER, 0x0) /* 8 registers of 64 bits */
REG64(TX_THREAD_PGRM_ID, 0x40)
    FIELD(TX_THREAD_PGRM_ID, PGRM_ID, 0, 4)

REG64(TX_THREAD_NOC_ROUTE_ID, 0x48)
    FIELD(TX_THREAD_NOC_ROUTE_ID, ROUTE_ID, 0, 9)

REG64(TX_THREAD_COMPLETION_QUEUE_ID, 0x50)
    FIELD(TX_THREAD_COMPLETION_QUEUE_ID, QUEUE_ID, 0, 6)
    FIELD(TX_THREAD_COMPLETION_QUEUE_ID, PUSH_EN, 8, 1)
    FIELD(TX_THREAD_COMPLETION_QUEUE_ID, RX_JOB_QUEUE_ID, 9, 3)

REG64(TX_THREAD_ACTIVATE, 0x58)
REG64(TX_THREAD_FENCE_BEFORE, 0x60)
REG64(TX_THREAD_FENCE_AFTER, 0x68)
REG64(TX_THREAD_ERROR, 0x70)
    FIELD(TX_THREAD_ERROR, PGRM_PERM, 0, 1)
    FIELD(TX_THREAD_ERROR, PGRM_READ_ADDR, 1, 1)
    FIELD(TX_THREAD_ERROR, PGRM_READ_DECC, 2, 1)
    FIELD(TX_THREAD_ERROR, PGRM_WRITE_ADDR, 3, 1)
    FIELD(TX_THREAD_ERROR, PGRM_WRITE_DECC, 4, 1)
    FIELD(TX_THREAD_ERROR, NOC_TABLE_PERM, 5, 1)
    FIELD(TX_THREAD_ERROR, COMPLETION_QUEUE_PERM, 6, 1)
    FIELD(TX_THREAD_ERROR, COMPLETION_QUEUE_ADDR, 7, 1)
    FIELD(TX_THREAD_ERROR, COMPLETION_QUEUE_DECC, 8, 1)
    FIELD(TX_THREAD_ERROR, BUNDLE, 9, 1)
    FIELD(TX_THREAD_ERROR, RX_JOB_QUEUE, 10, 1)
    FIELD(TX_THREAD_ERROR, ATOMIC_ADD, 11, 1)
    FIELD(TX_THREAD_ERROR, VCHAN, 12, 1)

REG64(TX_THREAD_ERROR_LAC, 0x78)

REG64(TX_THREAD_ASN, 0x80)
    FIELD(TX_THREAD_ASN, ASN, 0, 9)

REG64(TX_PGRM_MEM, 0x0) /* 128 * 64 bits */
    FIELD(TX_PGRM_MEM, BR_COND, 0, 2)
    FIELD(TX_PGRM_MEM, BR_ADDR, 2, 7)
    FIELD(TX_PGRM_MEM, STOP, 9, 1)
    FIELD(TX_PGRM_MEM, SEND_EOT, 10, 1)
    FIELD(TX_PGRM_MEM, FLUSH, 11, 1)
    FIELD(TX_PGRM_MEM, SEL_DCNT, 12, 2)
    FIELD(TX_PGRM_MEM, WR_DCNT, 14, 2)
    FIELD(TX_PGRM_MEM, WPTR_TYPE, 16, 2)
    FIELD(TX_PGRM_MEM, INCR_WPTR, 18, 2)
    FIELD(TX_PGRM_MEM, MOVE_SIZE, 20, 3)
    FIELD(TX_PGRM_MEM, CMD, 23, 3)
    FIELD(TX_PGRM_MEM, INCR_RPTR, 26, 2)
    FIELD(TX_PGRM_MEM, LOAD_STRB, 28, 1)
    FIELD(TX_PGRM_MEM, REG_SIGNED_EXT, 29, 1)
    FIELD(TX_PGRM_MEM, REG_INDEX, 30, 6)
    FIELD(TX_PGRM_MEM, REG_SIZE, 36, 2)

REG64(TX_PGRM_TABLE, 0x0) /* 16 * 64 bits */
    FIELD(TX_PGRM_TABLE, PM_START_ADDR, 0, 7)
    FIELD(TX_PGRM_TABLE, TRANSFER_MODE, 7, 1)
    FIELD(TX_PGRM_TABLE, GLOBAL, 8, 1)
    FIELD(TX_PGRM_TABLE, ASN, 9, 9)
    FIELD(TX_PGRM_TABLE, VALID, 18, 1)

REG64(NOC_ROUTE_TABLE, 0x0) /* 512 * 64 bits */

REG64(BW_LIMITER_TABLE, 0x0) /* 16 * 64 bits */

REG64(TX_MONITORING_THREAD_OUTSTANDING_READ_CNT0, 0x0)
REG64(TX_MONITORING_THREAD_OUTSTANDING_READ_CNT1, 0x8)
REG64(TX_MONITORING_THREAD_OUTSTANDING_READ_CNT2, 0x10)
REG64(TX_MONITORING_THREAD_OUTSTANDING_READ_CNT3, 0x18)
REG64(TX_MONITORING_VCHAN_OUTSTANDING_READ_CNT0, 0x20)
REG64(TX_MONITORING_VCHAN_OUTSTANDING_READ_CNT1, 0x28)
REG64(TX_MONITORING_OUTSTANDING_FIFO_LEVEL0, 0x30)
REG64(TX_MONITORING_OUTSTANDING_FIFO_LEVEL1, 0x38)
REG64(TX_MONITORING_QUEUES_OUTSTANDING_FIFO_LEVEL, 0x40)
REG64(TX_MONITORING_READY_FOR_POWER_OFF, 0x48)

REG64(TX_NOC_TEST_CTRL, 0x0)
REG64(TX_NOC_TEST_HEADER_LO, 0x10)
REG64(TX_NOC_TEST_HEADER_HI, 0x18)
REG64(TX_NOC_TEST_PUSH_DATA_LO, 0x20)
REG64(TX_NOC_TEST_PUSH_DATA_HI, 0x28)
REG64(TX_NOC_TEST_FLUSH, 0x30)

REG64(TX_JOB_QUEUE_START_ADDRESS, 0x0)
REG64(TX_JOB_QUEUE_SLOT_NB_LOG2, 0x8)
REG64(TX_JOB_QUEUE_WRITE_POINTER, 0x10)
REG64(TX_JOB_QUEUE_LOAD_INCR_WRITE_POINTER, 0x18)
REG64(TX_JOB_QUEUE_VALID_WRITE_POINTER, 0x20)
REG64(TX_JOB_QUEUE_LOAD_INCR_VALID_WRITE_POINTER, 0x28)
REG64(TX_JOB_QUEUE_READ_POINTER, 0x30)
REG64(TX_JOB_QUEUE_NOTIFICATION_ADDRESS, 0x38)
REG64(TX_JOB_QUEUE_NOTIFICATION_ARG, 0x40)
REG64(TX_JOB_QUEUE_ASN, 0x48)
REG64(TX_JOB_QUEUE_STATUS, 0x50)
    FIELD(TX_JOB_QUEUE_STATUS, STATUS, 0, 1)
    FIELD(TX_JOB_QUEUE_STATUS, PGRM_PERM, 2, 1)
    FIELD(TX_JOB_QUEUE_STATUS, PGRM_READ_ADDR, 3, 1)
    FIELD(TX_JOB_QUEUE_STATUS, PGRM_READ_DECC, 4, 1)
    FIELD(TX_JOB_QUEUE_STATUS, PGRM_WRITE_ADDR, 5, 1)
    FIELD(TX_JOB_QUEUE_STATUS, PGRM_WRITE_DECC, 6, 1)
    FIELD(TX_JOB_QUEUE_STATUS, NOC_TABLE_PERM, 7, 1)
    FIELD(TX_JOB_QUEUE_STATUS, COMPLETION_QUEUE_PERM, 8, 1)
    FIELD(TX_JOB_QUEUE_STATUS, COMPLETION_QUEUE_ADDR, 9, 1)
    FIELD(TX_JOB_QUEUE_STATUS, COMPLETION_QUEUE_DECC, 10, 1)
    FIELD(TX_JOB_QUEUE_STATUS, BUNDLE, 11, 1)
    FIELD(TX_JOB_QUEUE_STATUS, JOB_QUEUE_ADDR, 12, 1)
    FIELD(TX_JOB_QUEUE_STATUS, JOB_QUEUE_DECC, 13, 1)
    FIELD(TX_JOB_QUEUE_STATUS, RX_JOB_QUEUE, 14, 1)
    FIELD(TX_JOB_QUEUE_STATUS, ATOMIC_ADD, 15, 1)
    FIELD(TX_JOB_QUEUE_STATUS, VCHAN, 16, 1)
#define TX_JOB_QUEUE_STATUS_ERROR 0x3

REG64(TX_JOB_QUEUE_STATUS_LAC, 0x58)
REG64(TX_JOB_QUEUE_ACTIVATE, 0x60)
REG64(TX_JOB_QUEUE_STOP, 0x68)
REG64(TX_JOB_QUEUE_THREAD_ID, 0x70)
REG64(TX_JOB_QUEUE_ON_GOING_JOB_CNT, 0x78)
REG64(TX_JOB_QUEUE_RESET_ON_GOING_JOB_CNT, 0x80)

REG64(TX_COMP_QUEUE_MODE, 0x0)
REG64(TX_COMP_QUEUE_START_ADDRESS, 0x8)
REG64(TX_COMP_QUEUE_SLOT_NB_LOG2, 0x10)
REG64(TX_COMP_QUEUE_GLOBAL, 0x18)
REG64(TX_COMP_QUEUE_ASN, 0x20)
REG64(TX_COMP_QUEUE_FIELD_ENABLE, 0x28)
REG64(TX_COMP_QUEUE_WRITE_POINTER, 0x30)
REG64(TX_COMP_QUEUE_READ_POINTER, 0x40)
REG64(TX_COMP_QUEUE_LOAD_INCR_READ_POINTER, 0x48)
REG64(TX_COMP_QUEUE_VALID_READ_POINTER, 0x50)
REG64(TX_COMP_QUEUE_LOAD_INCR_VALID_READ_POINTER, 0x58)
REG64(TX_COMP_QUEUE_NOTIFICATION_ADDRESS, 0x60)
REG64(TX_COMP_QUEUE_NOTIFICATION_ARG, 0x68)
REG64(TX_COMP_QUEUE_ACTIVATE, 0x70)
REG64(TX_COMP_QUEUE_STOP, 0x78)
REG64(TX_COMP_QUEUE_STATUS, 0x80)
    FIELD(TX_COMP_QUEUE_STATUS, STATUS, 0, 2)
    FIELD(TX_COMP_QUEUE_STATUS, MEM_ADDR_ERROR, 2, 1)
    FIELD(TX_COMP_QUEUE_STATUS, MEM_DECC_ERROR, 3, 1)
REG64(TX_COMP_QUEUE_STATUS_LAC, 0x88)

/* Tx job descriptor */
REG64(TX_JOB_DESC_PARAM0, 0x0)
REG64(TX_JOB_DESC_PARAM1, 0x8)
REG64(TX_JOB_DESC_PARAM2, 0x10)
REG64(TX_JOB_DESC_PARAM3, 0x18)
REG64(TX_JOB_DESC_PARAM4, 0x20)
REG64(TX_JOB_DESC_PARAM5, 0x28)
REG64(TX_JOB_DESC_PARAM6, 0x30)
REG64(TX_JOB_DESC_PARAM7, 0x38)
REG64(TX_JOB_DESC_CTRL, 0x40)
    FIELD(TX_JOB_DESC_CTRL, COMP_QUEUE_ID, 0, 6)
    FIELD(TX_JOB_DESC_CTRL, RES0, 6, 2)
    FIELD(TX_JOB_DESC_CTRL, RX_JOB_PUSH_EN, 8, 1)
    FIELD(TX_JOB_DESC_CTRL, RX_JOB_QUEUE_ID, 9, 3)
    FIELD(TX_JOB_DESC_CTRL, RES1, 12, 4)
    FIELD(TX_JOB_DESC_CTRL, NOC_ROUTE_ID, 16, 9)
    FIELD(TX_JOB_DESC_CTRL, RES2, 25, 7)
    FIELD(TX_JOB_DESC_CTRL, PGRM_ID, 32, 4)
    FIELD(TX_JOB_DESC_CTRL, RES3, 36, 4)
    FIELD(TX_JOB_DESC_CTRL, FENCE_BEFORE, 40, 1)
    FIELD(TX_JOB_DESC_CTRL, FENCE_AFTER, 41, 1)
    FIELD(TX_JOB_DESC_CTRL, RES4, 42, 14)
REG64(TX_JOB_DESC_RESERVED, 0x48)

#define TX_JOB_DESC_NUM_ELTS 10
#define TX_JOB_DESC_SIZE (TX_JOB_DESC_NUM_ELTS * sizeof(uint64_t))

#endif
